/**
 * generated by Xtext 2.16.0
 */
package org.xixum.nlx.model.ui.quickfix;

import com.google.inject.Inject;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.eclipse.core.resources.IMarker;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.IDocumentListener;
import org.eclipse.jface.text.source.Annotation;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.texteditor.MarkerAnnotation;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.ui.editor.quickfix.XtextResourceMarkerAnnotationModel;
import org.eclipse.xtext.ui.editor.validation.XtextAnnotation;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.xixum.nlx.constants.NaturalLangConstants;
import org.xixum.nlx.dictionary.IDictionaryAccess;
import org.xixum.nlx.dictionary.constants.DictionaryConstants;
import org.xixum.nlx.model.ui.constants.EditorUiConstants;
import org.xixum.nlx.model.ui.editor.NaturalLangEditor;
import org.xixum.nlx.model.ui.editor.model.NlxDocument;
import org.xixum.nlx.presets.NlxDictConstants;
import org.xixum.utils.data.util.ClassUtil;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class NaturalLangQuickfixProvider extends DefaultQuickfixProvider {
  @Inject
  private IDictionaryAccess dictAcc;

  private final List<Map<String, Object>> acceptors = Collections.<Map<String, Object>>unmodifiableList(CollectionLiterals.<Map<String, Object>>newArrayList(Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.NOUN_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_NOUN), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.NOUN))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.NAME_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_NAME), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.NAME))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.PRONOUN_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_PRONOUN), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.PRONOUN))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.ARTICLE_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_ARTICLE), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.ARTICLE))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.VERB_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_VERB), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.VERB))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.ADJECTIVE_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_ADJECTIVE), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.ADJECTIVE))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.ADVERB_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_ADVERB), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.ADVERB))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.PREPOSITION_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_PREPOSITION), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.PREPOSITION))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.CONJUNCTION_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_CONJUNCTION), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.CONJUNCTION))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.INTERJECTION_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_INTERJECTION), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.INTERJECTION))), Collections.<String, Object>unmodifiableMap(CollectionLiterals.<String, Object>newHashMap(Pair.<String, String>of(EditorUiConstants._LABEL, DictionaryConstants.UNDEFINED_), Pair.<String, String>of(EditorUiConstants._MSG, EditorUiConstants._UI_MSG_UNDEFINED), Pair.<String, NlxDictConstants>of(EditorUiConstants._DATA, NlxDictConstants.SPECIAL_TYPE)))));

  @Fix(NaturalLangConstants._TRAIN_DICT_)
  public void trainDictionary(final Issue issue, final IssueResolutionAcceptor acceptor) {
    for (final Map<String, Object> accept : this.acceptors) {
      Object _get = accept.get(EditorUiConstants._LABEL);
      Object _get_1 = accept.get(EditorUiConstants._MSG);
      final ISemanticModification _function = (EObject element, IModificationContext context) -> {
        final IXtextDocument xtextDocument = context.getXtextDocument();
        Object _get_2 = accept.get(EditorUiConstants._DATA);
        this.internal_addToDictionary(xtextDocument, element, issue, ((NlxDictConstants) _get_2));
      };
      acceptor.accept(issue, ((String) _get), ((String) _get_1), EditorUiConstants._NLX_TRAIN_IMAGE_URL, _function);
    }
  }

  public void internal_addToDictionary(final IXtextDocument document, final EObject element, final Issue issue, final NlxDictConstants constant) {
    final String word = issue.getData()[0];
    this.dictAcc.addToDictionary(word, constant.getNodeType());
    final IWorkbenchPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
    if ((part instanceof NaturalLangEditor)) {
      final ISelection selection = ((NaturalLangEditor)part).getSelection();
      if ((selection != null)) {
        ((NaturalLangEditor)part).setSelection(selection);
      }
    }
    this.updateMarkers(document, issue, word);
  }

  /**
   * Goes through al Xtext markers and removes the trained Word
   */
  public void updateMarkers(final IXtextDocument document, final Issue issue, final String word) {
    try {
      if ((document instanceof NlxDocument)) {
        final List<IDocumentListener> ListenerList = ((NlxDocument)document).getDocumentListeners();
        for (final IDocumentListener listener : ListenerList) {
          {
            Object model = ClassUtil.getOuterClassInstOfAnonymous(listener);
            if ((model instanceof XtextResourceMarkerAnnotationModel)) {
              Iterator<Annotation> iterator2 = ((XtextResourceMarkerAnnotationModel)model).getAnnotationIterator();
              while (iterator2.hasNext()) {
                {
                  Annotation elm = iterator2.next();
                  if ((elm instanceof XtextAnnotation)) {
                    Issue iss = ((XtextAnnotation) elm).getIssue();
                    if ((((iss.getData() != null) && (!((List<String>)Conversions.doWrapArray(iss.getData())).isEmpty())) && (iss.getData()[0]).toLowerCase().equals((issue.getData()[0]).toLowerCase()))) {
                      ((XtextAnnotation)elm).markDeleted(true);
                      ((XtextResourceMarkerAnnotationModel)model).fireAnnotationChangedEvent(elm);
                    }
                  }
                  if (((elm instanceof MarkerAnnotation) && elm.getType().equals(EditorUiConstants._NLX_INFO_ANNOTATION_TYPE))) {
                    IMarker marker = ((MarkerAnnotation) elm).getMarker();
                    Map<String, Object> attributes = marker.getAttributes();
                    Object _get = attributes.get(EditorUiConstants._NLX_DATA_KEY);
                    String[] name = ((String) _get).split(":");
                    if (((((List<String>)Conversions.doWrapArray(name)).size() == 2) && (name[1]).equals(word))) {
                      elm.markDeleted(true);
                      ((XtextResourceMarkerAnnotationModel)model).fireAnnotationChangedEvent(elm);
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Fix(NaturalLangConstants._TYPO_)
  public void capitalizeName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String firstLetter = xtextDocument.get((issue.getOffset()).intValue(), 1);
      xtextDocument.replace((issue.getOffset()).intValue(), 1, firstLetter.toUpperCase());
    };
    acceptor.accept(issue, EditorUiConstants._UI_CAPITALIZE_NAME, EditorUiConstants._UI_CAPITALIZE_THE_NAME, EditorUiConstants._NLX_CAP_IMAGE_URL, _function);
  }
}
