/**
 * generated by Xtext 2.16.0
 */
package de.validas.spedit.ui.labeling;

import com.google.inject.Inject;
import de.validas.spedit.naturalLang.EString;
import de.validas.spedit.naturalLang.Elements;
import de.validas.spedit.naturalLang.IgnoredText;
import de.validas.spedit.naturalLang.ItWord;
import de.validas.spedit.naturalLang.MailAdress;
import de.validas.spedit.naturalLang.NoNElement;
import de.validas.spedit.naturalLang.Symbols;
import de.validas.spedit.naturalLang.Unit;
import de.validas.spedit.naturalLang.UrlAdress;
import de.validas.spedit.naturalLang.Word;
import javax.annotation.Generated;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.ui.editor.model.XtextDocument;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
@Generated("org.eclipse.xtend.core.compiler.XtendGenerator")
public class NaturalLangLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public NaturalLangLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  @Override
  public Object text(final Object element) {
    Object _xblockexpression = null;
    {
      if ((element instanceof EObject)) {
        return ((EObject)element).eClass().getName();
      }
      if ((element instanceof XtextDocument)) {
        return ((XtextDocument)element).getResourceURI().path();
      }
      _xblockexpression = super.text(element);
    }
    return _xblockexpression;
  }
  
  public Object text(final EObject element) {
    CharSequence _xblockexpression = null;
    {
      String _name = element.eClass().getName();
      StyledString styledText = new StyledString(_name);
      styledText.append(": ");
      CharSequence _switchResult = null;
      boolean _matched = false;
      if (element instanceof IgnoredText || element instanceof UrlAdress || element instanceof MailAdress) {
        _matched=true;
        EStructuralFeature labelFeature = this.getLabelFeature(((NoNElement)element).eClass());
        if ((labelFeature != null)) {
          StyledString _elvis = null;
          StyledString _convertToStyledString = this.convertToStyledString(((NoNElement)element).eGet(labelFeature));
          if (_convertToStyledString != null) {
            _elvis = _convertToStyledString;
          } else {
            StyledString _convertToStyledString_1 = this.convertToStyledString("");
            _elvis = _convertToStyledString_1;
          }
          return styledText.append(_elvis);
        }
      }
      if (!_matched) {
        if (element instanceof Word) {
          _matched=true;
          String word = IterableExtensions.join(((Word)element).getWord(), "");
          return styledText.append(word);
        }
      }
      if (!_matched) {
        if (element instanceof ItWord) {
          _matched=true;
          String word = IterableExtensions.join(((ItWord)element).getWord(), "");
          return styledText.append(word);
        }
      }
      if (!_matched) {
        if (element instanceof Symbols) {
          _matched=true;
          _switchResult = styledText.append(((Symbols)element).getSymbol());
        }
      }
      if (!_matched) {
        if (element instanceof EString) {
          _matched=true;
          _switchResult = styledText.append(IterableExtensions.join(((EString)element).getWord(), ""));
        }
      }
      if (!_matched) {
        if (element instanceof Unit) {
          _matched=true;
          StyledString _xblockexpression_1 = null;
          {
            String value = IterableExtensions.join(((Unit)element).getValue(), "");
            styledText.append(value);
            String _unit = ((Unit)element).getUnit();
            boolean _isEmpty = false;
            if (_unit!=null) {
              _isEmpty=_unit.isEmpty();
            }
            boolean _not = (!_isEmpty);
            if (_not) {
              styledText.append(" | ");
            }
            String _elvis = null;
            String _unit_1 = ((Unit)element).getUnit();
            if (_unit_1 != null) {
              _elvis = _unit_1;
            } else {
              String _join = String.join(" ", ((Unit)element).getValue());
              _elvis = _join;
            }
            _xblockexpression_1 = styledText.append(_elvis);
          }
          _switchResult = _xblockexpression_1;
        }
      }
      if (!_matched) {
        if (element instanceof Elements) {
          _matched=true;
          EStructuralFeature labelFeature = this.getLabelFeature(((Elements)element).eClass());
          if ((labelFeature != null)) {
            StyledString styledS = this.convertToStyledString(((Elements)element).eGet(labelFeature));
            String _xifexpression = null;
            if ((styledS != null)) {
              _xifexpression = styledS.toString();
            } else {
              _xifexpression = "";
            }
            return styledText.append(_xifexpression);
          }
        }
      }
      if (!_matched) {
        _switchResult = element.eClass().getName();
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
}
