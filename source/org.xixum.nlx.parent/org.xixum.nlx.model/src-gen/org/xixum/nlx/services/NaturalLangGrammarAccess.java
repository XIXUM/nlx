/*
 * generated by Xtext 2.16.0
 */
package org.xixum.nlx.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NaturalLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Model");
		private final Assignment cSentencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentencesSentenceTypeParserRuleCall_0 = (RuleCall)cSentencesAssignment.eContents().get(0);
		
		//Model:
		//	sentences+=SentenceType*;
		@Override public ParserRule getRule() { return rule; }
		
		//sentences+=SentenceType*
		public Assignment getSentencesAssignment() { return cSentencesAssignment; }
		
		//SentenceType
		public RuleCall getSentencesSentenceTypeParserRuleCall_0() { return cSentencesSentenceTypeParserRuleCall_0; }
	}
	public class SentenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SentenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWhitespaceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cChapterSentenceParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cParagraphBlockParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cTableParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Assignment cPEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPEndParagraphParserRuleCall_2_0 = (RuleCall)cPEndAssignment_2.eContents().get(0);
		
		//SentenceType:
		//	Whitespace? (=> ChapterSentence | ParagraphBlock | Table) pEnd=Paragraph;
		@Override public ParserRule getRule() { return rule; }
		
		//Whitespace? (=> ChapterSentence | ParagraphBlock | Table) pEnd=Paragraph
		public Group getGroup() { return cGroup; }
		
		//Whitespace?
		public RuleCall getWhitespaceParserRuleCall_0() { return cWhitespaceParserRuleCall_0; }
		
		//=> ChapterSentence | ParagraphBlock | Table
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> ChapterSentence
		public RuleCall getChapterSentenceParserRuleCall_1_0() { return cChapterSentenceParserRuleCall_1_0; }
		
		//ParagraphBlock
		public RuleCall getParagraphBlockParserRuleCall_1_1() { return cParagraphBlockParserRuleCall_1_1; }
		
		//Table
		public RuleCall getTableParserRuleCall_1_2() { return cTableParserRuleCall_1_2; }
		
		//pEnd=Paragraph
		public Assignment getPEndAssignment_2() { return cPEndAssignment_2; }
		
		//Paragraph
		public RuleCall getPEndParagraphParserRuleCall_2_0() { return cPEndParagraphParserRuleCall_2_0; }
	}
	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Paragraph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Paragraph:
		//	NEWLINE+ | END;
		@Override public ParserRule getRule() { return rule; }
		
		//NEWLINE+ | END
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1() { return cENDTerminalRuleCall_1; }
	}
	public class ParagraphBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ParagraphBlock");
		private final Assignment cBlockAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlockBlockElementParserRuleCall_0 = (RuleCall)cBlockAssignment.eContents().get(0);
		
		//ParagraphBlock:
		//	block+=BlockElement+;
		@Override public ParserRule getRule() { return rule; }
		
		//block+=BlockElement+
		public Assignment getBlockAssignment() { return cBlockAssignment; }
		
		//BlockElement
		public RuleCall getBlockBlockElementParserRuleCall_0() { return cBlockBlockElementParserRuleCall_0; }
	}
	public class BlockElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.BlockElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSentenceChainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIgnoredTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFootNoteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListSentenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BlockElement:
		//	SentenceChain | IgnoredText | FootNote | => ListSentence;
		@Override public ParserRule getRule() { return rule; }
		
		//SentenceChain | IgnoredText | FootNote | => ListSentence
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SentenceChain
		public RuleCall getSentenceChainParserRuleCall_0() { return cSentenceChainParserRuleCall_0; }
		
		//IgnoredText
		public RuleCall getIgnoredTextParserRuleCall_1() { return cIgnoredTextParserRuleCall_1; }
		
		//FootNote
		public RuleCall getFootNoteParserRuleCall_2() { return cFootNoteParserRuleCall_2; }
		
		//=> ListSentence
		public RuleCall getListSentenceParserRuleCall_3() { return cListSentenceParserRuleCall_3; }
	}
	public class FootNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FootNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberSimpleNumParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final RuleCall cBR_CLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSentenceChainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSentenceChainSentenceChainParserRuleCall_2_0 = (RuleCall)cSentenceChainAssignment_2.eContents().get(0);
		
		//FootNote:
		//	number=simpleNum BR_CL SentenceChain=SentenceChain;
		@Override public ParserRule getRule() { return rule; }
		
		//number=simpleNum BR_CL SentenceChain=SentenceChain
		public Group getGroup() { return cGroup; }
		
		//number=simpleNum
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//simpleNum
		public RuleCall getNumberSimpleNumParserRuleCall_0_0() { return cNumberSimpleNumParserRuleCall_0_0; }
		
		//BR_CL
		public RuleCall getBR_CLTerminalRuleCall_1() { return cBR_CLTerminalRuleCall_1; }
		
		//SentenceChain=SentenceChain
		public Assignment getSentenceChainAssignment_2() { return cSentenceChainAssignment_2; }
		
		//SentenceChain
		public RuleCall getSentenceChainSentenceChainParserRuleCall_2_0() { return cSentenceChainSentenceChainParserRuleCall_2_0; }
	}
	public class TableLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.TableLine");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentTABLE_LINETerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//TableLine hidden():
		//	content=TABLE_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		////content+=PLUS content+=MINUS_LINE (content+=PLUS content+=MINUS_LINE)* content+=PLUS;
		//content=TABLE_LINE
		public Assignment getContentAssignment() { return cContentAssignment; }
		
		//TABLE_LINE
		public RuleCall getContentTABLE_LINETerminalRuleCall_0() { return cContentTABLE_LINETerminalRuleCall_0; }
	}
	public class TableBorderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.TableBorder");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTableColumnSeparatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTableLineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TableBorder:
		//	TableColumnSeparator | TableLine;
		@Override public ParserRule getRule() { return rule; }
		
		//TableColumnSeparator | TableLine
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TableColumnSeparator
		public RuleCall getTableColumnSeparatorParserRuleCall_0() { return cTableColumnSeparatorParserRuleCall_0; }
		
		//TableLine
		public RuleCall getTableLineParserRuleCall_1() { return cTableLineParserRuleCall_1; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentTableBorderParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentLineSentenceChainParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cContentAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cContentTableBorderParserRuleCall_3_0_0 = (RuleCall)cContentAssignment_3_0.eContents().get(0);
		private final Assignment cContentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContentLineSentenceChainParserRuleCall_3_1_0 = (RuleCall)cContentAssignment_3_1.eContents().get(0);
		private final Assignment cContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentTableBorderParserRuleCall_4_0 = (RuleCall)cContentAssignment_4.eContents().get(0);
		
		//TableRow:
		//	{TableRow} content+=TableBorder content+=LineSentenceChain? (content+=TableBorder content+=LineSentenceChain?)*
		//	content+=TableBorder;
		@Override public ParserRule getRule() { return rule; }
		
		//{TableRow} content+=TableBorder content+=LineSentenceChain? (content+=TableBorder content+=LineSentenceChain?)*
		//content+=TableBorder
		public Group getGroup() { return cGroup; }
		
		//{TableRow}
		public Action getTableRowAction_0() { return cTableRowAction_0; }
		
		//content+=TableBorder
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//TableBorder
		public RuleCall getContentTableBorderParserRuleCall_1_0() { return cContentTableBorderParserRuleCall_1_0; }
		
		//content+=LineSentenceChain?
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//LineSentenceChain
		public RuleCall getContentLineSentenceChainParserRuleCall_2_0() { return cContentLineSentenceChainParserRuleCall_2_0; }
		
		//(content+=TableBorder content+=LineSentenceChain?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//content+=TableBorder
		public Assignment getContentAssignment_3_0() { return cContentAssignment_3_0; }
		
		//TableBorder
		public RuleCall getContentTableBorderParserRuleCall_3_0_0() { return cContentTableBorderParserRuleCall_3_0_0; }
		
		//content+=LineSentenceChain?
		public Assignment getContentAssignment_3_1() { return cContentAssignment_3_1; }
		
		//LineSentenceChain
		public RuleCall getContentLineSentenceChainParserRuleCall_3_1_0() { return cContentLineSentenceChainParserRuleCall_3_1_0; }
		
		//content+=TableBorder
		public Assignment getContentAssignment_4() { return cContentAssignment_4; }
		
		//TableBorder
		public RuleCall getContentTableBorderParserRuleCall_4_0() { return cContentTableBorderParserRuleCall_4_0; }
	}
	public class TableColumnSeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.TableColumnSeparator");
		private final Assignment cCharAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCharHORIZ_SEPTerminalRuleCall_0 = (RuleCall)cCharAssignment.eContents().get(0);
		
		//TableColumnSeparator:
		//	char=HORIZ_SEP;
		@Override public ParserRule getRule() { return rule; }
		
		//char=HORIZ_SEP
		public Assignment getCharAssignment() { return cCharAssignment; }
		
		//HORIZ_SEP
		public RuleCall getCharHORIZ_SEPTerminalRuleCall_0() { return cCharHORIZ_SEPTerminalRuleCall_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLinesTableLineParserRuleCall_0_0 = (RuleCall)cLinesAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLinesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLinesTableRowParserRuleCall_2_0_0 = (RuleCall)cLinesAssignment_2_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLinesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLinesTableLineParserRuleCall_3_0_0 = (RuleCall)cLinesAssignment_3_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cLinesAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cLinesTableRowParserRuleCall_3_2_0_0 = (RuleCall)cLinesAssignment_3_2_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Assignment cLinesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinesTableLineParserRuleCall_4_0 = (RuleCall)cLinesAssignment_4.eContents().get(0);
		
		//Table:
		//	lines+=TableLine NEWLINE (lines+=TableRow NEWLINE)+ (lines+=TableLine NEWLINE (lines+=TableRow NEWLINE)+)*
		//	lines+=TableLine;
		@Override public ParserRule getRule() { return rule; }
		
		//lines+=TableLine NEWLINE (lines+=TableRow NEWLINE)+ (lines+=TableLine NEWLINE (lines+=TableRow NEWLINE)+)*
		//lines+=TableLine
		public Group getGroup() { return cGroup; }
		
		//lines+=TableLine
		public Assignment getLinesAssignment_0() { return cLinesAssignment_0; }
		
		//TableLine
		public RuleCall getLinesTableLineParserRuleCall_0_0() { return cLinesTableLineParserRuleCall_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
		
		//(lines+=TableRow NEWLINE)+
		public Group getGroup_2() { return cGroup_2; }
		
		//lines+=TableRow
		public Assignment getLinesAssignment_2_0() { return cLinesAssignment_2_0; }
		
		//TableRow
		public RuleCall getLinesTableRowParserRuleCall_2_0_0() { return cLinesTableRowParserRuleCall_2_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2_1() { return cNEWLINETerminalRuleCall_2_1; }
		
		//(lines+=TableLine NEWLINE (lines+=TableRow NEWLINE)+)*
		public Group getGroup_3() { return cGroup_3; }
		
		//lines+=TableLine
		public Assignment getLinesAssignment_3_0() { return cLinesAssignment_3_0; }
		
		//TableLine
		public RuleCall getLinesTableLineParserRuleCall_3_0_0() { return cLinesTableLineParserRuleCall_3_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_3_1() { return cNEWLINETerminalRuleCall_3_1; }
		
		//(lines+=TableRow NEWLINE)+
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//lines+=TableRow
		public Assignment getLinesAssignment_3_2_0() { return cLinesAssignment_3_2_0; }
		
		//TableRow
		public RuleCall getLinesTableRowParserRuleCall_3_2_0_0() { return cLinesTableRowParserRuleCall_3_2_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_3_2_1() { return cNEWLINETerminalRuleCall_3_2_1; }
		
		//lines+=TableLine
		public Assignment getLinesAssignment_4() { return cLinesAssignment_4; }
		
		//TableLine
		public RuleCall getLinesTableLineParserRuleCall_4_0() { return cLinesTableLineParserRuleCall_4_0; }
	}
	public class LineSentenceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.LineSentenceChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceChainAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSentencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentencesLineSentenceParserRuleCall_1_0 = (RuleCall)cSentencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSeparatorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0 = (RuleCall)cSeparatorsAssignment_2_0.eContents().get(0);
		private final Assignment cSentencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentencesLineSentenceParserRuleCall_2_1_0 = (RuleCall)cSentencesAssignment_2_1.eContents().get(0);
		private final Assignment cEndpointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndpointFULL_STOP_IMTerminalRuleCall_3_0 = (RuleCall)cEndpointAssignment_3.eContents().get(0);
		
		//LineSentenceChain:
		//	{SentenceChain} sentences+=LineSentence (separators+=FULL_STOP_IM sentences+=LineSentence)* endpoint=FULL_STOP_IM?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SentenceChain} sentences+=LineSentence (separators+=FULL_STOP_IM sentences+=LineSentence)* endpoint=FULL_STOP_IM?
		public Group getGroup() { return cGroup; }
		
		//{SentenceChain}
		public Action getSentenceChainAction_0() { return cSentenceChainAction_0; }
		
		//sentences+=LineSentence
		public Assignment getSentencesAssignment_1() { return cSentencesAssignment_1; }
		
		//LineSentence
		public RuleCall getSentencesLineSentenceParserRuleCall_1_0() { return cSentencesLineSentenceParserRuleCall_1_0; }
		
		//(separators+=FULL_STOP_IM sentences+=LineSentence)*
		public Group getGroup_2() { return cGroup_2; }
		
		//separators+=FULL_STOP_IM
		public Assignment getSeparatorsAssignment_2_0() { return cSeparatorsAssignment_2_0; }
		
		//FULL_STOP_IM
		public RuleCall getSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0() { return cSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0; }
		
		//sentences+=LineSentence
		public Assignment getSentencesAssignment_2_1() { return cSentencesAssignment_2_1; }
		
		//LineSentence
		public RuleCall getSentencesLineSentenceParserRuleCall_2_1_0() { return cSentencesLineSentenceParserRuleCall_2_1_0; }
		
		//endpoint=FULL_STOP_IM?
		public Assignment getEndpointAssignment_3() { return cEndpointAssignment_3; }
		
		//FULL_STOP_IM
		public RuleCall getEndpointFULL_STOP_IMTerminalRuleCall_3_0() { return cEndpointFULL_STOP_IMTerminalRuleCall_3_0; }
	}
	public class SentenceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SentenceChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceChainAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSentencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentencesSentenceParserRuleCall_1_0 = (RuleCall)cSentencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSeparatorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0 = (RuleCall)cSeparatorsAssignment_2_0.eContents().get(0);
		private final Assignment cSentencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentencesSentenceXParserRuleCall_2_1_0 = (RuleCall)cSentencesAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEndpointAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cEndpointFULL_STOP_NLTerminalRuleCall_3_0_0 = (RuleCall)cEndpointAssignment_3_0.eContents().get(0);
		private final Assignment cEndpointAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cEndpointNEWLINETerminalRuleCall_3_1_0 = (RuleCall)cEndpointAssignment_3_1.eContents().get(0);
		
		//SentenceChain:
		//	{SentenceChain} => sentences+=Sentence (separators+=FULL_STOP_IM sentences+=SentenceX)* (endpoint=FULL_STOP_NL |
		//	endpoint=NEWLINE);
		@Override public ParserRule getRule() { return rule; }
		
		//{SentenceChain} => sentences+=Sentence (separators+=FULL_STOP_IM sentences+=SentenceX)* (endpoint=FULL_STOP_NL |
		//endpoint=NEWLINE)
		public Group getGroup() { return cGroup; }
		
		//{SentenceChain}
		public Action getSentenceChainAction_0() { return cSentenceChainAction_0; }
		
		//=> sentences+=Sentence
		public Assignment getSentencesAssignment_1() { return cSentencesAssignment_1; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_1_0() { return cSentencesSentenceParserRuleCall_1_0; }
		
		//(separators+=FULL_STOP_IM sentences+=SentenceX)*
		public Group getGroup_2() { return cGroup_2; }
		
		//separators+=FULL_STOP_IM
		public Assignment getSeparatorsAssignment_2_0() { return cSeparatorsAssignment_2_0; }
		
		//FULL_STOP_IM
		public RuleCall getSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0() { return cSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0; }
		
		//sentences+=SentenceX
		public Assignment getSentencesAssignment_2_1() { return cSentencesAssignment_2_1; }
		
		//SentenceX
		public RuleCall getSentencesSentenceXParserRuleCall_2_1_0() { return cSentencesSentenceXParserRuleCall_2_1_0; }
		
		//endpoint=FULL_STOP_NL | endpoint=NEWLINE
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//endpoint=FULL_STOP_NL
		public Assignment getEndpointAssignment_3_0() { return cEndpointAssignment_3_0; }
		
		//FULL_STOP_NL
		public RuleCall getEndpointFULL_STOP_NLTerminalRuleCall_3_0_0() { return cEndpointFULL_STOP_NLTerminalRuleCall_3_0_0; }
		
		//endpoint=NEWLINE
		public Assignment getEndpointAssignment_3_1() { return cEndpointAssignment_3_1; }
		
		//NEWLINE
		public RuleCall getEndpointNEWLINETerminalRuleCall_3_1_0() { return cEndpointNEWLINETerminalRuleCall_3_1_0; }
	}
	public class SentenceChainXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SentenceChainX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceChainAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSentencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentencesSentenceParserRuleCall_1_0 = (RuleCall)cSentencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSeparatorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0 = (RuleCall)cSeparatorsAssignment_2_0.eContents().get(0);
		private final Assignment cSentencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentencesSentenceXParserRuleCall_2_1_0 = (RuleCall)cSentencesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cEndpointAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cEndpointFULL_STOP_NLTerminalRuleCall_3_0_0_0 = (RuleCall)cEndpointAssignment_3_0_0.eContents().get(0);
		private final Assignment cEndpointAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cEndpointNEWLINETerminalRuleCall_3_0_1_0 = (RuleCall)cEndpointAssignment_3_0_1.eContents().get(0);
		private final Assignment cEndpointAssignment_3_0_2 = (Assignment)cAlternatives_3_0.eContents().get(2);
		private final RuleCall cEndpointKOMMATerminalRuleCall_3_0_2_0 = (RuleCall)cEndpointAssignment_3_0_2.eContents().get(0);
		
		//SentenceChainX:
		//	{SentenceChain} sentences+=Sentence (separators+=FULL_STOP_IM sentences+=SentenceX)* => (endpoint=FULL_STOP_NL |
		//	endpoint=NEWLINE | endpoint=KOMMA);
		@Override public ParserRule getRule() { return rule; }
		
		//{SentenceChain} sentences+=Sentence (separators+=FULL_STOP_IM sentences+=SentenceX)* => (endpoint=FULL_STOP_NL |
		//endpoint=NEWLINE | endpoint=KOMMA)
		public Group getGroup() { return cGroup; }
		
		//{SentenceChain}
		public Action getSentenceChainAction_0() { return cSentenceChainAction_0; }
		
		//sentences+=Sentence
		public Assignment getSentencesAssignment_1() { return cSentencesAssignment_1; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_1_0() { return cSentencesSentenceParserRuleCall_1_0; }
		
		//(separators+=FULL_STOP_IM sentences+=SentenceX)*
		public Group getGroup_2() { return cGroup_2; }
		
		//separators+=FULL_STOP_IM
		public Assignment getSeparatorsAssignment_2_0() { return cSeparatorsAssignment_2_0; }
		
		//FULL_STOP_IM
		public RuleCall getSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0() { return cSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0; }
		
		//sentences+=SentenceX
		public Assignment getSentencesAssignment_2_1() { return cSentencesAssignment_2_1; }
		
		//SentenceX
		public RuleCall getSentencesSentenceXParserRuleCall_2_1_0() { return cSentencesSentenceXParserRuleCall_2_1_0; }
		
		//=> (endpoint=FULL_STOP_NL | endpoint=NEWLINE | endpoint=KOMMA)
		public Group getGroup_3() { return cGroup_3; }
		
		//endpoint=FULL_STOP_NL | endpoint=NEWLINE | endpoint=KOMMA
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//endpoint=FULL_STOP_NL
		public Assignment getEndpointAssignment_3_0_0() { return cEndpointAssignment_3_0_0; }
		
		//FULL_STOP_NL
		public RuleCall getEndpointFULL_STOP_NLTerminalRuleCall_3_0_0_0() { return cEndpointFULL_STOP_NLTerminalRuleCall_3_0_0_0; }
		
		//endpoint=NEWLINE
		public Assignment getEndpointAssignment_3_0_1() { return cEndpointAssignment_3_0_1; }
		
		//NEWLINE
		public RuleCall getEndpointNEWLINETerminalRuleCall_3_0_1_0() { return cEndpointNEWLINETerminalRuleCall_3_0_1_0; }
		
		//endpoint=KOMMA
		public Assignment getEndpointAssignment_3_0_2() { return cEndpointAssignment_3_0_2; }
		
		//KOMMA
		public RuleCall getEndpointKOMMATerminalRuleCall_3_0_2_0() { return cEndpointKOMMATerminalRuleCall_3_0_2_0; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Sentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSubsentenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubsentenceSubSentenceParserRuleCall_1_0 = (RuleCall)cSubsentenceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cKOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cSubsentenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubsentenceTrailSubSentenceParserRuleCall_2_1_0 = (RuleCall)cSubsentenceAssignment_2_1.eContents().get(0);
		
		//Sentence:
		//	{Sentence} subsentence+=SubSentence (KOMMA subsentence+=TrailSubSentence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sentence} subsentence+=SubSentence (KOMMA subsentence+=TrailSubSentence)*
		public Group getGroup() { return cGroup; }
		
		//{Sentence}
		public Action getSentenceAction_0() { return cSentenceAction_0; }
		
		//subsentence+=SubSentence
		public Assignment getSubsentenceAssignment_1() { return cSubsentenceAssignment_1; }
		
		//SubSentence
		public RuleCall getSubsentenceSubSentenceParserRuleCall_1_0() { return cSubsentenceSubSentenceParserRuleCall_1_0; }
		
		//(KOMMA subsentence+=TrailSubSentence)*
		public Group getGroup_2() { return cGroup_2; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_2_0() { return cKOMMATerminalRuleCall_2_0; }
		
		//subsentence+=TrailSubSentence
		public Assignment getSubsentenceAssignment_2_1() { return cSubsentenceAssignment_2_1; }
		
		//TrailSubSentence
		public RuleCall getSubsentenceTrailSubSentenceParserRuleCall_2_1_0() { return cSubsentenceTrailSubSentenceParserRuleCall_2_1_0; }
	}
	public class LineSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.LineSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSubsentenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubsentenceLineSubSentenceParserRuleCall_1_0 = (RuleCall)cSubsentenceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cKOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cSubsentenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubsentenceLineSubSentenceParserRuleCall_2_1_0 = (RuleCall)cSubsentenceAssignment_2_1.eContents().get(0);
		
		//LineSentence:
		//	{Sentence} subsentence+=LineSubSentence (KOMMA subsentence+=LineSubSentence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sentence} subsentence+=LineSubSentence (KOMMA subsentence+=LineSubSentence)*
		public Group getGroup() { return cGroup; }
		
		//{Sentence}
		public Action getSentenceAction_0() { return cSentenceAction_0; }
		
		//subsentence+=LineSubSentence
		public Assignment getSubsentenceAssignment_1() { return cSubsentenceAssignment_1; }
		
		//LineSubSentence
		public RuleCall getSubsentenceLineSubSentenceParserRuleCall_1_0() { return cSubsentenceLineSubSentenceParserRuleCall_1_0; }
		
		//(KOMMA subsentence+=LineSubSentence)*
		public Group getGroup_2() { return cGroup_2; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_2_0() { return cKOMMATerminalRuleCall_2_0; }
		
		//subsentence+=LineSubSentence
		public Assignment getSubsentenceAssignment_2_1() { return cSubsentenceAssignment_2_1; }
		
		//LineSubSentence
		public RuleCall getSubsentenceLineSubSentenceParserRuleCall_2_1_0() { return cSubsentenceLineSubSentenceParserRuleCall_2_1_0; }
	}
	public class FreeSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FreeSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSubsentenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubsentenceFreeSubSentenceParserRuleCall_1_0 = (RuleCall)cSubsentenceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cKOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cSubsentenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubsentenceFreeSubSentenceParserRuleCall_2_1_0 = (RuleCall)cSubsentenceAssignment_2_1.eContents().get(0);
		
		//FreeSentence:
		//	{Sentence} subsentence+=FreeSubSentence (KOMMA subsentence+=FreeSubSentence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sentence} subsentence+=FreeSubSentence (KOMMA subsentence+=FreeSubSentence)*
		public Group getGroup() { return cGroup; }
		
		//{Sentence}
		public Action getSentenceAction_0() { return cSentenceAction_0; }
		
		//subsentence+=FreeSubSentence
		public Assignment getSubsentenceAssignment_1() { return cSubsentenceAssignment_1; }
		
		//FreeSubSentence
		public RuleCall getSubsentenceFreeSubSentenceParserRuleCall_1_0() { return cSubsentenceFreeSubSentenceParserRuleCall_1_0; }
		
		//(KOMMA subsentence+=FreeSubSentence)*
		public Group getGroup_2() { return cGroup_2; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_2_0() { return cKOMMATerminalRuleCall_2_0; }
		
		//subsentence+=FreeSubSentence
		public Assignment getSubsentenceAssignment_2_1() { return cSubsentenceAssignment_2_1; }
		
		//FreeSubSentence
		public RuleCall getSubsentenceFreeSubSentenceParserRuleCall_2_1_0() { return cSubsentenceFreeSubSentenceParserRuleCall_2_1_0; }
	}
	public class SentenceXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SentenceX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSubsentenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubsentenceTrailSubSentenceParserRuleCall_1_0 = (RuleCall)cSubsentenceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cKOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cSubsentenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubsentenceTrailSubSentenceParserRuleCall_2_1_0 = (RuleCall)cSubsentenceAssignment_2_1.eContents().get(0);
		
		//SentenceX:
		//	{Sentence} subsentence+=TrailSubSentence (KOMMA subsentence+=TrailSubSentence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sentence} subsentence+=TrailSubSentence (KOMMA subsentence+=TrailSubSentence)*
		public Group getGroup() { return cGroup; }
		
		//{Sentence}
		public Action getSentenceAction_0() { return cSentenceAction_0; }
		
		//subsentence+=TrailSubSentence
		public Assignment getSubsentenceAssignment_1() { return cSubsentenceAssignment_1; }
		
		//TrailSubSentence
		public RuleCall getSubsentenceTrailSubSentenceParserRuleCall_1_0() { return cSubsentenceTrailSubSentenceParserRuleCall_1_0; }
		
		//(KOMMA subsentence+=TrailSubSentence)*
		public Group getGroup_2() { return cGroup_2; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_2_0() { return cKOMMATerminalRuleCall_2_0; }
		
		//subsentence+=TrailSubSentence
		public Assignment getSubsentenceAssignment_2_1() { return cSubsentenceAssignment_2_1; }
		
		//TrailSubSentence
		public RuleCall getSubsentenceTrailSubSentenceParserRuleCall_2_1_0() { return cSubsentenceTrailSubSentenceParserRuleCall_2_1_0; }
	}
	public class ListSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ListSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListpointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListpointListPointParserRuleCall_0_0 = (RuleCall)cListpointAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSentenceChainAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSentenceChainSentenceChainXParserRuleCall_1_0_0 = (RuleCall)cSentenceChainAssignment_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ListSentence:
		//	listpoint=ListPoint (SentenceChain=SentenceChainX | NEWLINE);
		@Override public ParserRule getRule() { return rule; }
		
		//listpoint=ListPoint (SentenceChain=SentenceChainX | NEWLINE)
		public Group getGroup() { return cGroup; }
		
		//listpoint=ListPoint
		public Assignment getListpointAssignment_0() { return cListpointAssignment_0; }
		
		//ListPoint
		public RuleCall getListpointListPointParserRuleCall_0_0() { return cListpointListPointParserRuleCall_0_0; }
		
		//SentenceChain=SentenceChainX | NEWLINE
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SentenceChain=SentenceChainX
		public Assignment getSentenceChainAssignment_1_0() { return cSentenceChainAssignment_1_0; }
		
		//SentenceChainX
		public RuleCall getSentenceChainSentenceChainXParserRuleCall_1_0_0() { return cSentenceChainSentenceChainXParserRuleCall_1_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1() { return cNEWLINETerminalRuleCall_1_1; }
	}
	public class ChapterSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ChapterSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cChapterNumberAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cChapterNumberChapter_Unit_LowParserRuleCall_0_0_0 = (RuleCall)cChapterNumberAssignment_0_0.eContents().get(0);
		private final Assignment cChapterNumberAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cChapterNumberChapterAlphaParserRuleCall_0_1_0 = (RuleCall)cChapterNumberAssignment_0_1.eContents().get(0);
		private final Assignment cChapterNumberAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cChapterNumberChapter_Unit_HIParserRuleCall_0_2_0 = (RuleCall)cChapterNumberAssignment_0_2.eContents().get(0);
		private final Assignment cHeadlineAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadlineLineSentenceChainParserRuleCall_1_0 = (RuleCall)cHeadlineAssignment_1.eContents().get(0);
		
		//ChapterSentence:
		//	(=> chapterNumber=Chapter_Unit_Low | chapterNumber=ChapterAlpha | chapterNumber=Chapter_Unit_HI)
		//	Headline=LineSentenceChain;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> chapterNumber=Chapter_Unit_Low | chapterNumber=ChapterAlpha | chapterNumber=Chapter_Unit_HI)
		//Headline=LineSentenceChain
		public Group getGroup() { return cGroup; }
		
		//=> chapterNumber=Chapter_Unit_Low | chapterNumber=ChapterAlpha | chapterNumber=Chapter_Unit_HI
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//=> chapterNumber=Chapter_Unit_Low
		public Assignment getChapterNumberAssignment_0_0() { return cChapterNumberAssignment_0_0; }
		
		//Chapter_Unit_Low
		public RuleCall getChapterNumberChapter_Unit_LowParserRuleCall_0_0_0() { return cChapterNumberChapter_Unit_LowParserRuleCall_0_0_0; }
		
		//chapterNumber=ChapterAlpha
		public Assignment getChapterNumberAssignment_0_1() { return cChapterNumberAssignment_0_1; }
		
		//ChapterAlpha
		public RuleCall getChapterNumberChapterAlphaParserRuleCall_0_1_0() { return cChapterNumberChapterAlphaParserRuleCall_0_1_0; }
		
		//chapterNumber=Chapter_Unit_HI
		public Assignment getChapterNumberAssignment_0_2() { return cChapterNumberAssignment_0_2; }
		
		//Chapter_Unit_HI
		public RuleCall getChapterNumberChapter_Unit_HIParserRuleCall_0_2_0() { return cChapterNumberChapter_Unit_HIParserRuleCall_0_2_0; }
		
		//Headline=LineSentenceChain
		public Assignment getHeadlineAssignment_1() { return cHeadlineAssignment_1; }
		
		//LineSentenceChain
		public RuleCall getHeadlineLineSentenceChainParserRuleCall_1_0() { return cHeadlineLineSentenceChainParserRuleCall_1_0; }
	}
	public class SubSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SubSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cElementsNoNElementParserRuleCall_1_0_0_0 = (RuleCall)cElementsAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_1_0_1_1_0 = (RuleCall)cElementsAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cElementsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cElementsNoNElementXParserRuleCall_1_1_0_0 = (RuleCall)cElementsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_1_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsNew_LineParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cElementsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cElementsNoNElementX2ParserRuleCall_2_3_0 = (RuleCall)cElementsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final RuleCall cSPACETerminalRuleCall_2_4_0 = (RuleCall)cGroup_2_4.eContents().get(0);
		private final Assignment cElementsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_2_4_1_0 = (RuleCall)cElementsAssignment_2_4_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SubSentence hidden():
		//	{SubSentence} (elements+=NoNElement (SPACE elements+=Elements)* | elements+=NoNElementX (SPACE elements+=Elements)+)
		//	(SPACE? elements+=New_Line SPACE? elements+=NoNElementX2 (SPACE elements+=Elements)*)* SPACE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SubSentence} (elements+=NoNElement (SPACE elements+=Elements)* | elements+=NoNElementX (SPACE elements+=Elements)+)
		//(SPACE? elements+=New_Line SPACE? elements+=NoNElementX2 (SPACE elements+=Elements)*)* SPACE?
		public Group getGroup() { return cGroup; }
		
		//{SubSentence}
		public Action getSubSentenceAction_0() { return cSubSentenceAction_0; }
		
		//elements+=NoNElement (SPACE elements+=Elements)* | elements+=NoNElementX (SPACE elements+=Elements)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//elements+=NoNElement (SPACE elements+=Elements)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//elements+=NoNElement
		public Assignment getElementsAssignment_1_0_0() { return cElementsAssignment_1_0_0; }
		
		//NoNElement
		public RuleCall getElementsNoNElementParserRuleCall_1_0_0_0() { return cElementsNoNElementParserRuleCall_1_0_0_0; }
		
		//(SPACE elements+=Elements)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_0_1_0() { return cSPACETerminalRuleCall_1_0_1_0; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_1_0_1_1() { return cElementsAssignment_1_0_1_1; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_1_0_1_1_0() { return cElementsElementsParserRuleCall_1_0_1_1_0; }
		
		//elements+=NoNElementX (SPACE elements+=Elements)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//elements+=NoNElementX
		public Assignment getElementsAssignment_1_1_0() { return cElementsAssignment_1_1_0; }
		
		//NoNElementX
		public RuleCall getElementsNoNElementXParserRuleCall_1_1_0_0() { return cElementsNoNElementXParserRuleCall_1_1_0_0; }
		
		//(SPACE elements+=Elements)+
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_1_1_0() { return cSPACETerminalRuleCall_1_1_1_0; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_1_1_1_1() { return cElementsAssignment_1_1_1_1; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_1_1_1_1_0() { return cElementsElementsParserRuleCall_1_1_1_1_0; }
		
		//(SPACE? elements+=New_Line SPACE? elements+=NoNElementX2 (SPACE elements+=Elements)*)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_2_0() { return cSPACETerminalRuleCall_2_0; }
		
		//elements+=New_Line
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//New_Line
		public RuleCall getElementsNew_LineParserRuleCall_2_1_0() { return cElementsNew_LineParserRuleCall_2_1_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_2_2() { return cSPACETerminalRuleCall_2_2; }
		
		//elements+=NoNElementX2
		public Assignment getElementsAssignment_2_3() { return cElementsAssignment_2_3; }
		
		//NoNElementX2
		public RuleCall getElementsNoNElementX2ParserRuleCall_2_3_0() { return cElementsNoNElementX2ParserRuleCall_2_3_0; }
		
		//(SPACE elements+=Elements)*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_2_4_0() { return cSPACETerminalRuleCall_2_4_0; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_2_4_1() { return cElementsAssignment_2_4_1; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_2_4_1_0() { return cElementsElementsParserRuleCall_2_4_1_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }
	}
	public class TrailSubSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.TrailSubSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsElementsParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cElementsNew_LineParserRuleCall_1_2_1_0 = (RuleCall)cElementsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final Assignment cElementsAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cElementsNoNElementX2ParserRuleCall_1_2_3_0 = (RuleCall)cElementsAssignment_1_2_3.eContents().get(0);
		private final Group cGroup_1_2_4 = (Group)cGroup_1_2.eContents().get(4);
		private final RuleCall cSPACETerminalRuleCall_1_2_4_0 = (RuleCall)cGroup_1_2_4.eContents().get(0);
		private final Assignment cElementsAssignment_1_2_4_1 = (Assignment)cGroup_1_2_4.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_1_2_4_1_0 = (RuleCall)cElementsAssignment_1_2_4_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TrailSubSentence hidden():
		//	{SubSentence} (elements+=Elements (SPACE elements+=Elements)* (SPACE? elements+=New_Line SPACE? =>
		//	elements+=NoNElementX2 (SPACE elements+=Elements)*)*) SPACE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SubSentence} (elements+=Elements (SPACE elements+=Elements)* (SPACE? elements+=New_Line SPACE? =>
		//elements+=NoNElementX2 (SPACE elements+=Elements)*)*) SPACE?
		public Group getGroup() { return cGroup; }
		
		//{SubSentence}
		public Action getSubSentenceAction_0() { return cSubSentenceAction_0; }
		
		//elements+=Elements (SPACE elements+=Elements)* (SPACE? elements+=New_Line SPACE? => elements+=NoNElementX2 (SPACE
		//elements+=Elements)*)*
		public Group getGroup_1() { return cGroup_1; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_1_0_0() { return cElementsElementsParserRuleCall_1_0_0; }
		
		//(SPACE elements+=Elements)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_1_0() { return cSPACETerminalRuleCall_1_1_0; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_1_1_1() { return cElementsAssignment_1_1_1; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_1_1_1_0() { return cElementsElementsParserRuleCall_1_1_1_0; }
		
		//(SPACE? elements+=New_Line SPACE? => elements+=NoNElementX2 (SPACE elements+=Elements)*)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1_2_0() { return cSPACETerminalRuleCall_1_2_0; }
		
		//elements+=New_Line
		public Assignment getElementsAssignment_1_2_1() { return cElementsAssignment_1_2_1; }
		
		//New_Line
		public RuleCall getElementsNew_LineParserRuleCall_1_2_1_0() { return cElementsNew_LineParserRuleCall_1_2_1_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1_2_2() { return cSPACETerminalRuleCall_1_2_2; }
		
		//=> elements+=NoNElementX2
		public Assignment getElementsAssignment_1_2_3() { return cElementsAssignment_1_2_3; }
		
		//NoNElementX2
		public RuleCall getElementsNoNElementX2ParserRuleCall_1_2_3_0() { return cElementsNoNElementX2ParserRuleCall_1_2_3_0; }
		
		//(SPACE elements+=Elements)*
		public Group getGroup_1_2_4() { return cGroup_1_2_4; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_2_4_0() { return cSPACETerminalRuleCall_1_2_4_0; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_1_2_4_1() { return cElementsAssignment_1_2_4_1; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_1_2_4_1_0() { return cElementsElementsParserRuleCall_1_2_4_1_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
	}
	public class FreeSubSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FreeSubSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cElementsNew_LineParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsAllElementsParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_3_0_0 = (RuleCall)cAlternatives_3_0.eContents().get(0);
		private final Assignment cElementsAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cElementsNew_LineParserRuleCall_3_0_1_0 = (RuleCall)cElementsAssignment_3_0_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsAllElementsParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cSPACETerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cElementsNew_LineParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		
		//FreeSubSentence hidden():
		//	{SubSentence} (SPACE | elements+=New_Line)* elements+=AllElements ((SPACE | elements+=New_Line)+
		//	elements+=AllElements)* (SPACE | elements+=New_Line)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SubSentence} (SPACE | elements+=New_Line)* elements+=AllElements ((SPACE | elements+=New_Line)+ elements+=AllElements)*
		//(SPACE | elements+=New_Line)*
		public Group getGroup() { return cGroup; }
		
		//{SubSentence}
		public Action getSubSentenceAction_0() { return cSubSentenceAction_0; }
		
		//(SPACE | elements+=New_Line)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_0() { return cSPACETerminalRuleCall_1_0; }
		
		//elements+=New_Line
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//New_Line
		public RuleCall getElementsNew_LineParserRuleCall_1_1_0() { return cElementsNew_LineParserRuleCall_1_1_0; }
		
		//elements+=AllElements
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//AllElements
		public RuleCall getElementsAllElementsParserRuleCall_2_0() { return cElementsAllElementsParserRuleCall_2_0; }
		
		//((SPACE | elements+=New_Line)+ elements+=AllElements)*
		public Group getGroup_3() { return cGroup_3; }
		
		//(SPACE | elements+=New_Line)+
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_3_0_0() { return cSPACETerminalRuleCall_3_0_0; }
		
		//elements+=New_Line
		public Assignment getElementsAssignment_3_0_1() { return cElementsAssignment_3_0_1; }
		
		//New_Line
		public RuleCall getElementsNew_LineParserRuleCall_3_0_1_0() { return cElementsNew_LineParserRuleCall_3_0_1_0; }
		
		//elements+=AllElements
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//AllElements
		public RuleCall getElementsAllElementsParserRuleCall_3_1_0() { return cElementsAllElementsParserRuleCall_3_1_0; }
		
		//(SPACE | elements+=New_Line)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_4_0() { return cSPACETerminalRuleCall_4_0; }
		
		//elements+=New_Line
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }
		
		//New_Line
		public RuleCall getElementsNew_LineParserRuleCall_4_1_0() { return cElementsNew_LineParserRuleCall_4_1_0; }
	}
	public class LineSubSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.LineSubSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//LineSubSentence hidden():
		//	{SubSentence} elements+=Elements (SPACE elements+=Elements)* SPACE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SubSentence} elements+=Elements (SPACE elements+=Elements)* SPACE?
		public Group getGroup() { return cGroup; }
		
		//{SubSentence}
		public Action getSubSentenceAction_0() { return cSubSentenceAction_0; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_1_0() { return cElementsElementsParserRuleCall_1_0; }
		
		//(SPACE elements+=Elements)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_2_0() { return cSPACETerminalRuleCall_2_0; }
		
		//elements+=Elements
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_2_1_0() { return cElementsElementsParserRuleCall_2_1_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }
	}
	public class ListPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ListPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMULTITerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListPointNumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMINUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ListPoint:
		//	MULTI | DASH | ListPointNum | MINUS;
		@Override public ParserRule getRule() { return rule; }
		
		//MULTI | DASH | ListPointNum | MINUS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTI
		public RuleCall getMULTITerminalRuleCall_0() { return cMULTITerminalRuleCall_0; }
		
		//DASH
		public RuleCall getDASHTerminalRuleCall_1() { return cDASHTerminalRuleCall_1; }
		
		//ListPointNum
		public RuleCall getListPointNumParserRuleCall_2() { return cListPointNumParserRuleCall_2; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_3() { return cMINUSTerminalRuleCall_3; }
	}
	public class ListPointNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ListPointNum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_0_1_0_0 = (RuleCall)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cBR_CLTerminalRuleCall_0_1_0_1 = (RuleCall)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_0_1_0_2 = (RuleCall)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cFULL_STOP_IMTerminalRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cALPHATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cBR_CLTerminalRuleCall_1_1_0_1 = (RuleCall)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_1_0_2 = (RuleCall)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cFULL_STOP_IMTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//ListPointNum hidden():
		//	INT (DOT BR_CL SPACE | FULL_STOP_IM) | ALPHA (DOT BR_CL SPACE | FULL_STOP_IM);
		@Override public ParserRule getRule() { return rule; }
		
		//INT (DOT BR_CL SPACE | FULL_STOP_IM) | ALPHA (DOT BR_CL SPACE | FULL_STOP_IM)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT (DOT BR_CL SPACE | FULL_STOP_IM)
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//DOT BR_CL SPACE | FULL_STOP_IM
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//DOT BR_CL SPACE
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_0_1_0_0() { return cDOTTerminalRuleCall_0_1_0_0; }
		
		//BR_CL
		public RuleCall getBR_CLTerminalRuleCall_0_1_0_1() { return cBR_CLTerminalRuleCall_0_1_0_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_0_1_0_2() { return cSPACETerminalRuleCall_0_1_0_2; }
		
		//FULL_STOP_IM
		public RuleCall getFULL_STOP_IMTerminalRuleCall_0_1_1() { return cFULL_STOP_IMTerminalRuleCall_0_1_1; }
		
		//ALPHA (DOT BR_CL SPACE | FULL_STOP_IM)
		public Group getGroup_1() { return cGroup_1; }
		
		//ALPHA
		public RuleCall getALPHATerminalRuleCall_1_0() { return cALPHATerminalRuleCall_1_0; }
		
		//DOT BR_CL SPACE | FULL_STOP_IM
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//DOT BR_CL SPACE
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_1_0_0() { return cDOTTerminalRuleCall_1_1_0_0; }
		
		//BR_CL
		public RuleCall getBR_CLTerminalRuleCall_1_1_0_1() { return cBR_CLTerminalRuleCall_1_1_0_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_1_0_2() { return cSPACETerminalRuleCall_1_1_0_2; }
		
		//FULL_STOP_IM
		public RuleCall getFULL_STOP_IMTerminalRuleCall_1_1_1() { return cFULL_STOP_IMTerminalRuleCall_1_1_1; }
	}
	public class NoNElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.NoNElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuoteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBracketsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWordParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSymbolsXParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIgnoredTextParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cShortCutParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cHashNumberParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cUrlAdressParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMailAdressParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFormulaParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cArrayParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cItWordParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		////AttachableElmts:
		////	Word | SymbolsX | IgnoredText | ShortCut
		////;
		//NoNElement:
		//	Quote | Brackets | Word | SymbolsX | IgnoredText | ShortCut | HashNumber | UrlAdress | MailAdress | Formula | Array |
		//	ItWord //=>ItWord
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Quote | Brackets | Word | SymbolsX | IgnoredText | ShortCut | HashNumber | UrlAdress | MailAdress | Formula | Array |
		//ItWord
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Quote
		public RuleCall getQuoteParserRuleCall_0() { return cQuoteParserRuleCall_0; }
		
		//Brackets
		public RuleCall getBracketsParserRuleCall_1() { return cBracketsParserRuleCall_1; }
		
		//Word
		public RuleCall getWordParserRuleCall_2() { return cWordParserRuleCall_2; }
		
		//SymbolsX
		public RuleCall getSymbolsXParserRuleCall_3() { return cSymbolsXParserRuleCall_3; }
		
		//IgnoredText
		public RuleCall getIgnoredTextParserRuleCall_4() { return cIgnoredTextParserRuleCall_4; }
		
		//ShortCut
		public RuleCall getShortCutParserRuleCall_5() { return cShortCutParserRuleCall_5; }
		
		//HashNumber
		public RuleCall getHashNumberParserRuleCall_6() { return cHashNumberParserRuleCall_6; }
		
		//UrlAdress
		public RuleCall getUrlAdressParserRuleCall_7() { return cUrlAdressParserRuleCall_7; }
		
		//MailAdress
		public RuleCall getMailAdressParserRuleCall_8() { return cMailAdressParserRuleCall_8; }
		
		//Formula
		public RuleCall getFormulaParserRuleCall_9() { return cFormulaParserRuleCall_9; }
		
		//Array
		public RuleCall getArrayParserRuleCall_10() { return cArrayParserRuleCall_10; }
		
		//ItWord
		public RuleCall getItWordParserRuleCall_11() { return cItWordParserRuleCall_11; }
	}
	public class BracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Brackets");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracketSentenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtBracketSentenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtBracketSentenceCParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Brackets:
		//	BracketSentence | ExtBracketSentence | ExtBracketSentenceC;
		@Override public ParserRule getRule() { return rule; }
		
		//BracketSentence | ExtBracketSentence | ExtBracketSentenceC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BracketSentence
		public RuleCall getBracketSentenceParserRuleCall_0() { return cBracketSentenceParserRuleCall_0; }
		
		//ExtBracketSentence
		public RuleCall getExtBracketSentenceParserRuleCall_1() { return cExtBracketSentenceParserRuleCall_1; }
		
		//ExtBracketSentenceC
		public RuleCall getExtBracketSentenceCParserRuleCall_2() { return cExtBracketSentenceCParserRuleCall_2; }
	}
	public class NoNElementXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.NoNElementX");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNoNElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWordShortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NoNElementX:
		//	NoNElement | WordShort;
		@Override public ParserRule getRule() { return rule; }
		
		//NoNElement | WordShort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NoNElement
		public RuleCall getNoNElementParserRuleCall_0() { return cNoNElementParserRuleCall_0; }
		
		//WordShort
		public RuleCall getWordShortParserRuleCall_1() { return cWordShortParserRuleCall_1; }
	}
	public class NoNElementX2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.NoNElementX2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleUnitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNoNElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChapterAlphaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoNElementX2:
		//	SimpleUnit | Unit | NoNElement | ChapterAlpha //| NumericID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleUnit | Unit | NoNElement | ChapterAlpha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleUnit
		public RuleCall getSimpleUnitParserRuleCall_0() { return cSimpleUnitParserRuleCall_0; }
		
		//Unit
		public RuleCall getUnitParserRuleCall_1() { return cUnitParserRuleCall_1; }
		
		//NoNElement
		public RuleCall getNoNElementParserRuleCall_2() { return cNoNElementParserRuleCall_2; }
		
		//ChapterAlpha
		public RuleCall getChapterAlphaParserRuleCall_3() { return cChapterAlphaParserRuleCall_3; }
	}
	public class ElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Elements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNoNElementX2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWordShortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////NoNElementX3:
		////	NoNElement | ItWord //| NumericID
		////;
		//Elements:
		//	Symbols | => NoNElementX2 | WordShort //| ItWord // Chapter_Unit_HI|
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Symbols | => NoNElementX2 | WordShort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Symbols
		public RuleCall getSymbolsParserRuleCall_0() { return cSymbolsParserRuleCall_0; }
		
		//=> NoNElementX2
		public RuleCall getNoNElementX2ParserRuleCall_1() { return cNoNElementX2ParserRuleCall_1; }
		
		//WordShort
		public RuleCall getWordShortParserRuleCall_2() { return cWordShortParserRuleCall_2; }
	}
	public class AllElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.AllElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNew_LineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AllElements: // hiddenElement that groups all Elements in one Interface class
		//	=> Elements | New_Line;
		@Override public ParserRule getRule() { return rule; }
		
		//// hiddenElement that groups all Elements in one Interface class
		//=> Elements | New_Line
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// hiddenElement that groups all Elements in one Interface class
		//=> Elements
		public RuleCall getElementsParserRuleCall_0() { return cElementsParserRuleCall_0; }
		
		//New_Line
		public RuleCall getNew_LineParserRuleCall_1() { return cNew_LineParserRuleCall_1; }
	}
	public class BracketSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.BracketSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBracketSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpenBR_OTerminalRuleCall_1_0 = (RuleCall)cOpenAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBrackedSentencesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBrackedSentencesFreeSentenceParserRuleCall_2_0_0 = (RuleCall)cBrackedSentencesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cSeparatorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSeparatorFullStopParserRuleCall_2_1_0_0 = (RuleCall)cSeparatorAssignment_2_1_0.eContents().get(0);
		private final Assignment cBrackedSentencesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0 = (RuleCall)cBrackedSentencesAssignment_2_1_1.eContents().get(0);
		private final Assignment cSeparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cSeparatorAlternatives_3_0 = (Alternatives)cSeparatorAssignment_3.eContents().get(0);
		private final RuleCall cSeparatorDOTTerminalRuleCall_3_0_0 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(0);
		private final RuleCall cSeparatorFSTerminalRuleCall_3_0_1 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(1);
		private final RuleCall cSeparatorFullStopParserRuleCall_3_0_2 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(2);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cSPACETerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCloseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCloseBR_CLTerminalRuleCall_6_0 = (RuleCall)cCloseAssignment_6.eContents().get(0);
		
		//BracketSentence:
		//	{BracketSentence} open=BR_O (brackedSentences+=FreeSentence (separator+=FullStop brackedSentences+=FreeSentence)*)?
		//	separator+=(DOT | FS | FullStop)? (SPACE | NEWLINE)* SPACE? => close=BR_CL;
		@Override public ParserRule getRule() { return rule; }
		
		//{BracketSentence} open=BR_O (brackedSentences+=FreeSentence (separator+=FullStop brackedSentences+=FreeSentence)*)?
		//separator+=(DOT | FS | FullStop)? (SPACE | NEWLINE)* SPACE? => close=BR_CL
		public Group getGroup() { return cGroup; }
		
		//{BracketSentence}
		public Action getBracketSentenceAction_0() { return cBracketSentenceAction_0; }
		
		//open=BR_O
		public Assignment getOpenAssignment_1() { return cOpenAssignment_1; }
		
		//BR_O
		public RuleCall getOpenBR_OTerminalRuleCall_1_0() { return cOpenBR_OTerminalRuleCall_1_0; }
		
		//(brackedSentences+=FreeSentence (separator+=FullStop brackedSentences+=FreeSentence)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//brackedSentences+=FreeSentence
		public Assignment getBrackedSentencesAssignment_2_0() { return cBrackedSentencesAssignment_2_0; }
		
		//FreeSentence
		public RuleCall getBrackedSentencesFreeSentenceParserRuleCall_2_0_0() { return cBrackedSentencesFreeSentenceParserRuleCall_2_0_0; }
		
		//(separator+=FullStop brackedSentences+=FreeSentence)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//separator+=FullStop
		public Assignment getSeparatorAssignment_2_1_0() { return cSeparatorAssignment_2_1_0; }
		
		//FullStop
		public RuleCall getSeparatorFullStopParserRuleCall_2_1_0_0() { return cSeparatorFullStopParserRuleCall_2_1_0_0; }
		
		//brackedSentences+=FreeSentence
		public Assignment getBrackedSentencesAssignment_2_1_1() { return cBrackedSentencesAssignment_2_1_1; }
		
		//FreeSentence
		public RuleCall getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0() { return cBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0; }
		
		//separator+=(DOT | FS | FullStop)?
		public Assignment getSeparatorAssignment_3() { return cSeparatorAssignment_3; }
		
		//(DOT | FS | FullStop)
		public Alternatives getSeparatorAlternatives_3_0() { return cSeparatorAlternatives_3_0; }
		
		//DOT
		public RuleCall getSeparatorDOTTerminalRuleCall_3_0_0() { return cSeparatorDOTTerminalRuleCall_3_0_0; }
		
		//FS
		public RuleCall getSeparatorFSTerminalRuleCall_3_0_1() { return cSeparatorFSTerminalRuleCall_3_0_1; }
		
		//FullStop
		public RuleCall getSeparatorFullStopParserRuleCall_3_0_2() { return cSeparatorFullStopParserRuleCall_3_0_2; }
		
		//(SPACE | NEWLINE)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_4_0() { return cSPACETerminalRuleCall_4_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4_1() { return cNEWLINETerminalRuleCall_4_1; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_5() { return cSPACETerminalRuleCall_5; }
		
		//=> close=BR_CL
		public Assignment getCloseAssignment_6() { return cCloseAssignment_6; }
		
		//BR_CL
		public RuleCall getCloseBR_CLTerminalRuleCall_6_0() { return cCloseBR_CLTerminalRuleCall_6_0; }
	}
	public class ExtBracketSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ExtBracketSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtBracketSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpenEXBR_OTerminalRuleCall_1_0 = (RuleCall)cOpenAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBrackedSentencesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBrackedSentencesFreeSentenceParserRuleCall_2_0_0 = (RuleCall)cBrackedSentencesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cSeparatorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSeparatorFullStopParserRuleCall_2_1_0_0 = (RuleCall)cSeparatorAssignment_2_1_0.eContents().get(0);
		private final Assignment cBrackedSentencesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0 = (RuleCall)cBrackedSentencesAssignment_2_1_1.eContents().get(0);
		private final Assignment cSeparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cSeparatorAlternatives_3_0 = (Alternatives)cSeparatorAssignment_3.eContents().get(0);
		private final RuleCall cSeparatorDOTTerminalRuleCall_3_0_0 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(0);
		private final RuleCall cSeparatorFSTerminalRuleCall_3_0_1 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(1);
		private final RuleCall cSeparatorFullStopParserRuleCall_3_0_2 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cCloseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCloseEXBR_CLTerminalRuleCall_5_0 = (RuleCall)cCloseAssignment_5.eContents().get(0);
		
		////TODO: has some redundancy: consider to convert into bracket sentence... Test Nesting of BracketSentences
		//ExtBracketSentence BracketSentence:
		//	{ExtBracketSentence} open=EXBR_O (brackedSentences+=FreeSentence (separator+=FullStop
		//	brackedSentences+=FreeSentence)*)? separator+=(DOT | FS | FullStop)? SPACE? => close=EXBR_CL;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtBracketSentence} open=EXBR_O (brackedSentences+=FreeSentence (separator+=FullStop brackedSentences+=FreeSentence)*)?
		//separator+=(DOT | FS | FullStop)? SPACE? => close=EXBR_CL
		public Group getGroup() { return cGroup; }
		
		//{ExtBracketSentence}
		public Action getExtBracketSentenceAction_0() { return cExtBracketSentenceAction_0; }
		
		//open=EXBR_O
		public Assignment getOpenAssignment_1() { return cOpenAssignment_1; }
		
		//EXBR_O
		public RuleCall getOpenEXBR_OTerminalRuleCall_1_0() { return cOpenEXBR_OTerminalRuleCall_1_0; }
		
		//(brackedSentences+=FreeSentence (separator+=FullStop brackedSentences+=FreeSentence)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//brackedSentences+=FreeSentence
		public Assignment getBrackedSentencesAssignment_2_0() { return cBrackedSentencesAssignment_2_0; }
		
		//FreeSentence
		public RuleCall getBrackedSentencesFreeSentenceParserRuleCall_2_0_0() { return cBrackedSentencesFreeSentenceParserRuleCall_2_0_0; }
		
		//(separator+=FullStop brackedSentences+=FreeSentence)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//separator+=FullStop
		public Assignment getSeparatorAssignment_2_1_0() { return cSeparatorAssignment_2_1_0; }
		
		//FullStop
		public RuleCall getSeparatorFullStopParserRuleCall_2_1_0_0() { return cSeparatorFullStopParserRuleCall_2_1_0_0; }
		
		//brackedSentences+=FreeSentence
		public Assignment getBrackedSentencesAssignment_2_1_1() { return cBrackedSentencesAssignment_2_1_1; }
		
		//FreeSentence
		public RuleCall getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0() { return cBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0; }
		
		//separator+=(DOT | FS | FullStop)?
		public Assignment getSeparatorAssignment_3() { return cSeparatorAssignment_3; }
		
		//(DOT | FS | FullStop)
		public Alternatives getSeparatorAlternatives_3_0() { return cSeparatorAlternatives_3_0; }
		
		//DOT
		public RuleCall getSeparatorDOTTerminalRuleCall_3_0_0() { return cSeparatorDOTTerminalRuleCall_3_0_0; }
		
		//FS
		public RuleCall getSeparatorFSTerminalRuleCall_3_0_1() { return cSeparatorFSTerminalRuleCall_3_0_1; }
		
		//FullStop
		public RuleCall getSeparatorFullStopParserRuleCall_3_0_2() { return cSeparatorFullStopParserRuleCall_3_0_2; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//=> close=EXBR_CL
		public Assignment getCloseAssignment_5() { return cCloseAssignment_5; }
		
		//EXBR_CL
		public RuleCall getCloseEXBR_CLTerminalRuleCall_5_0() { return cCloseEXBR_CLTerminalRuleCall_5_0; }
	}
	public class ExtBracketSentenceCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ExtBracketSentenceC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtBracketSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpenEXBRC_OTerminalRuleCall_1_0 = (RuleCall)cOpenAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBrackedSentencesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBrackedSentencesFreeSentenceParserRuleCall_2_0_0 = (RuleCall)cBrackedSentencesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cSeparatorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSeparatorFullStopParserRuleCall_2_1_0_0 = (RuleCall)cSeparatorAssignment_2_1_0.eContents().get(0);
		private final Assignment cBrackedSentencesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0 = (RuleCall)cBrackedSentencesAssignment_2_1_1.eContents().get(0);
		private final Assignment cSeparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cSeparatorAlternatives_3_0 = (Alternatives)cSeparatorAssignment_3.eContents().get(0);
		private final RuleCall cSeparatorDOTTerminalRuleCall_3_0_0 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(0);
		private final RuleCall cSeparatorFSTerminalRuleCall_3_0_1 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(1);
		private final RuleCall cSeparatorFullStopParserRuleCall_3_0_2 = (RuleCall)cSeparatorAlternatives_3_0.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cCloseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCloseEXBRC_CLTerminalRuleCall_5_0 = (RuleCall)cCloseAssignment_5.eContents().get(0);
		
		//ExtBracketSentenceC BracketSentence:
		//	{ExtBracketSentence} open=EXBRC_O (brackedSentences+=FreeSentence (separator+=FullStop
		//	brackedSentences+=FreeSentence)*)? separator+=(DOT | FS | FullStop)? SPACE? => close=EXBRC_CL;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtBracketSentence} open=EXBRC_O (brackedSentences+=FreeSentence (separator+=FullStop
		//brackedSentences+=FreeSentence)*)? separator+=(DOT | FS | FullStop)? SPACE? => close=EXBRC_CL
		public Group getGroup() { return cGroup; }
		
		//{ExtBracketSentence}
		public Action getExtBracketSentenceAction_0() { return cExtBracketSentenceAction_0; }
		
		//open=EXBRC_O
		public Assignment getOpenAssignment_1() { return cOpenAssignment_1; }
		
		//EXBRC_O
		public RuleCall getOpenEXBRC_OTerminalRuleCall_1_0() { return cOpenEXBRC_OTerminalRuleCall_1_0; }
		
		//(brackedSentences+=FreeSentence (separator+=FullStop brackedSentences+=FreeSentence)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//brackedSentences+=FreeSentence
		public Assignment getBrackedSentencesAssignment_2_0() { return cBrackedSentencesAssignment_2_0; }
		
		//FreeSentence
		public RuleCall getBrackedSentencesFreeSentenceParserRuleCall_2_0_0() { return cBrackedSentencesFreeSentenceParserRuleCall_2_0_0; }
		
		//(separator+=FullStop brackedSentences+=FreeSentence)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//separator+=FullStop
		public Assignment getSeparatorAssignment_2_1_0() { return cSeparatorAssignment_2_1_0; }
		
		//FullStop
		public RuleCall getSeparatorFullStopParserRuleCall_2_1_0_0() { return cSeparatorFullStopParserRuleCall_2_1_0_0; }
		
		//brackedSentences+=FreeSentence
		public Assignment getBrackedSentencesAssignment_2_1_1() { return cBrackedSentencesAssignment_2_1_1; }
		
		//FreeSentence
		public RuleCall getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0() { return cBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0; }
		
		//separator+=(DOT | FS | FullStop)?
		public Assignment getSeparatorAssignment_3() { return cSeparatorAssignment_3; }
		
		//(DOT | FS | FullStop)
		public Alternatives getSeparatorAlternatives_3_0() { return cSeparatorAlternatives_3_0; }
		
		//DOT
		public RuleCall getSeparatorDOTTerminalRuleCall_3_0_0() { return cSeparatorDOTTerminalRuleCall_3_0_0; }
		
		//FS
		public RuleCall getSeparatorFSTerminalRuleCall_3_0_1() { return cSeparatorFSTerminalRuleCall_3_0_1; }
		
		//FullStop
		public RuleCall getSeparatorFullStopParserRuleCall_3_0_2() { return cSeparatorFullStopParserRuleCall_3_0_2; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//=> close=EXBRC_CL
		public Assignment getCloseAssignment_5() { return cCloseAssignment_5; }
		
		//EXBRC_CL
		public RuleCall getCloseEXBRC_CLTerminalRuleCall_5_0() { return cCloseEXBRC_CLTerminalRuleCall_5_0; }
	}
	public class FullStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FullStop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFULL_STOP_NLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFULL_STOP_IMTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FullStop:
		//	FULL_STOP_NL | FULL_STOP_IM;
		@Override public ParserRule getRule() { return rule; }
		
		//FULL_STOP_NL | FULL_STOP_IM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FULL_STOP_NL
		public RuleCall getFULL_STOP_NLTerminalRuleCall_0() { return cFULL_STOP_NLTerminalRuleCall_0; }
		
		//FULL_STOP_IM
		public RuleCall getFULL_STOP_IMTerminalRuleCall_1() { return cFULL_STOP_IMTerminalRuleCall_1; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Word");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cWordAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cWordFragmentXParserRuleCall_0_0_0 = (RuleCall)cWordAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Assignment cWordAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cWordFragmentParserRuleCall_0_1_0_0_0 = (RuleCall)cWordAssignment_0_1_0_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Assignment cWordAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cWordSeparatorsLParserRuleCall_0_1_1_0_0 = (RuleCall)cWordAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cWordAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cWordFragmentParserRuleCall_0_1_1_1_0 = (RuleCall)cWordAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cWordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWordSeparatorsLParserRuleCall_1_0 = (RuleCall)cWordAssignment_1.eContents().get(0);
		
		////FullS:
		////	DOT
		////;
		//Word hidden():
		//	(word+=FragmentX | => (word+=Fragment) (word+=SeparatorsL word+=Fragment)+) word+=SeparatorsL?;
		@Override public ParserRule getRule() { return rule; }
		
		//(word+=FragmentX | => (word+=Fragment) (word+=SeparatorsL word+=Fragment)+) word+=SeparatorsL?
		public Group getGroup() { return cGroup; }
		
		//word+=FragmentX | => (word+=Fragment) (word+=SeparatorsL word+=Fragment)+
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//word+=FragmentX
		public Assignment getWordAssignment_0_0() { return cWordAssignment_0_0; }
		
		//FragmentX
		public RuleCall getWordFragmentXParserRuleCall_0_0_0() { return cWordFragmentXParserRuleCall_0_0_0; }
		
		//=> (word+=Fragment) (word+=SeparatorsL word+=Fragment)+
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//=> (word+=Fragment)
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//word+=Fragment
		public Assignment getWordAssignment_0_1_0_0() { return cWordAssignment_0_1_0_0; }
		
		//Fragment
		public RuleCall getWordFragmentParserRuleCall_0_1_0_0_0() { return cWordFragmentParserRuleCall_0_1_0_0_0; }
		
		//(word+=SeparatorsL word+=Fragment)+
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//word+=SeparatorsL
		public Assignment getWordAssignment_0_1_1_0() { return cWordAssignment_0_1_1_0; }
		
		//SeparatorsL
		public RuleCall getWordSeparatorsLParserRuleCall_0_1_1_0_0() { return cWordSeparatorsLParserRuleCall_0_1_1_0_0; }
		
		//word+=Fragment
		public Assignment getWordAssignment_0_1_1_1() { return cWordAssignment_0_1_1_1; }
		
		//Fragment
		public RuleCall getWordFragmentParserRuleCall_0_1_1_1_0() { return cWordFragmentParserRuleCall_0_1_1_1_0; }
		
		//word+=SeparatorsL?
		public Assignment getWordAssignment_1() { return cWordAssignment_1; }
		
		//SeparatorsL
		public RuleCall getWordSeparatorsLParserRuleCall_1_0() { return cWordSeparatorsLParserRuleCall_1_0; }
	}
	public class WordShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.WordShort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWordAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cWordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWordALPHATerminalRuleCall_1_0 = (RuleCall)cWordAssignment_1.eContents().get(0);
		
		//WordShort:
		//	{Word} word+=ALPHA;
		@Override public ParserRule getRule() { return rule; }
		
		//{Word} word+=ALPHA
		public Group getGroup() { return cGroup; }
		
		//{Word}
		public Action getWordAction_0() { return cWordAction_0; }
		
		//word+=ALPHA
		public Assignment getWordAssignment_1() { return cWordAssignment_1; }
		
		//ALPHA
		public RuleCall getWordALPHATerminalRuleCall_1_0() { return cWordALPHATerminalRuleCall_1_0; }
	}
	public class FragmentXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FragmentX");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cID_CTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cALL_ALPHATerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FragmentX:
		//	ID | ID_C | ALL_ALPHA;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | ID_C | ALL_ALPHA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//ID_C
		public RuleCall getID_CTerminalRuleCall_1() { return cID_CTerminalRuleCall_1; }
		
		//ALL_ALPHA
		public RuleCall getALL_ALPHATerminalRuleCall_2() { return cALL_ALPHATerminalRuleCall_2; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Fragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFragmentXParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cALPHATerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Fragment:
		//	FragmentX | ALPHA;
		@Override public ParserRule getRule() { return rule; }
		
		//FragmentX | ALPHA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FragmentX
		public RuleCall getFragmentXParserRuleCall_0() { return cFragmentXParserRuleCall_0; }
		
		//ALPHA
		public RuleCall getALPHATerminalRuleCall_1() { return cALPHATerminalRuleCall_1; }
	}
	public class AsteriskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Asterisk");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMULTITerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cMULTITerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFragmentParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cMULTITerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cItWordElParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cMULTITerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Asterisk:
		//	MULTI MULTI? | Fragment MULTI | ItWordEl MULTI;
		@Override public ParserRule getRule() { return rule; }
		
		//MULTI MULTI? | Fragment MULTI | ItWordEl MULTI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTI MULTI?
		public Group getGroup_0() { return cGroup_0; }
		
		//MULTI
		public RuleCall getMULTITerminalRuleCall_0_0() { return cMULTITerminalRuleCall_0_0; }
		
		//MULTI?
		public RuleCall getMULTITerminalRuleCall_0_1() { return cMULTITerminalRuleCall_0_1; }
		
		//Fragment MULTI
		public Group getGroup_1() { return cGroup_1; }
		
		//Fragment
		public RuleCall getFragmentParserRuleCall_1_0() { return cFragmentParserRuleCall_1_0; }
		
		//MULTI
		public RuleCall getMULTITerminalRuleCall_1_1() { return cMULTITerminalRuleCall_1_1; }
		
		//ItWordEl MULTI
		public Group getGroup_2() { return cGroup_2; }
		
		//ItWordEl
		public RuleCall getItWordElParserRuleCall_2_0() { return cItWordElParserRuleCall_2_0; }
		
		//MULTI
		public RuleCall getMULTITerminalRuleCall_2_1() { return cMULTITerminalRuleCall_2_1; }
	}
	public class HashPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.HashP");
		private final RuleCall cHASHTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HashP:
		//	HASH;
		@Override public ParserRule getRule() { return rule; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall() { return cHASHTerminalRuleCall; }
	}
	public class ItWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ItWord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0 = (Alternatives)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_0_0 = (Group)cAlternatives_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0_0_0 = (Alternatives)cGroup_0_0_0_0.eContents().get(0);
		private final Assignment cWordAssignment_0_0_0_0_0_0 = (Assignment)cAlternatives_0_0_0_0_0.eContents().get(0);
		private final RuleCall cWordSeparatorsItParserRuleCall_0_0_0_0_0_0_0 = (RuleCall)cWordAssignment_0_0_0_0_0_0.eContents().get(0);
		private final Assignment cWordAssignment_0_0_0_0_0_1 = (Assignment)cAlternatives_0_0_0_0_0.eContents().get(1);
		private final RuleCall cWordHashPParserRuleCall_0_0_0_0_0_1_0 = (RuleCall)cWordAssignment_0_0_0_0_0_1.eContents().get(0);
		private final Assignment cWordAssignment_0_0_0_0_0_2 = (Assignment)cAlternatives_0_0_0_0_0.eContents().get(2);
		private final RuleCall cWordMULTITerminalRuleCall_0_0_0_0_0_2_0 = (RuleCall)cWordAssignment_0_0_0_0_0_2.eContents().get(0);
		private final Assignment cWordAssignment_0_0_0_0_0_3 = (Assignment)cAlternatives_0_0_0_0_0.eContents().get(3);
		private final RuleCall cWordCURRENCYTerminalRuleCall_0_0_0_0_0_3_0 = (RuleCall)cWordAssignment_0_0_0_0_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0_0_1 = (Alternatives)cGroup_0_0_0_0.eContents().get(1);
		private final Assignment cWordAssignment_0_0_0_0_1_0 = (Assignment)cAlternatives_0_0_0_0_1.eContents().get(0);
		private final RuleCall cWordItWordElXxParserRuleCall_0_0_0_0_1_0_0 = (RuleCall)cWordAssignment_0_0_0_0_1_0.eContents().get(0);
		private final Assignment cWordAssignment_0_0_0_0_1_1 = (Assignment)cAlternatives_0_0_0_0_1.eContents().get(1);
		private final RuleCall cWordFragmentParserRuleCall_0_0_0_0_1_1_0 = (RuleCall)cWordAssignment_0_0_0_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0_1 = (Alternatives)cAlternatives_0_0_0.eContents().get(1);
		private final Assignment cWordAssignment_0_0_0_1_0 = (Assignment)cAlternatives_0_0_0_1.eContents().get(0);
		private final RuleCall cWordItWordElParserRuleCall_0_0_0_1_0_0 = (RuleCall)cWordAssignment_0_0_0_1_0.eContents().get(0);
		private final Assignment cWordAssignment_0_0_0_1_1 = (Assignment)cAlternatives_0_0_0_1.eContents().get(1);
		private final RuleCall cWordCURLTerminalRuleCall_0_0_0_1_1_0 = (RuleCall)cWordAssignment_0_0_0_1_1.eContents().get(0);
		private final Group cGroup_0_0_0_1_2 = (Group)cAlternatives_0_0_0_1.eContents().get(2);
		private final Assignment cWordAssignment_0_0_0_1_2_0 = (Assignment)cGroup_0_0_0_1_2.eContents().get(0);
		private final RuleCall cWordALL_ALPHATerminalRuleCall_0_0_0_1_2_0_0 = (RuleCall)cWordAssignment_0_0_0_1_2_0.eContents().get(0);
		private final Assignment cWordAssignment_0_0_0_1_2_1 = (Assignment)cGroup_0_0_0_1_2.eContents().get(1);
		private final RuleCall cWordCOLONTerminalRuleCall_0_0_0_1_2_1_0 = (RuleCall)cWordAssignment_0_0_0_1_2_1.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cWordAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cWordAllSepParserRuleCall_0_0_1_0_0 = (RuleCall)cWordAssignment_0_0_1_0.eContents().get(0);
		private final Assignment cWordAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cWordItWordElXxParserRuleCall_0_0_1_1_0 = (RuleCall)cWordAssignment_0_0_1_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Assignment cWordAssignment_0_1_0_0 = (Assignment)cAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cWordFragmentParserRuleCall_0_1_0_0_0 = (RuleCall)cWordAssignment_0_1_0_0.eContents().get(0);
		private final Assignment cWordAssignment_0_1_0_1 = (Assignment)cAlternatives_0_1_0.eContents().get(1);
		private final RuleCall cWordAsteriskParserRuleCall_0_1_0_1_0 = (RuleCall)cWordAssignment_0_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_1_0 = (Group)cAlternatives_0_1_1.eContents().get(0);
		private final Assignment cWordAssignment_0_1_1_0_0 = (Assignment)cGroup_0_1_1_0.eContents().get(0);
		private final RuleCall cWordSeparatorsItParserRuleCall_0_1_1_0_0_0 = (RuleCall)cWordAssignment_0_1_1_0_0.eContents().get(0);
		private final Assignment cWordAssignment_0_1_1_0_1 = (Assignment)cGroup_0_1_1_0.eContents().get(1);
		private final RuleCall cWordItWordElXxParserRuleCall_0_1_1_0_1_0 = (RuleCall)cWordAssignment_0_1_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cAlternatives_0_1_1.eContents().get(1);
		private final Assignment cWordAssignment_0_1_1_1_0 = (Assignment)cGroup_0_1_1_1.eContents().get(0);
		private final RuleCall cWordAllSepParserRuleCall_0_1_1_1_0_0 = (RuleCall)cWordAssignment_0_1_1_1_0.eContents().get(0);
		private final Assignment cWordAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cWordItWordElXParserRuleCall_0_1_1_1_1_0 = (RuleCall)cWordAssignment_0_1_1_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Assignment cWordAssignment_0_1_2_0 = (Assignment)cGroup_0_1_2.eContents().get(0);
		private final RuleCall cWordAllSepParserRuleCall_0_1_2_0_0 = (RuleCall)cWordAssignment_0_1_2_0.eContents().get(0);
		private final Assignment cWordAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cWordItWordElXxParserRuleCall_0_1_2_1_0 = (RuleCall)cWordAssignment_0_1_2_1.eContents().get(0);
		private final Assignment cWordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWordAllSepParserRuleCall_1_0 = (RuleCall)cWordAssignment_1.eContents().get(0);
		
		//ItWord hidden():
		//	(((word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY) (word+=ItWordElXx | word+=Fragment) |
		//	(word+=ItWordEl | word+=CURL | word+=ALL_ALPHA word+=COLON)) (word+=AllSep+ word+=ItWordElXx)* | (=> word+=Fragment |
		//	word+=Asterisk) (word+=SeparatorsIt+ word+=ItWordElXx | word+=AllSep+ word+=ItWordElX) (word+=AllSep+
		//	word+=ItWordElXx)*) word+=AllSep*;
		@Override public ParserRule getRule() { return rule; }
		
		//(((word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY) (word+=ItWordElXx | word+=Fragment) |
		//(word+=ItWordEl | word+=CURL | word+=ALL_ALPHA word+=COLON)) (word+=AllSep+ word+=ItWordElXx)* | (=> word+=Fragment |
		//word+=Asterisk) (word+=SeparatorsIt+ word+=ItWordElXx | word+=AllSep+ word+=ItWordElX) (word+=AllSep+
		//word+=ItWordElXx)*) word+=AllSep*
		public Group getGroup() { return cGroup; }
		
		//((word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY) (word+=ItWordElXx | word+=Fragment) |
		//(word+=ItWordEl | word+=CURL | word+=ALL_ALPHA word+=COLON)) (word+=AllSep+ word+=ItWordElXx)* | (=> word+=Fragment |
		//word+=Asterisk) (word+=SeparatorsIt+ word+=ItWordElXx | word+=AllSep+ word+=ItWordElX) (word+=AllSep+
		//word+=ItWordElXx)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//((word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY) (word+=ItWordElXx | word+=Fragment) |
		//(word+=ItWordEl | word+=CURL | word+=ALL_ALPHA word+=COLON)) (word+=AllSep+ word+=ItWordElXx)*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//(word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY) (word+=ItWordElXx | word+=Fragment) | (word+=ItWordEl
		//| word+=CURL | word+=ALL_ALPHA word+=COLON)
		public Alternatives getAlternatives_0_0_0() { return cAlternatives_0_0_0; }
		
		//(word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY) (word+=ItWordElXx | word+=Fragment)
		public Group getGroup_0_0_0_0() { return cGroup_0_0_0_0; }
		
		//word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY
		public Alternatives getAlternatives_0_0_0_0_0() { return cAlternatives_0_0_0_0_0; }
		
		//word+=SeparatorsIt+
		public Assignment getWordAssignment_0_0_0_0_0_0() { return cWordAssignment_0_0_0_0_0_0; }
		
		//SeparatorsIt
		public RuleCall getWordSeparatorsItParserRuleCall_0_0_0_0_0_0_0() { return cWordSeparatorsItParserRuleCall_0_0_0_0_0_0_0; }
		
		//word+=HashP
		public Assignment getWordAssignment_0_0_0_0_0_1() { return cWordAssignment_0_0_0_0_0_1; }
		
		//HashP
		public RuleCall getWordHashPParserRuleCall_0_0_0_0_0_1_0() { return cWordHashPParserRuleCall_0_0_0_0_0_1_0; }
		
		//word+=MULTI
		public Assignment getWordAssignment_0_0_0_0_0_2() { return cWordAssignment_0_0_0_0_0_2; }
		
		//MULTI
		public RuleCall getWordMULTITerminalRuleCall_0_0_0_0_0_2_0() { return cWordMULTITerminalRuleCall_0_0_0_0_0_2_0; }
		
		//word+=CURRENCY
		public Assignment getWordAssignment_0_0_0_0_0_3() { return cWordAssignment_0_0_0_0_0_3; }
		
		//CURRENCY
		public RuleCall getWordCURRENCYTerminalRuleCall_0_0_0_0_0_3_0() { return cWordCURRENCYTerminalRuleCall_0_0_0_0_0_3_0; }
		
		//word+=ItWordElXx | word+=Fragment
		public Alternatives getAlternatives_0_0_0_0_1() { return cAlternatives_0_0_0_0_1; }
		
		//word+=ItWordElXx
		public Assignment getWordAssignment_0_0_0_0_1_0() { return cWordAssignment_0_0_0_0_1_0; }
		
		//ItWordElXx
		public RuleCall getWordItWordElXxParserRuleCall_0_0_0_0_1_0_0() { return cWordItWordElXxParserRuleCall_0_0_0_0_1_0_0; }
		
		//word+=Fragment
		public Assignment getWordAssignment_0_0_0_0_1_1() { return cWordAssignment_0_0_0_0_1_1; }
		
		//Fragment
		public RuleCall getWordFragmentParserRuleCall_0_0_0_0_1_1_0() { return cWordFragmentParserRuleCall_0_0_0_0_1_1_0; }
		
		//(word+=ItWordEl | word+=CURL | word+=ALL_ALPHA word+=COLON)
		public Alternatives getAlternatives_0_0_0_1() { return cAlternatives_0_0_0_1; }
		
		//word+=ItWordEl
		public Assignment getWordAssignment_0_0_0_1_0() { return cWordAssignment_0_0_0_1_0; }
		
		//ItWordEl
		public RuleCall getWordItWordElParserRuleCall_0_0_0_1_0_0() { return cWordItWordElParserRuleCall_0_0_0_1_0_0; }
		
		//word+=CURL
		public Assignment getWordAssignment_0_0_0_1_1() { return cWordAssignment_0_0_0_1_1; }
		
		//CURL
		public RuleCall getWordCURLTerminalRuleCall_0_0_0_1_1_0() { return cWordCURLTerminalRuleCall_0_0_0_1_1_0; }
		
		//word+=ALL_ALPHA word+=COLON
		public Group getGroup_0_0_0_1_2() { return cGroup_0_0_0_1_2; }
		
		//word+=ALL_ALPHA
		public Assignment getWordAssignment_0_0_0_1_2_0() { return cWordAssignment_0_0_0_1_2_0; }
		
		//ALL_ALPHA
		public RuleCall getWordALL_ALPHATerminalRuleCall_0_0_0_1_2_0_0() { return cWordALL_ALPHATerminalRuleCall_0_0_0_1_2_0_0; }
		
		//word+=COLON
		public Assignment getWordAssignment_0_0_0_1_2_1() { return cWordAssignment_0_0_0_1_2_1; }
		
		//COLON
		public RuleCall getWordCOLONTerminalRuleCall_0_0_0_1_2_1_0() { return cWordCOLONTerminalRuleCall_0_0_0_1_2_1_0; }
		
		//(word+=AllSep+ word+=ItWordElXx)*
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//word+=AllSep+
		public Assignment getWordAssignment_0_0_1_0() { return cWordAssignment_0_0_1_0; }
		
		//AllSep
		public RuleCall getWordAllSepParserRuleCall_0_0_1_0_0() { return cWordAllSepParserRuleCall_0_0_1_0_0; }
		
		//word+=ItWordElXx
		public Assignment getWordAssignment_0_0_1_1() { return cWordAssignment_0_0_1_1; }
		
		//ItWordElXx
		public RuleCall getWordItWordElXxParserRuleCall_0_0_1_1_0() { return cWordItWordElXxParserRuleCall_0_0_1_1_0; }
		
		//(=> word+=Fragment | word+=Asterisk) (word+=SeparatorsIt+ word+=ItWordElXx | word+=AllSep+ word+=ItWordElX)
		//(word+=AllSep+ word+=ItWordElXx)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//=> word+=Fragment | word+=Asterisk
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }
		
		//=> word+=Fragment
		public Assignment getWordAssignment_0_1_0_0() { return cWordAssignment_0_1_0_0; }
		
		//Fragment
		public RuleCall getWordFragmentParserRuleCall_0_1_0_0_0() { return cWordFragmentParserRuleCall_0_1_0_0_0; }
		
		//word+=Asterisk
		public Assignment getWordAssignment_0_1_0_1() { return cWordAssignment_0_1_0_1; }
		
		//Asterisk
		public RuleCall getWordAsteriskParserRuleCall_0_1_0_1_0() { return cWordAsteriskParserRuleCall_0_1_0_1_0; }
		
		//word+=SeparatorsIt+ word+=ItWordElXx | word+=AllSep+ word+=ItWordElX
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//word+=SeparatorsIt+ word+=ItWordElXx
		public Group getGroup_0_1_1_0() { return cGroup_0_1_1_0; }
		
		//word+=SeparatorsIt+
		public Assignment getWordAssignment_0_1_1_0_0() { return cWordAssignment_0_1_1_0_0; }
		
		//SeparatorsIt
		public RuleCall getWordSeparatorsItParserRuleCall_0_1_1_0_0_0() { return cWordSeparatorsItParserRuleCall_0_1_1_0_0_0; }
		
		//word+=ItWordElXx
		public Assignment getWordAssignment_0_1_1_0_1() { return cWordAssignment_0_1_1_0_1; }
		
		//ItWordElXx
		public RuleCall getWordItWordElXxParserRuleCall_0_1_1_0_1_0() { return cWordItWordElXxParserRuleCall_0_1_1_0_1_0; }
		
		//word+=AllSep+ word+=ItWordElX
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }
		
		//word+=AllSep+
		public Assignment getWordAssignment_0_1_1_1_0() { return cWordAssignment_0_1_1_1_0; }
		
		//AllSep
		public RuleCall getWordAllSepParserRuleCall_0_1_1_1_0_0() { return cWordAllSepParserRuleCall_0_1_1_1_0_0; }
		
		//word+=ItWordElX
		public Assignment getWordAssignment_0_1_1_1_1() { return cWordAssignment_0_1_1_1_1; }
		
		//ItWordElX
		public RuleCall getWordItWordElXParserRuleCall_0_1_1_1_1_0() { return cWordItWordElXParserRuleCall_0_1_1_1_1_0; }
		
		//(word+=AllSep+ word+=ItWordElXx)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//word+=AllSep+
		public Assignment getWordAssignment_0_1_2_0() { return cWordAssignment_0_1_2_0; }
		
		//AllSep
		public RuleCall getWordAllSepParserRuleCall_0_1_2_0_0() { return cWordAllSepParserRuleCall_0_1_2_0_0; }
		
		//word+=ItWordElXx
		public Assignment getWordAssignment_0_1_2_1() { return cWordAssignment_0_1_2_1; }
		
		//ItWordElXx
		public RuleCall getWordItWordElXxParserRuleCall_0_1_2_1_0() { return cWordItWordElXxParserRuleCall_0_1_2_1_0; }
		
		//word+=AllSep*
		public Assignment getWordAssignment_1() { return cWordAssignment_1; }
		
		//AllSep
		public RuleCall getWordAllSepParserRuleCall_1_0() { return cWordAllSepParserRuleCall_1_0; }
	}
	public class WhitespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Whitespace");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Whitespace:
		//	SPACE | SPACE? NEWLINE SPACE?;
		@Override public ParserRule getRule() { return rule; }
		
		//SPACE | SPACE? NEWLINE SPACE?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_0() { return cSPACETerminalRuleCall_0; }
		
		//SPACE? NEWLINE SPACE?
		public Group getGroup_1() { return cGroup_1; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1_0() { return cSPACETerminalRuleCall_1_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1() { return cNEWLINETerminalRuleCall_1_1; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1_2() { return cSPACETerminalRuleCall_1_2; }
	}
	public class ItWordElElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ItWordEl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIT_IDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLE_DOTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ItWordEl hidden():
		//	IT_ID | DOUBLE_DOT;
		@Override public ParserRule getRule() { return rule; }
		
		//IT_ID | DOUBLE_DOT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IT_ID
		public RuleCall getIT_IDTerminalRuleCall_0() { return cIT_IDTerminalRuleCall_0; }
		
		//DOUBLE_DOT
		public RuleCall getDOUBLE_DOTTerminalRuleCall_1() { return cDOUBLE_DOTTerminalRuleCall_1; }
	}
	public class ItWordElurlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ItWordElurl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIT_IDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cID_ALLTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ItWordElurl hidden():
		//	IT_ID | ID_ALL | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//IT_ID | ID_ALL | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IT_ID
		public RuleCall getIT_IDTerminalRuleCall_0() { return cIT_IDTerminalRuleCall_0; }
		
		//ID_ALL
		public RuleCall getID_ALLTerminalRuleCall_1() { return cID_ALLTerminalRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class ItWordElXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ItWordElX");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cItWordElParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEX_NUMBERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cID_ALLTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ItWordElX hidden():
		//	ItWordEl | INT | HEX_NUMBER | ID_ALL;
		@Override public ParserRule getRule() { return rule; }
		
		//ItWordEl | INT | HEX_NUMBER | ID_ALL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ItWordEl
		public RuleCall getItWordElParserRuleCall_0() { return cItWordElParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//HEX_NUMBER
		public RuleCall getHEX_NUMBERTerminalRuleCall_2() { return cHEX_NUMBERTerminalRuleCall_2; }
		
		//ID_ALL
		public RuleCall getID_ALLTerminalRuleCall_3() { return cID_ALLTerminalRuleCall_3; }
	}
	public class ItWordElXxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ItWordElXx");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALL_ALPHATerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cALPHATerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItWordElXParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFragmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAsteriskParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cID_CTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCURLTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ItWordElXx hidden():
		//	(ALL_ALPHA | ALPHA | => ItWordElX | Fragment | Asterisk | ID_C | CURL)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ALL_ALPHA | ALPHA | => ItWordElX | Fragment | Asterisk | ID_C | CURL)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALL_ALPHA
		public RuleCall getALL_ALPHATerminalRuleCall_0() { return cALL_ALPHATerminalRuleCall_0; }
		
		//ALPHA
		public RuleCall getALPHATerminalRuleCall_1() { return cALPHATerminalRuleCall_1; }
		
		//=> ItWordElX
		public RuleCall getItWordElXParserRuleCall_2() { return cItWordElXParserRuleCall_2; }
		
		//Fragment
		public RuleCall getFragmentParserRuleCall_3() { return cFragmentParserRuleCall_3; }
		
		//Asterisk
		public RuleCall getAsteriskParserRuleCall_4() { return cAsteriskParserRuleCall_4; }
		
		//ID_C
		public RuleCall getID_CTerminalRuleCall_5() { return cID_CTerminalRuleCall_5; }
		
		//CURL
		public RuleCall getCURLTerminalRuleCall_6() { return cCURLTerminalRuleCall_6; }
	}
	public class SeparatorsLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SeparatorsL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSLASHTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSEPARATORSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDASHTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMINUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SeparatorsL hidden():
		//	SLASH | SEPARATORS | DASH | MINUS;
		@Override public ParserRule getRule() { return rule; }
		
		//SLASH | SEPARATORS | DASH | MINUS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SLASH
		public RuleCall getSLASHTerminalRuleCall_0() { return cSLASHTerminalRuleCall_0; }
		
		//SEPARATORS
		public RuleCall getSEPARATORSTerminalRuleCall_1() { return cSEPARATORSTerminalRuleCall_1; }
		
		//DASH
		public RuleCall getDASHTerminalRuleCall_2() { return cDASHTerminalRuleCall_2; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_3() { return cMINUSTerminalRuleCall_3; }
	}
	public class SeparatorsItElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SeparatorsIt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSEPARATORS_ITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SeparatorsIt hidden():
		//	DOT | SEPARATORS_IT | COLON;
		@Override public ParserRule getRule() { return rule; }
		
		//DOT | SEPARATORS_IT | COLON
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_0() { return cDOTTerminalRuleCall_0; }
		
		//SEPARATORS_IT
		public RuleCall getSEPARATORS_ITTerminalRuleCall_1() { return cSEPARATORS_ITTerminalRuleCall_1; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_2() { return cCOLONTerminalRuleCall_2; }
	}
	public class AllSepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.AllSep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSeparatorsItParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSeparatorsLParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AllSep hidden():
		//	SeparatorsIt | SeparatorsL;
		@Override public ParserRule getRule() { return rule; }
		
		//SeparatorsIt | SeparatorsL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SeparatorsIt
		public RuleCall getSeparatorsItParserRuleCall_0() { return cSeparatorsItParserRuleCall_0; }
		
		//SeparatorsL
		public RuleCall getSeparatorsLParserRuleCall_1() { return cSeparatorsLParserRuleCall_1; }
	}
	public class QuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Quote");
		private final Assignment cQuoteAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuoteSTRINGTerminalRuleCall_0 = (RuleCall)cQuoteAssignment.eContents().get(0);
		
		//Quote:
		//	quote=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//quote=STRING
		public Assignment getQuoteAssignment() { return cQuoteAssignment; }
		
		//STRING
		public RuleCall getQuoteSTRINGTerminalRuleCall_0() { return cQuoteSTRINGTerminalRuleCall_0; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureMINUSTerminalRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cUnitCURRENCYTerminalRuleCall_2_0_0 = (RuleCall)cUnitAssignment_2_0.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cUnitIDTerminalRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Assignment cUnitAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cUnitPERCENTTerminalRuleCall_2_2_0 = (RuleCall)cUnitAssignment_2_2.eContents().get(0);
		
		//Unit hidden():
		//	signature=MINUS? => value+=Number (unit=CURRENCY | unit=ID | unit=PERCENT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//signature=MINUS? => value+=Number (unit=CURRENCY | unit=ID | unit=PERCENT)?
		public Group getGroup() { return cGroup; }
		
		//signature=MINUS?
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }
		
		//MINUS
		public RuleCall getSignatureMINUSTerminalRuleCall_0_0() { return cSignatureMINUSTerminalRuleCall_0_0; }
		
		//=> value+=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
		
		//(unit=CURRENCY | unit=ID | unit=PERCENT)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//unit=CURRENCY
		public Assignment getUnitAssignment_2_0() { return cUnitAssignment_2_0; }
		
		//CURRENCY
		public RuleCall getUnitCURRENCYTerminalRuleCall_2_0_0() { return cUnitCURRENCYTerminalRuleCall_2_0_0; }
		
		//unit=ID
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//ID
		public RuleCall getUnitIDTerminalRuleCall_2_1_0() { return cUnitIDTerminalRuleCall_2_1_0; }
		
		//unit=PERCENT
		public Assignment getUnitAssignment_2_2() { return cUnitAssignment_2_2; }
		
		//PERCENT
		public RuleCall getUnitPERCENTTerminalRuleCall_2_2_0() { return cUnitPERCENTTerminalRuleCall_2_2_0; }
	}
	public class SimpleUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SimpleUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnitAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueChapterNumParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueItNumParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueHEX_NUMBERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SimpleUnit:
		//	{Unit} value+=chapterNum | value+=ItNum | value+=HEX_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} value+=chapterNum | value+=ItNum | value+=HEX_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Unit} value+=chapterNum
		public Group getGroup_0() { return cGroup_0; }
		
		//{Unit}
		public Action getUnitAction_0_0() { return cUnitAction_0_0; }
		
		//value+=chapterNum
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//chapterNum
		public RuleCall getValueChapterNumParserRuleCall_0_1_0() { return cValueChapterNumParserRuleCall_0_1_0; }
		
		//value+=ItNum
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ItNum
		public RuleCall getValueItNumParserRuleCall_1_0() { return cValueItNumParserRuleCall_1_0; }
		
		//value+=HEX_NUMBER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//HEX_NUMBER
		public RuleCall getValueHEX_NUMBERTerminalRuleCall_2_0() { return cValueHEX_NUMBERTerminalRuleCall_2_0; }
	}
	public class Chapter_Unit_HIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Chapter_Unit_HI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueChapterNumParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Chapter_Unit_HI hidden():
		//	{Unit} value+=chapterNum SPACE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} value+=chapterNum SPACE?
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//value+=chapterNum
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//chapterNum
		public RuleCall getValueChapterNumParserRuleCall_1_0() { return cValueChapterNumParserRuleCall_1_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
	}
	public class Chapter_Unit_LowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Chapter_Unit_Low");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDecimalNumENParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Chapter_Unit_Low hidden():
		//	{Unit} value+=decimalNumEN SPACE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} value+=decimalNumEN SPACE?
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//value+=decimalNumEN
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//decimalNumEN
		public RuleCall getValueDecimalNumENParserRuleCall_1_0() { return cValueDecimalNumENParserRuleCall_1_0; }
		
		//SPACE?
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
	}
	public class HashNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.HashNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSignAlternatives_1_0 = (Alternatives)cSignAssignment_1.eContents().get(0);
		private final RuleCall cSignHASHTerminalRuleCall_1_0_0 = (RuleCall)cSignAlternatives_1_0.eContents().get(0);
		private final RuleCall cSignPARAGRTerminalRuleCall_1_0_1 = (RuleCall)cSignAlternatives_1_0.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNumberParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// odd but it works. this rule does not need a space at the end.
		//HashNumber hidden():
		//	{Unit} sign=(HASH | PARAGR) value+=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} sign=(HASH | PARAGR) value+=Number
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//sign=(HASH | PARAGR)
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }
		
		//(HASH | PARAGR)
		public Alternatives getSignAlternatives_1_0() { return cSignAlternatives_1_0; }
		
		//HASH
		public RuleCall getSignHASHTerminalRuleCall_1_0_0() { return cSignHASHTerminalRuleCall_1_0_0; }
		
		//PARAGR
		public RuleCall getSignPARAGRTerminalRuleCall_1_0_1() { return cSignPARAGRTerminalRuleCall_1_0_1; }
		
		//value+=Number
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_2_0() { return cValueNumberParserRuleCall_2_0; }
	}
	public class ChapterAlphaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ChapterAlpha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueID_CTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueALL_ALPHATerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDOTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueChapterIntermediateParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cValueDOTTerminalRuleCall_4_0_0_0 = (RuleCall)cValueAssignment_4_0_0.eContents().get(0);
		private final Assignment cValueAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cValueMINUSTerminalRuleCall_4_0_1_0 = (RuleCall)cValueAssignment_4_0_1.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueChapterIntermediateParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ChapterAlpha hidden():
		//	{Unit} (value+=ID_C | value+=ALL_ALPHA) value+=DOT value+=ChapterIntermediate ((value+=DOT | value+=MINUS)
		//	value+=ChapterIntermediate)* SPACE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} (value+=ID_C | value+=ALL_ALPHA) value+=DOT value+=ChapterIntermediate ((value+=DOT | value+=MINUS)
		//value+=ChapterIntermediate)* SPACE
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//value+=ID_C | value+=ALL_ALPHA
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value+=ID_C
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//ID_C
		public RuleCall getValueID_CTerminalRuleCall_1_0_0() { return cValueID_CTerminalRuleCall_1_0_0; }
		
		//value+=ALL_ALPHA
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//ALL_ALPHA
		public RuleCall getValueALL_ALPHATerminalRuleCall_1_1_0() { return cValueALL_ALPHATerminalRuleCall_1_1_0; }
		
		//value+=DOT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DOT
		public RuleCall getValueDOTTerminalRuleCall_2_0() { return cValueDOTTerminalRuleCall_2_0; }
		
		//value+=ChapterIntermediate
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ChapterIntermediate
		public RuleCall getValueChapterIntermediateParserRuleCall_3_0() { return cValueChapterIntermediateParserRuleCall_3_0; }
		
		//((value+=DOT | value+=MINUS) value+=ChapterIntermediate)*
		public Group getGroup_4() { return cGroup_4; }
		
		//value+=DOT | value+=MINUS
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//value+=DOT
		public Assignment getValueAssignment_4_0_0() { return cValueAssignment_4_0_0; }
		
		//DOT
		public RuleCall getValueDOTTerminalRuleCall_4_0_0_0() { return cValueDOTTerminalRuleCall_4_0_0_0; }
		
		//value+=MINUS
		public Assignment getValueAssignment_4_0_1() { return cValueAssignment_4_0_1; }
		
		//MINUS
		public RuleCall getValueMINUSTerminalRuleCall_4_0_1_0() { return cValueMINUSTerminalRuleCall_4_0_1_0; }
		
		//value+=ChapterIntermediate
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//ChapterIntermediate
		public RuleCall getValueChapterIntermediateParserRuleCall_4_1_0() { return cValueChapterIntermediateParserRuleCall_4_1_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_5() { return cSPACETerminalRuleCall_5; }
	}
	public class ChapterIntermediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ChapterIntermediate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cID_CTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cID_ALLTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIT_IDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cALL_ALPHATerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cALPHATerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////TODO: simplify when Numbers are converted
		//ChapterIntermediate hidden():
		//	ID_C | ID_ALL | => INT | IT_ID | ALL_ALPHA | ALPHA;
		@Override public ParserRule getRule() { return rule; }
		
		//ID_C | ID_ALL | => INT | IT_ID | ALL_ALPHA | ALPHA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID_C
		public RuleCall getID_CTerminalRuleCall_0() { return cID_CTerminalRuleCall_0; }
		
		//ID_ALL
		public RuleCall getID_ALLTerminalRuleCall_1() { return cID_ALLTerminalRuleCall_1; }
		
		//=> INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//IT_ID
		public RuleCall getIT_IDTerminalRuleCall_3() { return cIT_IDTerminalRuleCall_3; }
		
		//ALL_ALPHA
		public RuleCall getALL_ALPHATerminalRuleCall_4() { return cALL_ALPHATerminalRuleCall_4; }
		
		//ALPHA
		public RuleCall getALPHATerminalRuleCall_5() { return cALPHATerminalRuleCall_5; }
	}
	public class SymbolsXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SymbolsX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSymbolsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSymbolSpecialSymbolsParserRuleCall_1_0 = (RuleCall)cSymbolAssignment_1.eContents().get(0);
		
		//SymbolsX:
		//	{Symbols} symbol=SpecialSymbols;
		@Override public ParserRule getRule() { return rule; }
		
		//{Symbols} symbol=SpecialSymbols
		public Group getGroup() { return cGroup; }
		
		//{Symbols}
		public Action getSymbolsAction_0() { return cSymbolsAction_0; }
		
		//symbol=SpecialSymbols
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//SpecialSymbols
		public RuleCall getSymbolSpecialSymbolsParserRuleCall_1_0() { return cSymbolSpecialSymbolsParserRuleCall_1_0; }
	}
	public class SpecialChElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SpecialCh");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPERCENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMINUSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSEPARATORSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMULTITerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SpecialCh:
		//	PERCENT | DASH | MINUS | SEPARATORS | MULTI;
		@Override public ParserRule getRule() { return rule; }
		
		//PERCENT | DASH | MINUS | SEPARATORS | MULTI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_0() { return cPERCENTTerminalRuleCall_0; }
		
		//DASH
		public RuleCall getDASHTerminalRuleCall_1() { return cDASHTerminalRuleCall_1; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_2() { return cMINUSTerminalRuleCall_2; }
		
		//SEPARATORS
		public RuleCall getSEPARATORSTerminalRuleCall_3() { return cSEPARATORSTerminalRuleCall_3; }
		
		//MULTI
		public RuleCall getMULTITerminalRuleCall_4() { return cMULTITerminalRuleCall_4; }
	}
	public class SymbolsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Symbols");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSymbolsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSymbolSpecialChParserRuleCall_1_0 = (RuleCall)cSymbolAssignment_1.eContents().get(0);
		
		//Symbols:
		//	{Symbols} symbol=SpecialCh;
		@Override public ParserRule getRule() { return rule; }
		
		//{Symbols} symbol=SpecialCh
		public Group getGroup() { return cGroup; }
		
		//{Symbols}
		public Action getSymbolsAction_0() { return cSymbolsAction_0; }
		
		//symbol=SpecialCh
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//SpecialCh
		public RuleCall getSymbolSpecialChParserRuleCall_1_0() { return cSymbolSpecialChParserRuleCall_1_0; }
	}
	public class ShortcutGenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ShortcutGen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWordAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cWordALL_ALPHATerminalRuleCall_1_0_0 = (RuleCall)cWordAssignment_1_0.eContents().get(0);
		private final Assignment cWordAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cWordALPHATerminalRuleCall_1_1_0 = (RuleCall)cWordAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cWordAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cWordDOTTerminalRuleCall_2_0_0 = (RuleCall)cWordAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cWordAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cWordALL_ALPHATerminalRuleCall_2_1_0_0 = (RuleCall)cWordAssignment_2_1_0.eContents().get(0);
		private final Assignment cWordAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cWordALPHATerminalRuleCall_2_1_1_0 = (RuleCall)cWordAssignment_2_1_1.eContents().get(0);
		private final Assignment cWordAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWordDOTTerminalRuleCall_3_0 = (RuleCall)cWordAssignment_3.eContents().get(0);
		
		//ShortcutGen hidden():
		//	{EString} (word+=ALL_ALPHA | word+=ALPHA) (word+=DOT (word+=ALL_ALPHA | word+=ALPHA))+ word+=DOT;
		@Override public ParserRule getRule() { return rule; }
		
		//{EString} (word+=ALL_ALPHA | word+=ALPHA) (word+=DOT (word+=ALL_ALPHA | word+=ALPHA))+ word+=DOT
		public Group getGroup() { return cGroup; }
		
		//{EString}
		public Action getEStringAction_0() { return cEStringAction_0; }
		
		//word+=ALL_ALPHA | word+=ALPHA
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//word+=ALL_ALPHA
		public Assignment getWordAssignment_1_0() { return cWordAssignment_1_0; }
		
		//ALL_ALPHA
		public RuleCall getWordALL_ALPHATerminalRuleCall_1_0_0() { return cWordALL_ALPHATerminalRuleCall_1_0_0; }
		
		//word+=ALPHA
		public Assignment getWordAssignment_1_1() { return cWordAssignment_1_1; }
		
		//ALPHA
		public RuleCall getWordALPHATerminalRuleCall_1_1_0() { return cWordALPHATerminalRuleCall_1_1_0; }
		
		//(word+=DOT (word+=ALL_ALPHA | word+=ALPHA))+
		public Group getGroup_2() { return cGroup_2; }
		
		//word+=DOT
		public Assignment getWordAssignment_2_0() { return cWordAssignment_2_0; }
		
		//DOT
		public RuleCall getWordDOTTerminalRuleCall_2_0_0() { return cWordDOTTerminalRuleCall_2_0_0; }
		
		//word+=ALL_ALPHA | word+=ALPHA
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//word+=ALL_ALPHA
		public Assignment getWordAssignment_2_1_0() { return cWordAssignment_2_1_0; }
		
		//ALL_ALPHA
		public RuleCall getWordALL_ALPHATerminalRuleCall_2_1_0_0() { return cWordALL_ALPHATerminalRuleCall_2_1_0_0; }
		
		//word+=ALPHA
		public Assignment getWordAssignment_2_1_1() { return cWordAssignment_2_1_1; }
		
		//ALPHA
		public RuleCall getWordALPHATerminalRuleCall_2_1_1_0() { return cWordALPHATerminalRuleCall_2_1_1_0; }
		
		//word+=DOT
		public Assignment getWordAssignment_3() { return cWordAssignment_3; }
		
		//DOT
		public RuleCall getWordDOTTerminalRuleCall_3_0() { return cWordDOTTerminalRuleCall_3_0; }
	}
	public class ShortcutLibElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ShortcutLib");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cShortcutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShortcutSHORTCUTSTerminalRuleCall_1_0 = (RuleCall)cShortcutAssignment_1.eContents().get(0);
		
		//ShortcutLib:
		//	{EString} shortcut=SHORTCUTS;
		@Override public ParserRule getRule() { return rule; }
		
		//{EString} shortcut=SHORTCUTS
		public Group getGroup() { return cGroup; }
		
		//{EString}
		public Action getEStringAction_0() { return cEStringAction_0; }
		
		//shortcut=SHORTCUTS
		public Assignment getShortcutAssignment_1() { return cShortcutAssignment_1; }
		
		//SHORTCUTS
		public RuleCall getShortcutSHORTCUTSTerminalRuleCall_1_0() { return cShortcutSHORTCUTSTerminalRuleCall_1_0; }
	}
	public class ShortCutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ShortCut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cShortcutAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cShortcutShortcutLibParserRuleCall_0_0 = (RuleCall)cShortcutAssignment_0.eContents().get(0);
		private final Assignment cShortcutAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cShortcutShortcutGenParserRuleCall_1_0 = (RuleCall)cShortcutAssignment_1.eContents().get(0);
		
		//ShortCut:
		//	shortcut=ShortcutLib | shortcut=ShortcutGen;
		@Override public ParserRule getRule() { return rule; }
		
		//shortcut=ShortcutLib | shortcut=ShortcutGen
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//shortcut=ShortcutLib
		public Assignment getShortcutAssignment_0() { return cShortcutAssignment_0; }
		
		//ShortcutLib
		public RuleCall getShortcutShortcutLibParserRuleCall_0_0() { return cShortcutShortcutLibParserRuleCall_0_0; }
		
		//shortcut=ShortcutGen
		public Assignment getShortcutAssignment_1() { return cShortcutAssignment_1; }
		
		//ShortcutGen
		public RuleCall getShortcutShortcutGenParserRuleCall_1_0() { return cShortcutShortcutGenParserRuleCall_1_0; }
	}
	public class IgnoredTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.IgnoredText");
		private final Assignment cIgnoredAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIgnoredIGNOREDTerminalRuleCall_0 = (RuleCall)cIgnoredAssignment.eContents().get(0);
		
		//IgnoredText:
		//	ignored=IGNORED;
		@Override public ParserRule getRule() { return rule; }
		
		//ignored=IGNORED
		public Assignment getIgnoredAssignment() { return cIgnoredAssignment; }
		
		//IGNORED
		public RuleCall getIgnoredIGNOREDTerminalRuleCall_0() { return cIgnoredIGNOREDTerminalRuleCall_0; }
	}
	public class SimpleNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.simpleNum");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//simpleNum hidden():
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class ItNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ItNum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cSEPARATORS_ITTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cDASHTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cMINUSTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cSLASHTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cKMTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//ItNum hidden():
		//	INT ((SEPARATORS_IT | COLON | DASH | MINUS | SLASH) INT)+ (KM INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ((SEPARATORS_IT | COLON | DASH | MINUS | SLASH) INT)+ (KM INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//((SEPARATORS_IT | COLON | DASH | MINUS | SLASH) INT)+
		public Group getGroup_1() { return cGroup_1; }
		
		//SEPARATORS_IT | COLON | DASH | MINUS | SLASH
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//SEPARATORS_IT
		public RuleCall getSEPARATORS_ITTerminalRuleCall_1_0_0() { return cSEPARATORS_ITTerminalRuleCall_1_0_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_0_1() { return cCOLONTerminalRuleCall_1_0_1; }
		
		//DASH
		public RuleCall getDASHTerminalRuleCall_1_0_2() { return cDASHTerminalRuleCall_1_0_2; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_3() { return cMINUSTerminalRuleCall_1_0_3; }
		
		//SLASH
		public RuleCall getSLASHTerminalRuleCall_1_0_4() { return cSLASHTerminalRuleCall_1_0_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//(KM INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//KM
		public RuleCall getKMTerminalRuleCall_2_0() { return cKMTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class SpecialSymbolsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SpecialSymbols");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSLASHTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOPERATORSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cARROWTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSMILEYTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTRIPLE_DOTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////NumericID:
		////	{Unit} value+=simpleNum (value+=ALL_ALPHA | value+=ID | value+=ID_C) (value+=simpleNum | value+=ALL_ALPHA | value+=ID | value+=ID_C)+ //| value+=chapterNum
		////;
		//SpecialSymbols:
		//	SLASH | OPERATORS | ARROW | SMILEY | TRIPLE_DOT;
		@Override public ParserRule getRule() { return rule; }
		
		//SLASH | OPERATORS | ARROW | SMILEY | TRIPLE_DOT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SLASH
		public RuleCall getSLASHTerminalRuleCall_0() { return cSLASHTerminalRuleCall_0; }
		
		//OPERATORS
		public RuleCall getOPERATORSTerminalRuleCall_1() { return cOPERATORSTerminalRuleCall_1; }
		
		//ARROW
		public RuleCall getARROWTerminalRuleCall_2() { return cARROWTerminalRuleCall_2; }
		
		//SMILEY
		public RuleCall getSMILEYTerminalRuleCall_3() { return cSMILEYTerminalRuleCall_3; }
		
		//TRIPLE_DOT
		public RuleCall getTRIPLE_DOTTerminalRuleCall_4() { return cTRIPLE_DOTTerminalRuleCall_4; }
	}
	public class DecimalNumENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.decimalNumEN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//decimalNumEN hidden():
		//	INT DOT INT;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO: 1000th separator
		//INT DOT INT
		public Group getGroup() { return cGroup; }
		
		////TODO: 1000th separator
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class DecimalNumDEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.decimalNumDE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKMTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//decimalNumDE hidden():
		//	INT KM INT;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO: 1000th separator
		//INT KM INT
		public Group getGroup() { return cGroup; }
		
		////TODO: 1000th separator
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//KM
		public RuleCall getKMTerminalRuleCall_1() { return cKMTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ChapterNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.chapterNum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cChapterIntermediateParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//chapterNum hidden():
		//	INT (DOT ChapterIntermediate)+;
		@Override public ParserRule getRule() { return rule; }
		
		//INT (DOT ChapterIntermediate)+
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//(DOT ChapterIntermediate)+
		public Group getGroup_1() { return cGroup_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }
		
		//ChapterIntermediate
		public RuleCall getChapterIntermediateParserRuleCall_1_1() { return cChapterIntermediateParserRuleCall_1_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalNumENParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecimalNumDEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Number hidden():
		//	simpleNum | decimalNumEN | decimalNumDE;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleNum | decimalNumEN | decimalNumDE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simpleNum
		public RuleCall getSimpleNumParserRuleCall_0() { return cSimpleNumParserRuleCall_0; }
		
		//decimalNumEN
		public RuleCall getDecimalNumENParserRuleCall_1() { return cDecimalNumENParserRuleCall_1; }
		
		//decimalNumDE
		public RuleCall getDecimalNumDEParserRuleCall_2() { return cDecimalNumDEParserRuleCall_2; }
	}
	public class UrlAdressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.UrlAdress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtocolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProtocolURL_PROTOCOLTerminalRuleCall_0_0 = (RuleCall)cProtocolAssignment_0.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlItWordElurlParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cUrlAllSepParserRuleCall_2_0_0 = (RuleCall)cUrlAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cUrlAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cUrlItWordElXxParserRuleCall_2_1_0_0 = (RuleCall)cUrlAssignment_2_1_0.eContents().get(0);
		private final Assignment cUrlAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cUrlSimpleNumParserRuleCall_2_1_1_0 = (RuleCall)cUrlAssignment_2_1_1.eContents().get(0);
		private final Assignment cUrlAssignment_2_1_2 = (Assignment)cAlternatives_2_1.eContents().get(2);
		private final RuleCall cUrlFragmentParserRuleCall_2_1_2_0 = (RuleCall)cUrlAssignment_2_1_2.eContents().get(0);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlAllSepParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		
		//UrlAdress hidden():
		//	protocol=URL_PROTOCOL url+=ItWordElurl (url+=AllSep+ (url+=ItWordElXx | url+=simpleNum | url+=Fragment))*
		//	url+=AllSep*;
		@Override public ParserRule getRule() { return rule; }
		
		//protocol=URL_PROTOCOL url+=ItWordElurl (url+=AllSep+ (url+=ItWordElXx | url+=simpleNum | url+=Fragment))* url+=AllSep*
		public Group getGroup() { return cGroup; }
		
		//protocol=URL_PROTOCOL
		public Assignment getProtocolAssignment_0() { return cProtocolAssignment_0; }
		
		//URL_PROTOCOL
		public RuleCall getProtocolURL_PROTOCOLTerminalRuleCall_0_0() { return cProtocolURL_PROTOCOLTerminalRuleCall_0_0; }
		
		//url+=ItWordElurl
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//ItWordElurl
		public RuleCall getUrlItWordElurlParserRuleCall_1_0() { return cUrlItWordElurlParserRuleCall_1_0; }
		
		//(url+=AllSep+ (url+=ItWordElXx | url+=simpleNum | url+=Fragment))*
		public Group getGroup_2() { return cGroup_2; }
		
		//url+=AllSep+
		public Assignment getUrlAssignment_2_0() { return cUrlAssignment_2_0; }
		
		//AllSep
		public RuleCall getUrlAllSepParserRuleCall_2_0_0() { return cUrlAllSepParserRuleCall_2_0_0; }
		
		//url+=ItWordElXx | url+=simpleNum | url+=Fragment
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//url+=ItWordElXx
		public Assignment getUrlAssignment_2_1_0() { return cUrlAssignment_2_1_0; }
		
		//ItWordElXx
		public RuleCall getUrlItWordElXxParserRuleCall_2_1_0_0() { return cUrlItWordElXxParserRuleCall_2_1_0_0; }
		
		//url+=simpleNum
		public Assignment getUrlAssignment_2_1_1() { return cUrlAssignment_2_1_1; }
		
		//simpleNum
		public RuleCall getUrlSimpleNumParserRuleCall_2_1_1_0() { return cUrlSimpleNumParserRuleCall_2_1_1_0; }
		
		//url+=Fragment
		public Assignment getUrlAssignment_2_1_2() { return cUrlAssignment_2_1_2; }
		
		//Fragment
		public RuleCall getUrlFragmentParserRuleCall_2_1_2_0() { return cUrlFragmentParserRuleCall_2_1_2_0; }
		
		//url+=AllSep*
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }
		
		//AllSep
		public RuleCall getUrlAllSepParserRuleCall_3_0() { return cUrlAllSepParserRuleCall_3_0; }
	}
	public class EmailATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.EmailAT");
		private final Assignment cEmailAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEmailATTerminalRuleCall_0 = (RuleCall)cEmailAssignment.eContents().get(0);
		
		//EmailAT:
		//	email+=AT;
		@Override public ParserRule getRule() { return rule; }
		
		//email+=AT
		public Assignment getEmailAssignment() { return cEmailAssignment; }
		
		//AT
		public RuleCall getEmailATTerminalRuleCall_0() { return cEmailATTerminalRuleCall_0; }
	}
	public class MailAdressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.MailAdress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEmailAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cEmailItWordParserRuleCall_0_0_0 = (RuleCall)cEmailAssignment_0_0.eContents().get(0);
		private final Assignment cEmailAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cEmailWordParserRuleCall_0_1_0 = (RuleCall)cEmailAssignment_0_1.eContents().get(0);
		private final Assignment cEmailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEmailEmailATParserRuleCall_1_0 = (RuleCall)cEmailAssignment_1.eContents().get(0);
		private final Assignment cEmailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmailItWordParserRuleCall_2_0 = (RuleCall)cEmailAssignment_2.eContents().get(0);
		
		//MailAdress hidden():
		//	(email+=ItWord | email+=Word) email+=EmailAT => email+=ItWord;
		@Override public ParserRule getRule() { return rule; }
		
		//(email+=ItWord | email+=Word) email+=EmailAT => email+=ItWord
		public Group getGroup() { return cGroup; }
		
		//email+=ItWord | email+=Word
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//email+=ItWord
		public Assignment getEmailAssignment_0_0() { return cEmailAssignment_0_0; }
		
		//ItWord
		public RuleCall getEmailItWordParserRuleCall_0_0_0() { return cEmailItWordParserRuleCall_0_0_0; }
		
		//email+=Word
		public Assignment getEmailAssignment_0_1() { return cEmailAssignment_0_1; }
		
		//Word
		public RuleCall getEmailWordParserRuleCall_0_1_0() { return cEmailWordParserRuleCall_0_1_0; }
		
		//email+=EmailAT
		public Assignment getEmailAssignment_1() { return cEmailAssignment_1; }
		
		//EmailAT
		public RuleCall getEmailEmailATParserRuleCall_1_0() { return cEmailEmailATParserRuleCall_1_0; }
		
		//=> email+=ItWord
		public Assignment getEmailAssignment_2() { return cEmailAssignment_2; }
		
		//ItWord
		public RuleCall getEmailItWordParserRuleCall_2_0() { return cEmailItWordParserRuleCall_2_0; }
	}
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Formula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEmailATParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameItWordParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameWordParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersBracketSentenceParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cDOTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cNameAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cNameItWordParserRuleCall_3_1_0_0 = (RuleCall)cNameAssignment_3_1_0.eContents().get(0);
		private final Assignment cNameAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cNameWordParserRuleCall_3_1_1_0 = (RuleCall)cNameAssignment_3_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cParametersBracketSentenceParserRuleCall_3_2_0 = (RuleCall)cParametersAssignment_3_2.eContents().get(0);
		
		//Formula hidden():
		//	name+=EmailAT? (name+=ItWord | name+=Word) parameters+=BracketSentence (DOT (name+=ItWord | name+=Word)
		//	parameters+=BracketSentence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=EmailAT? (name+=ItWord | name+=Word) parameters+=BracketSentence (DOT (name+=ItWord | name+=Word)
		//parameters+=BracketSentence)*
		public Group getGroup() { return cGroup; }
		
		//name+=EmailAT?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EmailAT
		public RuleCall getNameEmailATParserRuleCall_0_0() { return cNameEmailATParserRuleCall_0_0; }
		
		//name+=ItWord | name+=Word
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name+=ItWord
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ItWord
		public RuleCall getNameItWordParserRuleCall_1_0_0() { return cNameItWordParserRuleCall_1_0_0; }
		
		//name+=Word
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//Word
		public RuleCall getNameWordParserRuleCall_1_1_0() { return cNameWordParserRuleCall_1_1_0; }
		
		//parameters+=BracketSentence
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//BracketSentence
		public RuleCall getParametersBracketSentenceParserRuleCall_2_0() { return cParametersBracketSentenceParserRuleCall_2_0; }
		
		//(DOT (name+=ItWord | name+=Word) parameters+=BracketSentence)*
		public Group getGroup_3() { return cGroup_3; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_3_0() { return cDOTTerminalRuleCall_3_0; }
		
		//name+=ItWord | name+=Word
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//name+=ItWord
		public Assignment getNameAssignment_3_1_0() { return cNameAssignment_3_1_0; }
		
		//ItWord
		public RuleCall getNameItWordParserRuleCall_3_1_0_0() { return cNameItWordParserRuleCall_3_1_0_0; }
		
		//name+=Word
		public Assignment getNameAssignment_3_1_1() { return cNameAssignment_3_1_1; }
		
		//Word
		public RuleCall getNameWordParserRuleCall_3_1_1_0() { return cNameWordParserRuleCall_3_1_1_0; }
		
		//parameters+=BracketSentence
		public Assignment getParametersAssignment_3_2() { return cParametersAssignment_3_2; }
		
		//BracketSentence
		public RuleCall getParametersBracketSentenceParserRuleCall_3_2_0() { return cParametersBracketSentenceParserRuleCall_3_2_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNameItWordParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNameWordParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersExtBracketSentenceParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		
		//Array hidden():
		//	(name+=ItWord | name+=Word) parameters+=ExtBracketSentence+;
		@Override public ParserRule getRule() { return rule; }
		
		//(name+=ItWord | name+=Word) parameters+=ExtBracketSentence+
		public Group getGroup() { return cGroup; }
		
		//name+=ItWord | name+=Word
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//name+=ItWord
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ItWord
		public RuleCall getNameItWordParserRuleCall_0_0_0() { return cNameItWordParserRuleCall_0_0_0; }
		
		//name+=Word
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//Word
		public RuleCall getNameWordParserRuleCall_0_1_0() { return cNameWordParserRuleCall_0_1_0; }
		
		//parameters+=ExtBracketSentence+
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//ExtBracketSentence
		public RuleCall getParametersExtBracketSentenceParserRuleCall_1_0() { return cParametersExtBracketSentenceParserRuleCall_1_0; }
	}
	public class New_LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.New_Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNlNEWLINETerminalRuleCall_1_0 = (RuleCall)cNlAssignment_1.eContents().get(0);
		
		//New_Line:
		//	{Elements} nl=NEWLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Elements} nl=NEWLINE
		public Group getGroup() { return cGroup; }
		
		//{Elements}
		public Action getElementsAction_0() { return cElementsAction_0; }
		
		//nl=NEWLINE
		public Assignment getNlAssignment_1() { return cNlAssignment_1; }
		
		//NEWLINE
		public RuleCall getNlNEWLINETerminalRuleCall_1_0() { return cNlNEWLINETerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final SentenceTypeElements pSentenceType;
	private final ParagraphElements pParagraph;
	private final ParagraphBlockElements pParagraphBlock;
	private final BlockElementElements pBlockElement;
	private final FootNoteElements pFootNote;
	private final TableLineElements pTableLine;
	private final TableBorderElements pTableBorder;
	private final TableRowElements pTableRow;
	private final TableColumnSeparatorElements pTableColumnSeparator;
	private final TableElements pTable;
	private final LineSentenceChainElements pLineSentenceChain;
	private final SentenceChainElements pSentenceChain;
	private final SentenceChainXElements pSentenceChainX;
	private final SentenceElements pSentence;
	private final LineSentenceElements pLineSentence;
	private final FreeSentenceElements pFreeSentence;
	private final SentenceXElements pSentenceX;
	private final ListSentenceElements pListSentence;
	private final ChapterSentenceElements pChapterSentence;
	private final SubSentenceElements pSubSentence;
	private final TrailSubSentenceElements pTrailSubSentence;
	private final FreeSubSentenceElements pFreeSubSentence;
	private final LineSubSentenceElements pLineSubSentence;
	private final ListPointElements pListPoint;
	private final ListPointNumElements pListPointNum;
	private final NoNElementElements pNoNElement;
	private final BracketsElements pBrackets;
	private final NoNElementXElements pNoNElementX;
	private final NoNElementX2Elements pNoNElementX2;
	private final ElementsElements pElements;
	private final AllElementsElements pAllElements;
	private final BracketSentenceElements pBracketSentence;
	private final ExtBracketSentenceElements pExtBracketSentence;
	private final ExtBracketSentenceCElements pExtBracketSentenceC;
	private final FullStopElements pFullStop;
	private final WordElements pWord;
	private final WordShortElements pWordShort;
	private final FragmentXElements pFragmentX;
	private final FragmentElements pFragment;
	private final AsteriskElements pAsterisk;
	private final HashPElements pHashP;
	private final ItWordElements pItWord;
	private final WhitespaceElements pWhitespace;
	private final ItWordElElements pItWordEl;
	private final ItWordElurlElements pItWordElurl;
	private final ItWordElXElements pItWordElX;
	private final ItWordElXxElements pItWordElXx;
	private final SeparatorsLElements pSeparatorsL;
	private final SeparatorsItElements pSeparatorsIt;
	private final AllSepElements pAllSep;
	private final QuoteElements pQuote;
	private final UnitElements pUnit;
	private final SimpleUnitElements pSimpleUnit;
	private final Chapter_Unit_HIElements pChapter_Unit_HI;
	private final Chapter_Unit_LowElements pChapter_Unit_Low;
	private final HashNumberElements pHashNumber;
	private final ChapterAlphaElements pChapterAlpha;
	private final ChapterIntermediateElements pChapterIntermediate;
	private final SymbolsXElements pSymbolsX;
	private final SpecialChElements pSpecialCh;
	private final SymbolsElements pSymbols;
	private final ShortcutGenElements pShortcutGen;
	private final ShortcutLibElements pShortcutLib;
	private final ShortCutElements pShortCut;
	private final IgnoredTextElements pIgnoredText;
	private final SimpleNumElements pSimpleNum;
	private final ItNumElements pItNum;
	private final SpecialSymbolsElements pSpecialSymbols;
	private final DecimalNumENElements pDecimalNumEN;
	private final DecimalNumDEElements pDecimalNumDE;
	private final ChapterNumElements pChapterNum;
	private final NumberElements pNumber;
	private final UrlAdressElements pUrlAdress;
	private final EmailATElements pEmailAT;
	private final MailAdressElements pMailAdress;
	private final FormulaElements pFormula;
	private final ArrayElements pArray;
	private final New_LineElements pNew_Line;
	private final TerminalRule tCOLON;
	private final TerminalRule tDOT;
	private final TerminalRule tFS;
	private final TerminalRule tINTERJ;
	private final TerminalRule tKM;
	private final TerminalRule tSPACE;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tCURL;
	private final TerminalRule tOPERATORS;
	private final TerminalRule tWS;
	private final TerminalRule tARROW;
	private final TerminalRule tFULL_STOP_IM;
	private final TerminalRule tFULL_STOP_NL;
	private final TerminalRule tEND;
	private final TerminalRule tKOMMA;
	private final TerminalRule tALPHA;
	private final TerminalRule tALL_ALPHA;
	private final TerminalRule tID;
	private final TerminalRule tID_C;
	private final TerminalRule tAT;
	private final TerminalRule tHEX_NUMBER;
	private final TerminalRule tALPHA_CAPITAL;
	private final TerminalRule tALPHA_NUMERIC;
	private final TerminalRule tMINUS;
	private final TerminalRule tPERCENT;
	private final TerminalRule tEQUAL;
	private final TerminalRule tEXP;
	private final TerminalRule tAND;
	private final TerminalRule tSEPARATORS;
	private final TerminalRule tSEPARATORS_IT;
	private final TerminalRule tINT;
	private final TerminalRule tUNDERSCORE;
	private final TerminalRule tBR_O;
	private final TerminalRule tEXBR_O;
	private final TerminalRule tEXBRC_O;
	private final TerminalRule tBR_CL;
	private final TerminalRule tEXBR_CL;
	private final TerminalRule tEXBRC_CL;
	private final TerminalRule tGT;
	private final TerminalRule tSM;
	private final TerminalRule tIT_ID;
	private final TerminalRule tDOUBLE_DOT;
	private final TerminalRule tTRIPLE_DOT;
	private final TerminalRule tDECORATIONS;
	private final TerminalRule tIGNORED;
	private final TerminalRule tSMILEY;
	private final TerminalRule tURL_PROTOCOL;
	private final TerminalRule tHASH;
	private final TerminalRule tPARAGR;
	private final TerminalRule tPLUS;
	private final TerminalRule tMULTI;
	private final TerminalRule tDASH;
	private final TerminalRule tHORIZ_SEP;
	private final TerminalRule tBACKSLASH;
	private final TerminalRule tSLASH;
	private final TerminalRule tCURRENCY;
	private final TerminalRule tALPHA_NUMERIC_C;
	private final TerminalRule tSTRING;
	private final TerminalRule tTABLE_LINE;
	private final TerminalRule tID_ALL;
	private final TerminalRule tSHORTCUTS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public NaturalLangGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pSentenceType = new SentenceTypeElements();
		this.pParagraph = new ParagraphElements();
		this.pParagraphBlock = new ParagraphBlockElements();
		this.pBlockElement = new BlockElementElements();
		this.pFootNote = new FootNoteElements();
		this.pTableLine = new TableLineElements();
		this.pTableBorder = new TableBorderElements();
		this.pTableRow = new TableRowElements();
		this.pTableColumnSeparator = new TableColumnSeparatorElements();
		this.pTable = new TableElements();
		this.pLineSentenceChain = new LineSentenceChainElements();
		this.pSentenceChain = new SentenceChainElements();
		this.pSentenceChainX = new SentenceChainXElements();
		this.pSentence = new SentenceElements();
		this.pLineSentence = new LineSentenceElements();
		this.pFreeSentence = new FreeSentenceElements();
		this.pSentenceX = new SentenceXElements();
		this.pListSentence = new ListSentenceElements();
		this.pChapterSentence = new ChapterSentenceElements();
		this.pSubSentence = new SubSentenceElements();
		this.pTrailSubSentence = new TrailSubSentenceElements();
		this.pFreeSubSentence = new FreeSubSentenceElements();
		this.pLineSubSentence = new LineSubSentenceElements();
		this.pListPoint = new ListPointElements();
		this.pListPointNum = new ListPointNumElements();
		this.pNoNElement = new NoNElementElements();
		this.pBrackets = new BracketsElements();
		this.pNoNElementX = new NoNElementXElements();
		this.pNoNElementX2 = new NoNElementX2Elements();
		this.pElements = new ElementsElements();
		this.pAllElements = new AllElementsElements();
		this.pBracketSentence = new BracketSentenceElements();
		this.pExtBracketSentence = new ExtBracketSentenceElements();
		this.pExtBracketSentenceC = new ExtBracketSentenceCElements();
		this.pFullStop = new FullStopElements();
		this.pWord = new WordElements();
		this.pWordShort = new WordShortElements();
		this.pFragmentX = new FragmentXElements();
		this.pFragment = new FragmentElements();
		this.pAsterisk = new AsteriskElements();
		this.pHashP = new HashPElements();
		this.pItWord = new ItWordElements();
		this.pWhitespace = new WhitespaceElements();
		this.pItWordEl = new ItWordElElements();
		this.pItWordElurl = new ItWordElurlElements();
		this.pItWordElX = new ItWordElXElements();
		this.pItWordElXx = new ItWordElXxElements();
		this.pSeparatorsL = new SeparatorsLElements();
		this.pSeparatorsIt = new SeparatorsItElements();
		this.pAllSep = new AllSepElements();
		this.pQuote = new QuoteElements();
		this.pUnit = new UnitElements();
		this.pSimpleUnit = new SimpleUnitElements();
		this.pChapter_Unit_HI = new Chapter_Unit_HIElements();
		this.pChapter_Unit_Low = new Chapter_Unit_LowElements();
		this.pHashNumber = new HashNumberElements();
		this.pChapterAlpha = new ChapterAlphaElements();
		this.pChapterIntermediate = new ChapterIntermediateElements();
		this.pSymbolsX = new SymbolsXElements();
		this.pSpecialCh = new SpecialChElements();
		this.pSymbols = new SymbolsElements();
		this.pShortcutGen = new ShortcutGenElements();
		this.pShortcutLib = new ShortcutLibElements();
		this.pShortCut = new ShortCutElements();
		this.pIgnoredText = new IgnoredTextElements();
		this.pSimpleNum = new SimpleNumElements();
		this.pItNum = new ItNumElements();
		this.pSpecialSymbols = new SpecialSymbolsElements();
		this.pDecimalNumEN = new DecimalNumENElements();
		this.pDecimalNumDE = new DecimalNumDEElements();
		this.pChapterNum = new ChapterNumElements();
		this.pNumber = new NumberElements();
		this.pUrlAdress = new UrlAdressElements();
		this.pEmailAT = new EmailATElements();
		this.pMailAdress = new MailAdressElements();
		this.pFormula = new FormulaElements();
		this.pArray = new ArrayElements();
		this.pNew_Line = new New_LineElements();
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.COLON");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.DOT");
		this.tFS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FS");
		this.tINTERJ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.INTERJ");
		this.tKM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.KM");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SPACE");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.NEWLINE");
		this.tCURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.CURL");
		this.tOPERATORS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.OPERATORS");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.WS");
		this.tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ARROW");
		this.tFULL_STOP_IM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FULL_STOP_IM");
		this.tFULL_STOP_NL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.FULL_STOP_NL");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.END");
		this.tKOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.KOMMA");
		this.tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ALPHA");
		this.tALL_ALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ALL_ALPHA");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ID");
		this.tID_C = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ID_C");
		this.tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.AT");
		this.tHEX_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.HEX_NUMBER");
		this.tALPHA_CAPITAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ALPHA_CAPITAL");
		this.tALPHA_NUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ALPHA_NUMERIC");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.MINUS");
		this.tPERCENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.PERCENT");
		this.tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.EQUAL");
		this.tEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.EXP");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.AND");
		this.tSEPARATORS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SEPARATORS");
		this.tSEPARATORS_IT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SEPARATORS_IT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.INT");
		this.tUNDERSCORE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.UNDERSCORE");
		this.tBR_O = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.BR_O");
		this.tEXBR_O = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.EXBR_O");
		this.tEXBRC_O = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.EXBRC_O");
		this.tBR_CL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.BR_CL");
		this.tEXBR_CL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.EXBR_CL");
		this.tEXBRC_CL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.EXBRC_CL");
		this.tGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.GT");
		this.tSM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SM");
		this.tIT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.IT_ID");
		this.tDOUBLE_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.DOUBLE_DOT");
		this.tTRIPLE_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.TRIPLE_DOT");
		this.tDECORATIONS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.DECORATIONS");
		this.tIGNORED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.IGNORED");
		this.tSMILEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SMILEY");
		this.tURL_PROTOCOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.URL_PROTOCOL");
		this.tHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.HASH");
		this.tPARAGR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.PARAGR");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.PLUS");
		this.tMULTI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.MULTI");
		this.tDASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.DASH");
		this.tHORIZ_SEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.HORIZ_SEP");
		this.tBACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.BACKSLASH");
		this.tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SLASH");
		this.tCURRENCY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.CURRENCY");
		this.tALPHA_NUMERIC_C = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ALPHA_NUMERIC_C");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.STRING");
		this.tTABLE_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.TABLE_LINE");
		this.tID_ALL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ID_ALL");
		this.tSHORTCUTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.SHORTCUTS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.nlx.naturalLang.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xixum.nlx.naturalLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	sentences+=SentenceType*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SentenceType:
	//	Whitespace? (=> ChapterSentence | ParagraphBlock | Table) pEnd=Paragraph;
	public SentenceTypeElements getSentenceTypeAccess() {
		return pSentenceType;
	}
	
	public ParserRule getSentenceTypeRule() {
		return getSentenceTypeAccess().getRule();
	}
	
	//Paragraph:
	//	NEWLINE+ | END;
	public ParagraphElements getParagraphAccess() {
		return pParagraph;
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}
	
	//ParagraphBlock:
	//	block+=BlockElement+;
	public ParagraphBlockElements getParagraphBlockAccess() {
		return pParagraphBlock;
	}
	
	public ParserRule getParagraphBlockRule() {
		return getParagraphBlockAccess().getRule();
	}
	
	//BlockElement:
	//	SentenceChain | IgnoredText | FootNote | => ListSentence;
	public BlockElementElements getBlockElementAccess() {
		return pBlockElement;
	}
	
	public ParserRule getBlockElementRule() {
		return getBlockElementAccess().getRule();
	}
	
	//FootNote:
	//	number=simpleNum BR_CL SentenceChain=SentenceChain;
	public FootNoteElements getFootNoteAccess() {
		return pFootNote;
	}
	
	public ParserRule getFootNoteRule() {
		return getFootNoteAccess().getRule();
	}
	
	//TableLine hidden():
	//	content=TABLE_LINE;
	public TableLineElements getTableLineAccess() {
		return pTableLine;
	}
	
	public ParserRule getTableLineRule() {
		return getTableLineAccess().getRule();
	}
	
	//TableBorder:
	//	TableColumnSeparator | TableLine;
	public TableBorderElements getTableBorderAccess() {
		return pTableBorder;
	}
	
	public ParserRule getTableBorderRule() {
		return getTableBorderAccess().getRule();
	}
	
	//TableRow:
	//	{TableRow} content+=TableBorder content+=LineSentenceChain? (content+=TableBorder content+=LineSentenceChain?)*
	//	content+=TableBorder;
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//TableColumnSeparator:
	//	char=HORIZ_SEP;
	public TableColumnSeparatorElements getTableColumnSeparatorAccess() {
		return pTableColumnSeparator;
	}
	
	public ParserRule getTableColumnSeparatorRule() {
		return getTableColumnSeparatorAccess().getRule();
	}
	
	//Table:
	//	lines+=TableLine NEWLINE (lines+=TableRow NEWLINE)+ (lines+=TableLine NEWLINE (lines+=TableRow NEWLINE)+)*
	//	lines+=TableLine;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//LineSentenceChain:
	//	{SentenceChain} sentences+=LineSentence (separators+=FULL_STOP_IM sentences+=LineSentence)* endpoint=FULL_STOP_IM?;
	public LineSentenceChainElements getLineSentenceChainAccess() {
		return pLineSentenceChain;
	}
	
	public ParserRule getLineSentenceChainRule() {
		return getLineSentenceChainAccess().getRule();
	}
	
	//SentenceChain:
	//	{SentenceChain} => sentences+=Sentence (separators+=FULL_STOP_IM sentences+=SentenceX)* (endpoint=FULL_STOP_NL |
	//	endpoint=NEWLINE);
	public SentenceChainElements getSentenceChainAccess() {
		return pSentenceChain;
	}
	
	public ParserRule getSentenceChainRule() {
		return getSentenceChainAccess().getRule();
	}
	
	//SentenceChainX:
	//	{SentenceChain} sentences+=Sentence (separators+=FULL_STOP_IM sentences+=SentenceX)* => (endpoint=FULL_STOP_NL |
	//	endpoint=NEWLINE | endpoint=KOMMA);
	public SentenceChainXElements getSentenceChainXAccess() {
		return pSentenceChainX;
	}
	
	public ParserRule getSentenceChainXRule() {
		return getSentenceChainXAccess().getRule();
	}
	
	//Sentence:
	//	{Sentence} subsentence+=SubSentence (KOMMA subsentence+=TrailSubSentence)*;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//LineSentence:
	//	{Sentence} subsentence+=LineSubSentence (KOMMA subsentence+=LineSubSentence)*;
	public LineSentenceElements getLineSentenceAccess() {
		return pLineSentence;
	}
	
	public ParserRule getLineSentenceRule() {
		return getLineSentenceAccess().getRule();
	}
	
	//FreeSentence:
	//	{Sentence} subsentence+=FreeSubSentence (KOMMA subsentence+=FreeSubSentence)*;
	public FreeSentenceElements getFreeSentenceAccess() {
		return pFreeSentence;
	}
	
	public ParserRule getFreeSentenceRule() {
		return getFreeSentenceAccess().getRule();
	}
	
	//SentenceX:
	//	{Sentence} subsentence+=TrailSubSentence (KOMMA subsentence+=TrailSubSentence)*;
	public SentenceXElements getSentenceXAccess() {
		return pSentenceX;
	}
	
	public ParserRule getSentenceXRule() {
		return getSentenceXAccess().getRule();
	}
	
	//ListSentence:
	//	listpoint=ListPoint (SentenceChain=SentenceChainX | NEWLINE);
	public ListSentenceElements getListSentenceAccess() {
		return pListSentence;
	}
	
	public ParserRule getListSentenceRule() {
		return getListSentenceAccess().getRule();
	}
	
	//ChapterSentence:
	//	(=> chapterNumber=Chapter_Unit_Low | chapterNumber=ChapterAlpha | chapterNumber=Chapter_Unit_HI)
	//	Headline=LineSentenceChain;
	public ChapterSentenceElements getChapterSentenceAccess() {
		return pChapterSentence;
	}
	
	public ParserRule getChapterSentenceRule() {
		return getChapterSentenceAccess().getRule();
	}
	
	//SubSentence hidden():
	//	{SubSentence} (elements+=NoNElement (SPACE elements+=Elements)* | elements+=NoNElementX (SPACE elements+=Elements)+)
	//	(SPACE? elements+=New_Line SPACE? elements+=NoNElementX2 (SPACE elements+=Elements)*)* SPACE?;
	public SubSentenceElements getSubSentenceAccess() {
		return pSubSentence;
	}
	
	public ParserRule getSubSentenceRule() {
		return getSubSentenceAccess().getRule();
	}
	
	//TrailSubSentence hidden():
	//	{SubSentence} (elements+=Elements (SPACE elements+=Elements)* (SPACE? elements+=New_Line SPACE? =>
	//	elements+=NoNElementX2 (SPACE elements+=Elements)*)*) SPACE?;
	public TrailSubSentenceElements getTrailSubSentenceAccess() {
		return pTrailSubSentence;
	}
	
	public ParserRule getTrailSubSentenceRule() {
		return getTrailSubSentenceAccess().getRule();
	}
	
	//FreeSubSentence hidden():
	//	{SubSentence} (SPACE | elements+=New_Line)* elements+=AllElements ((SPACE | elements+=New_Line)+
	//	elements+=AllElements)* (SPACE | elements+=New_Line)*;
	public FreeSubSentenceElements getFreeSubSentenceAccess() {
		return pFreeSubSentence;
	}
	
	public ParserRule getFreeSubSentenceRule() {
		return getFreeSubSentenceAccess().getRule();
	}
	
	//LineSubSentence hidden():
	//	{SubSentence} elements+=Elements (SPACE elements+=Elements)* SPACE?;
	public LineSubSentenceElements getLineSubSentenceAccess() {
		return pLineSubSentence;
	}
	
	public ParserRule getLineSubSentenceRule() {
		return getLineSubSentenceAccess().getRule();
	}
	
	//ListPoint:
	//	MULTI | DASH | ListPointNum | MINUS;
	public ListPointElements getListPointAccess() {
		return pListPoint;
	}
	
	public ParserRule getListPointRule() {
		return getListPointAccess().getRule();
	}
	
	//ListPointNum hidden():
	//	INT (DOT BR_CL SPACE | FULL_STOP_IM) | ALPHA (DOT BR_CL SPACE | FULL_STOP_IM);
	public ListPointNumElements getListPointNumAccess() {
		return pListPointNum;
	}
	
	public ParserRule getListPointNumRule() {
		return getListPointNumAccess().getRule();
	}
	
	////AttachableElmts:
	////	Word | SymbolsX | IgnoredText | ShortCut
	////;
	//NoNElement:
	//	Quote | Brackets | Word | SymbolsX | IgnoredText | ShortCut | HashNumber | UrlAdress | MailAdress | Formula | Array |
	//	ItWord //=>ItWord
	//;
	public NoNElementElements getNoNElementAccess() {
		return pNoNElement;
	}
	
	public ParserRule getNoNElementRule() {
		return getNoNElementAccess().getRule();
	}
	
	//Brackets:
	//	BracketSentence | ExtBracketSentence | ExtBracketSentenceC;
	public BracketsElements getBracketsAccess() {
		return pBrackets;
	}
	
	public ParserRule getBracketsRule() {
		return getBracketsAccess().getRule();
	}
	
	//NoNElementX:
	//	NoNElement | WordShort;
	public NoNElementXElements getNoNElementXAccess() {
		return pNoNElementX;
	}
	
	public ParserRule getNoNElementXRule() {
		return getNoNElementXAccess().getRule();
	}
	
	//NoNElementX2:
	//	SimpleUnit | Unit | NoNElement | ChapterAlpha //| NumericID
	//;
	public NoNElementX2Elements getNoNElementX2Access() {
		return pNoNElementX2;
	}
	
	public ParserRule getNoNElementX2Rule() {
		return getNoNElementX2Access().getRule();
	}
	
	////NoNElementX3:
	////	NoNElement | ItWord //| NumericID
	////;
	//Elements:
	//	Symbols | => NoNElementX2 | WordShort //| ItWord // Chapter_Unit_HI|
	//;
	public ElementsElements getElementsAccess() {
		return pElements;
	}
	
	public ParserRule getElementsRule() {
		return getElementsAccess().getRule();
	}
	
	//AllElements: // hiddenElement that groups all Elements in one Interface class
	//	=> Elements | New_Line;
	public AllElementsElements getAllElementsAccess() {
		return pAllElements;
	}
	
	public ParserRule getAllElementsRule() {
		return getAllElementsAccess().getRule();
	}
	
	//BracketSentence:
	//	{BracketSentence} open=BR_O (brackedSentences+=FreeSentence (separator+=FullStop brackedSentences+=FreeSentence)*)?
	//	separator+=(DOT | FS | FullStop)? (SPACE | NEWLINE)* SPACE? => close=BR_CL;
	public BracketSentenceElements getBracketSentenceAccess() {
		return pBracketSentence;
	}
	
	public ParserRule getBracketSentenceRule() {
		return getBracketSentenceAccess().getRule();
	}
	
	////TODO: has some redundancy: consider to convert into bracket sentence... Test Nesting of BracketSentences
	//ExtBracketSentence BracketSentence:
	//	{ExtBracketSentence} open=EXBR_O (brackedSentences+=FreeSentence (separator+=FullStop
	//	brackedSentences+=FreeSentence)*)? separator+=(DOT | FS | FullStop)? SPACE? => close=EXBR_CL;
	public ExtBracketSentenceElements getExtBracketSentenceAccess() {
		return pExtBracketSentence;
	}
	
	public ParserRule getExtBracketSentenceRule() {
		return getExtBracketSentenceAccess().getRule();
	}
	
	//ExtBracketSentenceC BracketSentence:
	//	{ExtBracketSentence} open=EXBRC_O (brackedSentences+=FreeSentence (separator+=FullStop
	//	brackedSentences+=FreeSentence)*)? separator+=(DOT | FS | FullStop)? SPACE? => close=EXBRC_CL;
	public ExtBracketSentenceCElements getExtBracketSentenceCAccess() {
		return pExtBracketSentenceC;
	}
	
	public ParserRule getExtBracketSentenceCRule() {
		return getExtBracketSentenceCAccess().getRule();
	}
	
	//FullStop:
	//	FULL_STOP_NL | FULL_STOP_IM;
	public FullStopElements getFullStopAccess() {
		return pFullStop;
	}
	
	public ParserRule getFullStopRule() {
		return getFullStopAccess().getRule();
	}
	
	////FullS:
	////	DOT
	////;
	//Word hidden():
	//	(word+=FragmentX | => (word+=Fragment) (word+=SeparatorsL word+=Fragment)+) word+=SeparatorsL?;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//WordShort:
	//	{Word} word+=ALPHA;
	public WordShortElements getWordShortAccess() {
		return pWordShort;
	}
	
	public ParserRule getWordShortRule() {
		return getWordShortAccess().getRule();
	}
	
	//FragmentX:
	//	ID | ID_C | ALL_ALPHA;
	public FragmentXElements getFragmentXAccess() {
		return pFragmentX;
	}
	
	public ParserRule getFragmentXRule() {
		return getFragmentXAccess().getRule();
	}
	
	//Fragment:
	//	FragmentX | ALPHA;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	//Asterisk:
	//	MULTI MULTI? | Fragment MULTI | ItWordEl MULTI;
	public AsteriskElements getAsteriskAccess() {
		return pAsterisk;
	}
	
	public ParserRule getAsteriskRule() {
		return getAsteriskAccess().getRule();
	}
	
	//HashP:
	//	HASH;
	public HashPElements getHashPAccess() {
		return pHashP;
	}
	
	public ParserRule getHashPRule() {
		return getHashPAccess().getRule();
	}
	
	//ItWord hidden():
	//	(((word+=SeparatorsIt+ | word+=HashP | word+=MULTI | word+=CURRENCY) (word+=ItWordElXx | word+=Fragment) |
	//	(word+=ItWordEl | word+=CURL | word+=ALL_ALPHA word+=COLON)) (word+=AllSep+ word+=ItWordElXx)* | (=> word+=Fragment |
	//	word+=Asterisk) (word+=SeparatorsIt+ word+=ItWordElXx | word+=AllSep+ word+=ItWordElX) (word+=AllSep+
	//	word+=ItWordElXx)*) word+=AllSep*;
	public ItWordElements getItWordAccess() {
		return pItWord;
	}
	
	public ParserRule getItWordRule() {
		return getItWordAccess().getRule();
	}
	
	//Whitespace:
	//	SPACE | SPACE? NEWLINE SPACE?;
	public WhitespaceElements getWhitespaceAccess() {
		return pWhitespace;
	}
	
	public ParserRule getWhitespaceRule() {
		return getWhitespaceAccess().getRule();
	}
	
	//ItWordEl hidden():
	//	IT_ID | DOUBLE_DOT;
	public ItWordElElements getItWordElAccess() {
		return pItWordEl;
	}
	
	public ParserRule getItWordElRule() {
		return getItWordElAccess().getRule();
	}
	
	//ItWordElurl hidden():
	//	IT_ID | ID_ALL | ID;
	public ItWordElurlElements getItWordElurlAccess() {
		return pItWordElurl;
	}
	
	public ParserRule getItWordElurlRule() {
		return getItWordElurlAccess().getRule();
	}
	
	//ItWordElX hidden():
	//	ItWordEl | INT | HEX_NUMBER | ID_ALL;
	public ItWordElXElements getItWordElXAccess() {
		return pItWordElX;
	}
	
	public ParserRule getItWordElXRule() {
		return getItWordElXAccess().getRule();
	}
	
	//ItWordElXx hidden():
	//	(ALL_ALPHA | ALPHA | => ItWordElX | Fragment | Asterisk | ID_C | CURL)+;
	public ItWordElXxElements getItWordElXxAccess() {
		return pItWordElXx;
	}
	
	public ParserRule getItWordElXxRule() {
		return getItWordElXxAccess().getRule();
	}
	
	//SeparatorsL hidden():
	//	SLASH | SEPARATORS | DASH | MINUS;
	public SeparatorsLElements getSeparatorsLAccess() {
		return pSeparatorsL;
	}
	
	public ParserRule getSeparatorsLRule() {
		return getSeparatorsLAccess().getRule();
	}
	
	//SeparatorsIt hidden():
	//	DOT | SEPARATORS_IT | COLON;
	public SeparatorsItElements getSeparatorsItAccess() {
		return pSeparatorsIt;
	}
	
	public ParserRule getSeparatorsItRule() {
		return getSeparatorsItAccess().getRule();
	}
	
	//AllSep hidden():
	//	SeparatorsIt | SeparatorsL;
	public AllSepElements getAllSepAccess() {
		return pAllSep;
	}
	
	public ParserRule getAllSepRule() {
		return getAllSepAccess().getRule();
	}
	
	//Quote:
	//	quote=STRING;
	public QuoteElements getQuoteAccess() {
		return pQuote;
	}
	
	public ParserRule getQuoteRule() {
		return getQuoteAccess().getRule();
	}
	
	//Unit hidden():
	//	signature=MINUS? => value+=Number (unit=CURRENCY | unit=ID | unit=PERCENT)?;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//SimpleUnit:
	//	{Unit} value+=chapterNum | value+=ItNum | value+=HEX_NUMBER;
	public SimpleUnitElements getSimpleUnitAccess() {
		return pSimpleUnit;
	}
	
	public ParserRule getSimpleUnitRule() {
		return getSimpleUnitAccess().getRule();
	}
	
	//Chapter_Unit_HI hidden():
	//	{Unit} value+=chapterNum SPACE?;
	public Chapter_Unit_HIElements getChapter_Unit_HIAccess() {
		return pChapter_Unit_HI;
	}
	
	public ParserRule getChapter_Unit_HIRule() {
		return getChapter_Unit_HIAccess().getRule();
	}
	
	//Chapter_Unit_Low hidden():
	//	{Unit} value+=decimalNumEN SPACE?;
	public Chapter_Unit_LowElements getChapter_Unit_LowAccess() {
		return pChapter_Unit_Low;
	}
	
	public ParserRule getChapter_Unit_LowRule() {
		return getChapter_Unit_LowAccess().getRule();
	}
	
	//// odd but it works. this rule does not need a space at the end.
	//HashNumber hidden():
	//	{Unit} sign=(HASH | PARAGR) value+=Number;
	public HashNumberElements getHashNumberAccess() {
		return pHashNumber;
	}
	
	public ParserRule getHashNumberRule() {
		return getHashNumberAccess().getRule();
	}
	
	//ChapterAlpha hidden():
	//	{Unit} (value+=ID_C | value+=ALL_ALPHA) value+=DOT value+=ChapterIntermediate ((value+=DOT | value+=MINUS)
	//	value+=ChapterIntermediate)* SPACE;
	public ChapterAlphaElements getChapterAlphaAccess() {
		return pChapterAlpha;
	}
	
	public ParserRule getChapterAlphaRule() {
		return getChapterAlphaAccess().getRule();
	}
	
	////TODO: simplify when Numbers are converted
	//ChapterIntermediate hidden():
	//	ID_C | ID_ALL | => INT | IT_ID | ALL_ALPHA | ALPHA;
	public ChapterIntermediateElements getChapterIntermediateAccess() {
		return pChapterIntermediate;
	}
	
	public ParserRule getChapterIntermediateRule() {
		return getChapterIntermediateAccess().getRule();
	}
	
	//SymbolsX:
	//	{Symbols} symbol=SpecialSymbols;
	public SymbolsXElements getSymbolsXAccess() {
		return pSymbolsX;
	}
	
	public ParserRule getSymbolsXRule() {
		return getSymbolsXAccess().getRule();
	}
	
	//SpecialCh:
	//	PERCENT | DASH | MINUS | SEPARATORS | MULTI;
	public SpecialChElements getSpecialChAccess() {
		return pSpecialCh;
	}
	
	public ParserRule getSpecialChRule() {
		return getSpecialChAccess().getRule();
	}
	
	//Symbols:
	//	{Symbols} symbol=SpecialCh;
	public SymbolsElements getSymbolsAccess() {
		return pSymbols;
	}
	
	public ParserRule getSymbolsRule() {
		return getSymbolsAccess().getRule();
	}
	
	//ShortcutGen hidden():
	//	{EString} (word+=ALL_ALPHA | word+=ALPHA) (word+=DOT (word+=ALL_ALPHA | word+=ALPHA))+ word+=DOT;
	public ShortcutGenElements getShortcutGenAccess() {
		return pShortcutGen;
	}
	
	public ParserRule getShortcutGenRule() {
		return getShortcutGenAccess().getRule();
	}
	
	//ShortcutLib:
	//	{EString} shortcut=SHORTCUTS;
	public ShortcutLibElements getShortcutLibAccess() {
		return pShortcutLib;
	}
	
	public ParserRule getShortcutLibRule() {
		return getShortcutLibAccess().getRule();
	}
	
	//ShortCut:
	//	shortcut=ShortcutLib | shortcut=ShortcutGen;
	public ShortCutElements getShortCutAccess() {
		return pShortCut;
	}
	
	public ParserRule getShortCutRule() {
		return getShortCutAccess().getRule();
	}
	
	//IgnoredText:
	//	ignored=IGNORED;
	public IgnoredTextElements getIgnoredTextAccess() {
		return pIgnoredText;
	}
	
	public ParserRule getIgnoredTextRule() {
		return getIgnoredTextAccess().getRule();
	}
	
	//simpleNum hidden():
	//	INT;
	public SimpleNumElements getSimpleNumAccess() {
		return pSimpleNum;
	}
	
	public ParserRule getSimpleNumRule() {
		return getSimpleNumAccess().getRule();
	}
	
	//ItNum hidden():
	//	INT ((SEPARATORS_IT | COLON | DASH | MINUS | SLASH) INT)+ (KM INT)?;
	public ItNumElements getItNumAccess() {
		return pItNum;
	}
	
	public ParserRule getItNumRule() {
		return getItNumAccess().getRule();
	}
	
	////NumericID:
	////	{Unit} value+=simpleNum (value+=ALL_ALPHA | value+=ID | value+=ID_C) (value+=simpleNum | value+=ALL_ALPHA | value+=ID | value+=ID_C)+ //| value+=chapterNum
	////;
	//SpecialSymbols:
	//	SLASH | OPERATORS | ARROW | SMILEY | TRIPLE_DOT;
	public SpecialSymbolsElements getSpecialSymbolsAccess() {
		return pSpecialSymbols;
	}
	
	public ParserRule getSpecialSymbolsRule() {
		return getSpecialSymbolsAccess().getRule();
	}
	
	//decimalNumEN hidden():
	//	INT DOT INT;
	public DecimalNumENElements getDecimalNumENAccess() {
		return pDecimalNumEN;
	}
	
	public ParserRule getDecimalNumENRule() {
		return getDecimalNumENAccess().getRule();
	}
	
	//decimalNumDE hidden():
	//	INT KM INT;
	public DecimalNumDEElements getDecimalNumDEAccess() {
		return pDecimalNumDE;
	}
	
	public ParserRule getDecimalNumDERule() {
		return getDecimalNumDEAccess().getRule();
	}
	
	//chapterNum hidden():
	//	INT (DOT ChapterIntermediate)+;
	public ChapterNumElements getChapterNumAccess() {
		return pChapterNum;
	}
	
	public ParserRule getChapterNumRule() {
		return getChapterNumAccess().getRule();
	}
	
	//Number hidden():
	//	simpleNum | decimalNumEN | decimalNumDE;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//UrlAdress hidden():
	//	protocol=URL_PROTOCOL url+=ItWordElurl (url+=AllSep+ (url+=ItWordElXx | url+=simpleNum | url+=Fragment))*
	//	url+=AllSep*;
	public UrlAdressElements getUrlAdressAccess() {
		return pUrlAdress;
	}
	
	public ParserRule getUrlAdressRule() {
		return getUrlAdressAccess().getRule();
	}
	
	//EmailAT:
	//	email+=AT;
	public EmailATElements getEmailATAccess() {
		return pEmailAT;
	}
	
	public ParserRule getEmailATRule() {
		return getEmailATAccess().getRule();
	}
	
	//MailAdress hidden():
	//	(email+=ItWord | email+=Word) email+=EmailAT => email+=ItWord;
	public MailAdressElements getMailAdressAccess() {
		return pMailAdress;
	}
	
	public ParserRule getMailAdressRule() {
		return getMailAdressAccess().getRule();
	}
	
	//Formula hidden():
	//	name+=EmailAT? (name+=ItWord | name+=Word) parameters+=BracketSentence (DOT (name+=ItWord | name+=Word)
	//	parameters+=BracketSentence)*;
	public FormulaElements getFormulaAccess() {
		return pFormula;
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}
	
	//Array hidden():
	//	(name+=ItWord | name+=Word) parameters+=ExtBracketSentence+;
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//New_Line:
	//	{Elements} nl=NEWLINE;
	public New_LineElements getNew_LineAccess() {
		return pNew_Line;
	}
	
	public ParserRule getNew_LineRule() {
		return getNew_LineAccess().getRule();
	}
	
	//terminal COLON:
	//	':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	}
	
	//terminal DOT:
	//	'.';
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal FS:
	//	DOT | ';' | INTERJ | COLON;
	public TerminalRule getFSRule() {
		return tFS;
	}
	
	//terminal fragment INTERJ:
	//	'?' | '!';
	public TerminalRule getINTERJRule() {
		return tINTERJ;
	}
	
	//terminal KM:
	//	',';
	public TerminalRule getKMRule() {
		return tKM;
	}
	
	//terminal SPACE:
	//	' ' | '\t'+;
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal NEWLINE:
	//	'\r'? '\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal CURL:
	//	'~';
	public TerminalRule getCURLRule() {
		return tCURL;
	}
	
	//terminal OPERATORS:
	//	AND AND? | EXP | PLUS | CURL | EQUAL EQUAL? | INTERJ EQUAL | GT EQUAL | SM EQUAL | GT GT | SM SM;
	public TerminalRule getOPERATORSRule() {
		return tOPERATORS;
	}
	
	//terminal WS:
	//	NEWLINE | SPACE;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ARROW:
	//	MINUS* GT | SM MINUS*;
	public TerminalRule getARROWRule() {
		return tARROW;
	}
	
	//terminal FULL_STOP_IM:
	//	FS SPACE;
	public TerminalRule getFULL_STOP_IMRule() {
		return tFULL_STOP_IM;
	}
	
	//terminal FULL_STOP_NL:
	//	FS SPACE? NEWLINE;
	public TerminalRule getFULL_STOP_NLRule() {
		return tFULL_STOP_NL;
	}
	
	//terminal END:
	//	EOF;
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal KOMMA:
	//	KM WS;
	public TerminalRule getKOMMARule() {
		return tKOMMA;
	}
	
	//terminal ALPHA:
	//	'a'..'z' | 'ä'..'ü' | 'ß' | 'à'..'ù' | 'á'..'ú';
	public TerminalRule getALPHARule() {
		return tALPHA;
	}
	
	//terminal ALL_ALPHA:
	//	ALPHA_CAPITAL | ALPHA;
	public TerminalRule getALL_ALPHARule() {
		return tALL_ALPHA;
	}
	
	//terminal ID:
	//	ALL_ALPHA ALPHA+;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ID_C:
	//	ALPHA_CAPITAL ALPHA_CAPITAL+;
	public TerminalRule getID_CRule() {
		return tID_C;
	}
	
	//terminal AT:
	//	'@';
	public TerminalRule getATRule() {
		return tAT;
	}
	
	//terminal HEX_NUMBER:
	//	'0x' ('0'..'9' | 'A'..'F')+;
	public TerminalRule getHEX_NUMBERRule() {
		return tHEX_NUMBER;
	}
	
	//terminal fragment ALPHA_CAPITAL:
	//	'A'..'Z' | 'Ä'..'Ü' | 'À'..'Ù' | 'Á'..'Ú';
	public TerminalRule getALPHA_CAPITALRule() {
		return tALPHA_CAPITAL;
	}
	
	//terminal ALPHA_NUMERIC:
	//	ALPHA | '0'..'9';
	public TerminalRule getALPHA_NUMERICRule() {
		return tALPHA_NUMERIC;
	}
	
	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	}
	
	//terminal PERCENT:
	//	'%';
	public TerminalRule getPERCENTRule() {
		return tPERCENT;
	}
	
	//terminal EQUAL:
	//	"=";
	public TerminalRule getEQUALRule() {
		return tEQUAL;
	}
	
	//terminal fragment EXP:
	//	"^";
	public TerminalRule getEXPRule() {
		return tEXP;
	}
	
	//terminal AND:
	//	'&';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal SEPARATORS:
	//	"'" | '’' | '´' | BACKSLASH;
	public TerminalRule getSEPARATORSRule() {
		return tSEPARATORS;
	}
	
	//terminal SEPARATORS_IT:
	//	UNDERSCORE | COLON;
	public TerminalRule getSEPARATORS_ITRule() {
		return tSEPARATORS_IT;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal UNDERSCORE:
	//	'_';
	public TerminalRule getUNDERSCORERule() {
		return tUNDERSCORE;
	}
	
	//terminal BR_O:
	//	'(';
	public TerminalRule getBR_ORule() {
		return tBR_O;
	}
	
	//terminal EXBR_O:
	//	'[';
	public TerminalRule getEXBR_ORule() {
		return tEXBR_O;
	}
	
	//terminal EXBRC_O:
	//	'{';
	public TerminalRule getEXBRC_ORule() {
		return tEXBRC_O;
	}
	
	//terminal BR_CL:
	//	')';
	public TerminalRule getBR_CLRule() {
		return tBR_CL;
	}
	
	//terminal EXBR_CL:
	//	']';
	public TerminalRule getEXBR_CLRule() {
		return tEXBR_CL;
	}
	
	//terminal EXBRC_CL:
	//	'}';
	public TerminalRule getEXBRC_CLRule() {
		return tEXBRC_CL;
	}
	
	//terminal GT:
	//	'>';
	public TerminalRule getGTRule() {
		return tGT;
	}
	
	//terminal SM:
	//	'<';
	public TerminalRule getSMRule() {
		return tSM;
	}
	
	//terminal IT_ID:
	//	(ALPHA | ALPHA_CAPITAL) ALPHA_NUMERIC_C+;
	public TerminalRule getIT_IDRule() {
		return tIT_ID;
	}
	
	//terminal DOUBLE_DOT:
	//	DOT DOT;
	public TerminalRule getDOUBLE_DOTRule() {
		return tDOUBLE_DOT;
	}
	
	//terminal TRIPLE_DOT:
	//	DOT DOT DOT;
	public TerminalRule getTRIPLE_DOTRule() {
		return tTRIPLE_DOT;
	}
	
	//terminal fragment DECORATIONS:
	//	EQUAL EQUAL EQUAL+ | MULTI MULTI MULTI+ | HASH HASH+ | DOT DOT DOT DOT+ | MINUS MINUS+;
	public TerminalRule getDECORATIONSRule() {
		return tDECORATIONS;
	}
	
	//terminal IGNORED:
	//	DECORATIONS;
	public TerminalRule getIGNOREDRule() {
		return tIGNORED;
	}
	
	//terminal SMILEY:
	//	':)' | ':-)' | ';)' | ';-)' | ':D' | ':(' | ':-(' | '©' | '®';
	public TerminalRule getSMILEYRule() {
		return tSMILEY;
	}
	
	//terminal URL_PROTOCOL:
	//	'http' 's'? '://' | 'ftp://' | 'ssh://' | 'svn://';
	public TerminalRule getURL_PROTOCOLRule() {
		return tURL_PROTOCOL;
	}
	
	//terminal HASH:
	//	'#';
	public TerminalRule getHASHRule() {
		return tHASH;
	}
	
	//terminal PARAGR:
	//	'§';
	public TerminalRule getPARAGRRule() {
		return tPARAGR;
	}
	
	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	}
	
	//terminal MULTI:
	//	'*';
	public TerminalRule getMULTIRule() {
		return tMULTI;
	}
	
	//terminal DASH:
	//	'–' | '—';
	public TerminalRule getDASHRule() {
		return tDASH;
	}
	
	//terminal HORIZ_SEP:
	//	'|';
	public TerminalRule getHORIZ_SEPRule() {
		return tHORIZ_SEP;
	}
	
	//terminal BACKSLASH:
	//	'\\';
	public TerminalRule getBACKSLASHRule() {
		return tBACKSLASH;
	}
	
	//terminal SLASH:
	//	'/';
	public TerminalRule getSLASHRule() {
		return tSLASH;
	}
	
	//terminal CURRENCY:
	//	'$' | '€' // | Pound
	//;
	public TerminalRule getCURRENCYRule() {
		return tCURRENCY;
	}
	
	//terminal ALPHA_NUMERIC_C:
	//	ALPHA_CAPITAL | ALPHA_NUMERIC;
	public TerminalRule getALPHA_NUMERIC_CRule() {
		return tALPHA_NUMERIC_C;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	'“'->'”';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal TABLE_LINE:
	//	PLUS MINUS+ (PLUS MINUS+)* PLUS;
	public TerminalRule getTABLE_LINERule() {
		return tTABLE_LINE;
	}
	
	//terminal ID_ALL:
	//	ALPHA_NUMERIC_C ALPHA_NUMERIC_C+;
	public TerminalRule getID_ALLRule() {
		return tID_ALL;
	}
	
	//terminal SHORTCUTS:
	//	'etc.' | 'asf.' | 'bzw.' | 'bspw.' | 'Evtl.' | 'evtl.' | 'Inc.' | 'inc.' | 'Bspw.' | 'Bzw.' | 'Dr.' | 'Prof.' |
	//	'Ing.' | 'med.';
	public TerminalRule getSHORTCUTSRule() {
		return tSHORTCUTS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
