/**
 * generated by Xtext 2.16.0
 */
package org.xixum.nlx.naturalLang.util;

import org.xixum.nlx.naturalLang.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xixum.nlx.naturalLang.NaturalLangPackage
 * @generated
 */
public class NaturalLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NaturalLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NaturalLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = NaturalLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case NaturalLangPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SENTENCE_TYPE:
      {
        SentenceType sentenceType = (SentenceType)theEObject;
        T result = caseSentenceType(sentenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.PARAGRAPH_BLOCK:
      {
        ParagraphBlock paragraphBlock = (ParagraphBlock)theEObject;
        T result = caseParagraphBlock(paragraphBlock);
        if (result == null) result = caseSentenceType(paragraphBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.BLOCK_ELEMENT:
      {
        BlockElement blockElement = (BlockElement)theEObject;
        T result = caseBlockElement(blockElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.FOOT_NOTE:
      {
        FootNote footNote = (FootNote)theEObject;
        T result = caseFootNote(footNote);
        if (result == null) result = caseBlockElement(footNote);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.TABLE_LINE:
      {
        TableLine tableLine = (TableLine)theEObject;
        T result = caseTableLine(tableLine);
        if (result == null) result = caseTableBorder(tableLine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.TABLE_BORDER:
      {
        TableBorder tableBorder = (TableBorder)theEObject;
        T result = caseTableBorder(tableBorder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.TABLE_ROW:
      {
        TableRow tableRow = (TableRow)theEObject;
        T result = caseTableRow(tableRow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.TABLE_COLUMN_SEPARATOR:
      {
        TableColumnSeparator tableColumnSeparator = (TableColumnSeparator)theEObject;
        T result = caseTableColumnSeparator(tableColumnSeparator);
        if (result == null) result = caseTableBorder(tableColumnSeparator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.TABLE:
      {
        Table table = (Table)theEObject;
        T result = caseTable(table);
        if (result == null) result = caseSentenceType(table);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.LINE_SENTENCE_CHAIN:
      {
        LineSentenceChain lineSentenceChain = (LineSentenceChain)theEObject;
        T result = caseLineSentenceChain(lineSentenceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SENTENCE_CHAIN:
      {
        SentenceChain sentenceChain = (SentenceChain)theEObject;
        T result = caseSentenceChain(sentenceChain);
        if (result == null) result = caseBlockElement(sentenceChain);
        if (result == null) result = caseLineSentenceChain(sentenceChain);
        if (result == null) result = caseSentenceChainX(sentenceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SENTENCE_CHAIN_X:
      {
        SentenceChainX sentenceChainX = (SentenceChainX)theEObject;
        T result = caseSentenceChainX(sentenceChainX);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SENTENCE:
      {
        Sentence sentence = (Sentence)theEObject;
        T result = caseSentence(sentence);
        if (result == null) result = caseLineSentence(sentence);
        if (result == null) result = caseFreeSentence(sentence);
        if (result == null) result = caseSentenceX(sentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.LINE_SENTENCE:
      {
        LineSentence lineSentence = (LineSentence)theEObject;
        T result = caseLineSentence(lineSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.FREE_SENTENCE:
      {
        FreeSentence freeSentence = (FreeSentence)theEObject;
        T result = caseFreeSentence(freeSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SENTENCE_X:
      {
        SentenceX sentenceX = (SentenceX)theEObject;
        T result = caseSentenceX(sentenceX);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.LIST_SENTENCE:
      {
        ListSentence listSentence = (ListSentence)theEObject;
        T result = caseListSentence(listSentence);
        if (result == null) result = caseBlockElement(listSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.CHAPTER_SENTENCE:
      {
        ChapterSentence chapterSentence = (ChapterSentence)theEObject;
        T result = caseChapterSentence(chapterSentence);
        if (result == null) result = caseSentenceType(chapterSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SUB_SENTENCE:
      {
        SubSentence subSentence = (SubSentence)theEObject;
        T result = caseSubSentence(subSentence);
        if (result == null) result = caseTrailSubSentence(subSentence);
        if (result == null) result = caseFreeSubSentence(subSentence);
        if (result == null) result = caseLineSubSentence(subSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.TRAIL_SUB_SENTENCE:
      {
        TrailSubSentence trailSubSentence = (TrailSubSentence)theEObject;
        T result = caseTrailSubSentence(trailSubSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.FREE_SUB_SENTENCE:
      {
        FreeSubSentence freeSubSentence = (FreeSubSentence)theEObject;
        T result = caseFreeSubSentence(freeSubSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.LINE_SUB_SENTENCE:
      {
        LineSubSentence lineSubSentence = (LineSubSentence)theEObject;
        T result = caseLineSubSentence(lineSubSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.NO_NELEMENT:
      {
        NoNElement noNElement = (NoNElement)theEObject;
        T result = caseNoNElement(noNElement);
        if (result == null) result = caseNoNElementX(noNElement);
        if (result == null) result = caseNoNElementX2(noNElement);
        if (result == null) result = caseElements(noNElement);
        if (result == null) result = caseNew_Line(noNElement);
        if (result == null) result = caseAllElements(noNElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.BRACKETS:
      {
        Brackets brackets = (Brackets)theEObject;
        T result = caseBrackets(brackets);
        if (result == null) result = caseNoNElement(brackets);
        if (result == null) result = caseNoNElementX(brackets);
        if (result == null) result = caseNoNElementX2(brackets);
        if (result == null) result = caseElements(brackets);
        if (result == null) result = caseNew_Line(brackets);
        if (result == null) result = caseAllElements(brackets);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.NO_NELEMENT_X:
      {
        NoNElementX noNElementX = (NoNElementX)theEObject;
        T result = caseNoNElementX(noNElementX);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.NO_NELEMENT_X2:
      {
        NoNElementX2 noNElementX2 = (NoNElementX2)theEObject;
        T result = caseNoNElementX2(noNElementX2);
        if (result == null) result = caseElements(noNElementX2);
        if (result == null) result = caseNew_Line(noNElementX2);
        if (result == null) result = caseAllElements(noNElementX2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.ELEMENTS:
      {
        Elements elements = (Elements)theEObject;
        T result = caseElements(elements);
        if (result == null) result = caseNew_Line(elements);
        if (result == null) result = caseAllElements(elements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.ALL_ELEMENTS:
      {
        AllElements allElements = (AllElements)theEObject;
        T result = caseAllElements(allElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.BRACKET_SENTENCE:
      {
        BracketSentence bracketSentence = (BracketSentence)theEObject;
        T result = caseBracketSentence(bracketSentence);
        if (result == null) result = caseBrackets(bracketSentence);
        if (result == null) result = caseNoNElement(bracketSentence);
        if (result == null) result = caseNoNElementX(bracketSentence);
        if (result == null) result = caseNoNElementX2(bracketSentence);
        if (result == null) result = caseElements(bracketSentence);
        if (result == null) result = caseNew_Line(bracketSentence);
        if (result == null) result = caseAllElements(bracketSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.WORD:
      {
        Word word = (Word)theEObject;
        T result = caseWord(word);
        if (result == null) result = caseNoNElement(word);
        if (result == null) result = caseWordShort(word);
        if (result == null) result = caseNoNElementX(word);
        if (result == null) result = caseNoNElementX2(word);
        if (result == null) result = caseElements(word);
        if (result == null) result = caseNew_Line(word);
        if (result == null) result = caseAllElements(word);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.WORD_SHORT:
      {
        WordShort wordShort = (WordShort)theEObject;
        T result = caseWordShort(wordShort);
        if (result == null) result = caseNoNElementX(wordShort);
        if (result == null) result = caseElements(wordShort);
        if (result == null) result = caseNew_Line(wordShort);
        if (result == null) result = caseAllElements(wordShort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.IT_WORD:
      {
        ItWord itWord = (ItWord)theEObject;
        T result = caseItWord(itWord);
        if (result == null) result = caseNoNElement(itWord);
        if (result == null) result = caseNoNElementX(itWord);
        if (result == null) result = caseNoNElementX2(itWord);
        if (result == null) result = caseElements(itWord);
        if (result == null) result = caseNew_Line(itWord);
        if (result == null) result = caseAllElements(itWord);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.QUOTE:
      {
        Quote quote = (Quote)theEObject;
        T result = caseQuote(quote);
        if (result == null) result = caseNoNElement(quote);
        if (result == null) result = caseNoNElementX(quote);
        if (result == null) result = caseNoNElementX2(quote);
        if (result == null) result = caseElements(quote);
        if (result == null) result = caseNew_Line(quote);
        if (result == null) result = caseAllElements(quote);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.UNIT:
      {
        Unit unit = (Unit)theEObject;
        T result = caseUnit(unit);
        if (result == null) result = caseSimpleUnit(unit);
        if (result == null) result = caseChapter_Unit_HI(unit);
        if (result == null) result = caseChapter_Unit_Low(unit);
        if (result == null) result = caseHashNumber(unit);
        if (result == null) result = caseChapterAlpha(unit);
        if (result == null) result = caseElements(unit);
        if (result == null) result = caseNoNElement(unit);
        if (result == null) result = caseNoNElementX2(unit);
        if (result == null) result = caseNew_Line(unit);
        if (result == null) result = caseNoNElementX(unit);
        if (result == null) result = caseAllElements(unit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SIMPLE_UNIT:
      {
        SimpleUnit simpleUnit = (SimpleUnit)theEObject;
        T result = caseSimpleUnit(simpleUnit);
        if (result == null) result = caseNoNElementX2(simpleUnit);
        if (result == null) result = caseElements(simpleUnit);
        if (result == null) result = caseNew_Line(simpleUnit);
        if (result == null) result = caseAllElements(simpleUnit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.CHAPTER_UNIT_HI:
      {
        Chapter_Unit_HI chapter_Unit_HI = (Chapter_Unit_HI)theEObject;
        T result = caseChapter_Unit_HI(chapter_Unit_HI);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.CHAPTER_UNIT_LOW:
      {
        Chapter_Unit_Low chapter_Unit_Low = (Chapter_Unit_Low)theEObject;
        T result = caseChapter_Unit_Low(chapter_Unit_Low);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.HASH_NUMBER:
      {
        HashNumber hashNumber = (HashNumber)theEObject;
        T result = caseHashNumber(hashNumber);
        if (result == null) result = caseNoNElement(hashNumber);
        if (result == null) result = caseNoNElementX(hashNumber);
        if (result == null) result = caseNoNElementX2(hashNumber);
        if (result == null) result = caseElements(hashNumber);
        if (result == null) result = caseNew_Line(hashNumber);
        if (result == null) result = caseAllElements(hashNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.CHAPTER_ALPHA:
      {
        ChapterAlpha chapterAlpha = (ChapterAlpha)theEObject;
        T result = caseChapterAlpha(chapterAlpha);
        if (result == null) result = caseNoNElementX2(chapterAlpha);
        if (result == null) result = caseElements(chapterAlpha);
        if (result == null) result = caseNew_Line(chapterAlpha);
        if (result == null) result = caseAllElements(chapterAlpha);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SYMBOLS_X:
      {
        SymbolsX symbolsX = (SymbolsX)theEObject;
        T result = caseSymbolsX(symbolsX);
        if (result == null) result = caseNoNElement(symbolsX);
        if (result == null) result = caseNoNElementX(symbolsX);
        if (result == null) result = caseNoNElementX2(symbolsX);
        if (result == null) result = caseElements(symbolsX);
        if (result == null) result = caseNew_Line(symbolsX);
        if (result == null) result = caseAllElements(symbolsX);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SYMBOLS:
      {
        Symbols symbols = (Symbols)theEObject;
        T result = caseSymbols(symbols);
        if (result == null) result = caseSymbolsX(symbols);
        if (result == null) result = caseNew_Line(symbols);
        if (result == null) result = caseNoNElement(symbols);
        if (result == null) result = caseAllElements(symbols);
        if (result == null) result = caseNoNElementX(symbols);
        if (result == null) result = caseNoNElementX2(symbols);
        if (result == null) result = caseElements(symbols);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SHORTCUT_GEN:
      {
        ShortcutGen shortcutGen = (ShortcutGen)theEObject;
        T result = caseShortcutGen(shortcutGen);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SHORTCUT_LIB:
      {
        ShortcutLib shortcutLib = (ShortcutLib)theEObject;
        T result = caseShortcutLib(shortcutLib);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.SHORT_CUT:
      {
        ShortCut shortCut = (ShortCut)theEObject;
        T result = caseShortCut(shortCut);
        if (result == null) result = caseNoNElement(shortCut);
        if (result == null) result = caseNoNElementX(shortCut);
        if (result == null) result = caseNoNElementX2(shortCut);
        if (result == null) result = caseElements(shortCut);
        if (result == null) result = caseNew_Line(shortCut);
        if (result == null) result = caseAllElements(shortCut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.IGNORED_TEXT:
      {
        IgnoredText ignoredText = (IgnoredText)theEObject;
        T result = caseIgnoredText(ignoredText);
        if (result == null) result = caseBlockElement(ignoredText);
        if (result == null) result = caseNoNElement(ignoredText);
        if (result == null) result = caseNoNElementX(ignoredText);
        if (result == null) result = caseNoNElementX2(ignoredText);
        if (result == null) result = caseElements(ignoredText);
        if (result == null) result = caseNew_Line(ignoredText);
        if (result == null) result = caseAllElements(ignoredText);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.URL_ADRESS:
      {
        UrlAdress urlAdress = (UrlAdress)theEObject;
        T result = caseUrlAdress(urlAdress);
        if (result == null) result = caseNoNElement(urlAdress);
        if (result == null) result = caseNoNElementX(urlAdress);
        if (result == null) result = caseNoNElementX2(urlAdress);
        if (result == null) result = caseElements(urlAdress);
        if (result == null) result = caseNew_Line(urlAdress);
        if (result == null) result = caseAllElements(urlAdress);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.EMAIL_AT:
      {
        EmailAT emailAT = (EmailAT)theEObject;
        T result = caseEmailAT(emailAT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.MAIL_ADRESS:
      {
        MailAdress mailAdress = (MailAdress)theEObject;
        T result = caseMailAdress(mailAdress);
        if (result == null) result = caseNoNElement(mailAdress);
        if (result == null) result = caseNoNElementX(mailAdress);
        if (result == null) result = caseNoNElementX2(mailAdress);
        if (result == null) result = caseElements(mailAdress);
        if (result == null) result = caseNew_Line(mailAdress);
        if (result == null) result = caseAllElements(mailAdress);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.FORMULA:
      {
        Formula formula = (Formula)theEObject;
        T result = caseFormula(formula);
        if (result == null) result = caseNoNElement(formula);
        if (result == null) result = caseNoNElementX(formula);
        if (result == null) result = caseNoNElementX2(formula);
        if (result == null) result = caseElements(formula);
        if (result == null) result = caseNew_Line(formula);
        if (result == null) result = caseAllElements(formula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.ARRAY:
      {
        Array array = (Array)theEObject;
        T result = caseArray(array);
        if (result == null) result = caseNoNElement(array);
        if (result == null) result = caseNoNElementX(array);
        if (result == null) result = caseNoNElementX2(array);
        if (result == null) result = caseElements(array);
        if (result == null) result = caseNew_Line(array);
        if (result == null) result = caseAllElements(array);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.NEW_LINE:
      {
        New_Line new_Line = (New_Line)theEObject;
        T result = caseNew_Line(new_Line);
        if (result == null) result = caseAllElements(new_Line);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.EXT_BRACKET_SENTENCE:
      {
        ExtBracketSentence extBracketSentence = (ExtBracketSentence)theEObject;
        T result = caseExtBracketSentence(extBracketSentence);
        if (result == null) result = caseBracketSentence(extBracketSentence);
        if (result == null) result = caseBrackets(extBracketSentence);
        if (result == null) result = caseNoNElement(extBracketSentence);
        if (result == null) result = caseNoNElementX(extBracketSentence);
        if (result == null) result = caseNoNElementX2(extBracketSentence);
        if (result == null) result = caseElements(extBracketSentence);
        if (result == null) result = caseNew_Line(extBracketSentence);
        if (result == null) result = caseAllElements(extBracketSentence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NaturalLangPackage.ESTRING:
      {
        EString eString = (EString)theEObject;
        T result = caseEString(eString);
        if (result == null) result = caseShortcutGen(eString);
        if (result == null) result = caseShortcutLib(eString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sentence Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sentence Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSentenceType(SentenceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Paragraph Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Paragraph Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParagraphBlock(ParagraphBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockElement(BlockElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Foot Note</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Foot Note</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFootNote(FootNote object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTableLine(TableLine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table Border</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table Border</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTableBorder(TableBorder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table Row</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table Row</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTableRow(TableRow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table Column Separator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table Column Separator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTableColumnSeparator(TableColumnSeparator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTable(Table object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Line Sentence Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Line Sentence Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLineSentenceChain(LineSentenceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sentence Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sentence Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSentenceChain(SentenceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sentence Chain X</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sentence Chain X</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSentenceChainX(SentenceChainX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSentence(Sentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Line Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Line Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLineSentence(LineSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Free Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Free Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFreeSentence(FreeSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sentence X</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sentence X</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSentenceX(SentenceX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListSentence(ListSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterSentence(ChapterSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubSentence(SubSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trail Sub Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trail Sub Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrailSubSentence(TrailSubSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Free Sub Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Free Sub Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFreeSubSentence(FreeSubSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Line Sub Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Line Sub Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLineSubSentence(LineSubSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>No NElement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>No NElement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoNElement(NoNElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Brackets</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Brackets</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBrackets(Brackets object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>No NElement X</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>No NElement X</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoNElementX(NoNElementX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>No NElement X2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>No NElement X2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoNElementX2(NoNElementX2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElements(Elements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllElements(AllElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bracket Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bracket Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBracketSentence(BracketSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWord(Word object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word Short</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word Short</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWordShort(WordShort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>It Word</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>It Word</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseItWord(ItWord object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Quote</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Quote</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuote(Quote object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnit(Unit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Unit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Unit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleUnit(SimpleUnit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Unit HI</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Unit HI</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapter_Unit_HI(Chapter_Unit_HI object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Unit Low</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Unit Low</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapter_Unit_Low(Chapter_Unit_Low object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hash Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hash Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHashNumber(HashNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Alpha</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Alpha</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterAlpha(ChapterAlpha object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbols X</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbols X</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbolsX(SymbolsX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbols</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbols</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbols(Symbols object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shortcut Gen</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shortcut Gen</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortcutGen(ShortcutGen object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shortcut Lib</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shortcut Lib</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortcutLib(ShortcutLib object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Short Cut</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Short Cut</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortCut(ShortCut object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ignored Text</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ignored Text</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIgnoredText(IgnoredText object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Url Adress</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Url Adress</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUrlAdress(UrlAdress object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Email AT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Email AT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmailAT(EmailAT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mail Adress</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mail Adress</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMailAdress(MailAdress object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormula(Formula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArray(Array object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNew_Line(New_Line object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ext Bracket Sentence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ext Bracket Sentence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtBracketSentence(ExtBracketSentence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EString</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EString</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEString(EString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //NaturalLangSwitch
