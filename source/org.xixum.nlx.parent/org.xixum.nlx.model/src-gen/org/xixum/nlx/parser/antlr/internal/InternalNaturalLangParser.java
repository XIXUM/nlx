package org.xixum.nlx.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xixum.nlx.services.NaturalLangGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
interface InternalNaturalLangParserSignatures {
     EObject entryRuleModel() throws RecognitionException;
     EObject ruleModel() throws RecognitionException;
     EObject entryRuleSentenceType() throws RecognitionException;
     EObject ruleSentenceType() throws RecognitionException;
     AntlrDatatypeRuleToken ruleParagraph() throws RecognitionException;
     EObject entryRuleParagraphBlock() throws RecognitionException;
     EObject ruleParagraphBlock() throws RecognitionException;
     EObject entryRuleBlockElement() throws RecognitionException;
     EObject ruleBlockElement() throws RecognitionException;
     EObject entryRuleFootNote() throws RecognitionException;
     EObject ruleFootNote() throws RecognitionException;
     EObject entryRuleTableLine() throws RecognitionException;
     EObject ruleTableLine() throws RecognitionException;
     EObject entryRuleTableBorder() throws RecognitionException;
     EObject ruleTableBorder() throws RecognitionException;
     EObject entryRuleTableRow() throws RecognitionException;
     EObject ruleTableRow() throws RecognitionException;
     EObject entryRuleTableColumnSeparator() throws RecognitionException;
     EObject ruleTableColumnSeparator() throws RecognitionException;
     EObject entryRuleTable() throws RecognitionException;
     EObject ruleTable() throws RecognitionException;
     EObject entryRuleLineSentenceChain() throws RecognitionException;
     EObject ruleLineSentenceChain() throws RecognitionException;
     EObject entryRuleSentenceChain() throws RecognitionException;
     EObject ruleSentenceChain() throws RecognitionException;
     EObject entryRuleSentenceChainX() throws RecognitionException;
     EObject ruleSentenceChainX() throws RecognitionException;
     EObject entryRuleSentence() throws RecognitionException;
     EObject ruleSentence() throws RecognitionException;
     EObject entryRuleLineSentence() throws RecognitionException;
     EObject ruleLineSentence() throws RecognitionException;
     EObject entryRuleFreeSentence() throws RecognitionException;
     EObject ruleFreeSentence() throws RecognitionException;
     EObject entryRuleSentenceX() throws RecognitionException;
     EObject ruleSentenceX() throws RecognitionException;
     EObject entryRuleListSentence() throws RecognitionException;
     EObject ruleListSentence() throws RecognitionException;
     EObject entryRuleChapterSentence() throws RecognitionException;
     EObject ruleChapterSentence() throws RecognitionException;
     EObject entryRuleSubSentence() throws RecognitionException;
     EObject ruleSubSentence() throws RecognitionException;
     EObject entryRuleTrailSubSentence() throws RecognitionException;
     EObject ruleTrailSubSentence() throws RecognitionException;
     EObject entryRuleFreeSubSentence() throws RecognitionException;
     EObject ruleFreeSubSentence() throws RecognitionException;
     EObject entryRuleLineSubSentence() throws RecognitionException;
     EObject ruleLineSubSentence() throws RecognitionException;
     AntlrDatatypeRuleToken ruleListPoint() throws RecognitionException;
     AntlrDatatypeRuleToken ruleListPointNum() throws RecognitionException;
     EObject entryRuleNoNElement() throws RecognitionException;
     EObject ruleNoNElement() throws RecognitionException;
     EObject entryRuleBrackets() throws RecognitionException;
     EObject ruleBrackets() throws RecognitionException;
     EObject entryRuleNoNElementX() throws RecognitionException;
     EObject ruleNoNElementX() throws RecognitionException;
     EObject entryRuleNoNElementX2() throws RecognitionException;
     EObject ruleNoNElementX2() throws RecognitionException;
     EObject entryRuleElements() throws RecognitionException;
     EObject ruleElements() throws RecognitionException;
     EObject entryRuleAllElements() throws RecognitionException;
     EObject ruleAllElements() throws RecognitionException;
     EObject entryRuleBracketSentence() throws RecognitionException;
     EObject ruleBracketSentence() throws RecognitionException;
     EObject entryRuleExtBracketSentence() throws RecognitionException;
     EObject ruleExtBracketSentence() throws RecognitionException;
     EObject entryRuleExtBracketSentenceC() throws RecognitionException;
     EObject ruleExtBracketSentenceC() throws RecognitionException;
     AntlrDatatypeRuleToken ruleFullStop() throws RecognitionException;
     EObject entryRuleWord() throws RecognitionException;
     EObject ruleWord() throws RecognitionException;
     EObject entryRuleWordShort() throws RecognitionException;
     EObject ruleWordShort() throws RecognitionException;
     AntlrDatatypeRuleToken ruleFragmentX() throws RecognitionException;
     AntlrDatatypeRuleToken ruleFragment() throws RecognitionException;
     AntlrDatatypeRuleToken ruleAsterisk() throws RecognitionException;
     AntlrDatatypeRuleToken ruleHashP() throws RecognitionException;
     EObject entryRuleItWord() throws RecognitionException;
     EObject ruleItWord() throws RecognitionException;
     AntlrDatatypeRuleToken ruleWhitespace() throws RecognitionException;
     AntlrDatatypeRuleToken ruleItWordEl() throws RecognitionException;
     AntlrDatatypeRuleToken ruleItWordElurl() throws RecognitionException;
     AntlrDatatypeRuleToken ruleItWordElX() throws RecognitionException;
     AntlrDatatypeRuleToken ruleItWordElXx() throws RecognitionException;
     AntlrDatatypeRuleToken ruleSeparatorsL() throws RecognitionException;
     AntlrDatatypeRuleToken ruleSeparatorsIt() throws RecognitionException;
     AntlrDatatypeRuleToken ruleAllSep() throws RecognitionException;
     EObject entryRuleQuote() throws RecognitionException;
     EObject ruleQuote() throws RecognitionException;
     EObject entryRuleUnit() throws RecognitionException;
     EObject ruleUnit() throws RecognitionException;
     EObject entryRuleSimpleUnit() throws RecognitionException;
     EObject ruleSimpleUnit() throws RecognitionException;
     EObject entryRuleChapter_Unit_HI() throws RecognitionException;
     EObject ruleChapter_Unit_HI() throws RecognitionException;
     EObject entryRuleChapter_Unit_Low() throws RecognitionException;
     EObject ruleChapter_Unit_Low() throws RecognitionException;
     EObject entryRuleHashNumber() throws RecognitionException;
     EObject ruleHashNumber() throws RecognitionException;
     EObject entryRuleChapterAlpha() throws RecognitionException;
     EObject ruleChapterAlpha() throws RecognitionException;
     AntlrDatatypeRuleToken ruleChapterIntermediate() throws RecognitionException;
     EObject entryRuleSymbolsX() throws RecognitionException;
     EObject ruleSymbolsX() throws RecognitionException;
     AntlrDatatypeRuleToken ruleSpecialCh() throws RecognitionException;
     EObject entryRuleSymbols() throws RecognitionException;
     EObject ruleSymbols() throws RecognitionException;
     EObject entryRuleShortcutGen() throws RecognitionException;
     EObject ruleShortcutGen() throws RecognitionException;
     EObject entryRuleShortcutLib() throws RecognitionException;
     EObject ruleShortcutLib() throws RecognitionException;
     EObject entryRuleShortCut() throws RecognitionException;
     EObject ruleShortCut() throws RecognitionException;
     EObject entryRuleIgnoredText() throws RecognitionException;
     EObject ruleIgnoredText() throws RecognitionException;
     AntlrDatatypeRuleToken rulesimpleNum() throws RecognitionException;
     AntlrDatatypeRuleToken ruleItNum() throws RecognitionException;
     AntlrDatatypeRuleToken ruleSpecialSymbols() throws RecognitionException;
     AntlrDatatypeRuleToken ruledecimalNumEN() throws RecognitionException;
     AntlrDatatypeRuleToken ruledecimalNumDE() throws RecognitionException;
     AntlrDatatypeRuleToken rulechapterNum() throws RecognitionException;
     AntlrDatatypeRuleToken ruleNumber() throws RecognitionException;
     EObject entryRuleUrlAdress() throws RecognitionException;
     EObject ruleUrlAdress() throws RecognitionException;
     EObject entryRuleEmailAT() throws RecognitionException;
     EObject ruleEmailAT() throws RecognitionException;
     EObject entryRuleMailAdress() throws RecognitionException;
     EObject ruleMailAdress() throws RecognitionException;
     EObject entryRuleFormula() throws RecognitionException;
     EObject ruleFormula() throws RecognitionException;
     EObject entryRuleArray() throws RecognitionException;
     EObject ruleArray() throws RecognitionException;
     EObject entryRuleNew_Line() throws RecognitionException;
     EObject ruleNew_Line() throws RecognitionException;
     void synpred4_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred5_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred6_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred9_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred10_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred11_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred12_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred28_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred31_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred34_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred37_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred40_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred45_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred52_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred55_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred57_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred58_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred59_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred60_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred74_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred75_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred83_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred84_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred85_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred91_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred92_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred96_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred99_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred106_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred113_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred116_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred122_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred129_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred135_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred139_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred143_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred153_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred154_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred156_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred157_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred158_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred159_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred168_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred204_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred208_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred209_InternalNaturalLang_fragment() throws RecognitionException;   
     void synpred211_InternalNaturalLang_fragment() throws RecognitionException;   
}

@SuppressWarnings("all")
abstract class InternalNaturalLangParser1 extends AbstractInternalAntlrParser implements InternalNaturalLangParserSignatures {

        InternalNaturalLangParser1(TokenStream input) {
            this(input, new RecognizerSharedState());
        }

        InternalNaturalLangParser1(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }

    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "RULE_NEWLINE", "RULE_END", "RULE_BR_CL", "RULE_TABLE_LINE", "RULE_HORIZ_SEP", "RULE_FULL_STOP_IM", "RULE_FULL_STOP_NL", "RULE_KOMMA", "RULE_SPACE", "RULE_MULTI", "RULE_DASH", "RULE_MINUS", "RULE_INT", "RULE_DOT", "RULE_ALPHA", "RULE_BR_O", "RULE_FS", "RULE_EXBR_O", "RULE_EXBR_CL", "RULE_EXBRC_O", "RULE_EXBRC_CL", "RULE_ID", "RULE_ID_C", "RULE_ALL_ALPHA", "RULE_HASH", "RULE_CURRENCY", "RULE_CURL", "RULE_COLON", "RULE_IT_ID", "RULE_DOUBLE_DOT", "RULE_ID_ALL", "RULE_HEX_NUMBER", "RULE_SLASH", "RULE_SEPARATORS", "RULE_SEPARATORS_IT", "RULE_STRING", "RULE_PERCENT", "RULE_PARAGR", "RULE_SHORTCUTS", "RULE_IGNORED", "RULE_KM", "RULE_OPERATORS", "RULE_ARROW", "RULE_SMILEY", "RULE_TRIPLE_DOT", "RULE_URL_PROTOCOL", "RULE_AT", "RULE_INTERJ", "RULE_AND", "RULE_EXP", "RULE_PLUS", "RULE_EQUAL", "RULE_GT", "RULE_SM", "RULE_WS", "RULE_ALPHA_CAPITAL", "RULE_ALPHA_NUMERIC", "RULE_BACKSLASH", "RULE_UNDERSCORE", "RULE_ALPHA_NUMERIC_C", "RULE_DECORATIONS", "RULE_ANY_OTHER"
    };
    public static final int RULE_EXP=53;
    public static final int RULE_SMILEY=47;
    public static final int RULE_EXBR_CL=22;
    public static final int RULE_TABLE_LINE=7;
    public static final int RULE_GT=56;
    public static final int RULE_IGNORED=43;
    public static final int RULE_TRIPLE_DOT=48;
    public static final int RULE_CURRENCY=29;
    public static final int RULE_ID_ALL=34;
    public static final int RULE_UNDERSCORE=62;
    public static final int RULE_SPACE=12;
    public static final int RULE_PERCENT=40;
    public static final int RULE_ARROW=46;
    public static final int RULE_SEPARATORS=37;
    public static final int RULE_KM=44;
    public static final int RULE_SHORTCUTS=42;
    public static final int RULE_BR_O=19;
    public static final int RULE_BACKSLASH=61;
    public static final int RULE_ID=25;
    public static final int RULE_DOUBLE_DOT=33;
    public static final int RULE_EQUAL=55;
    public static final int RULE_ID_C=26;
    public static final int RULE_EXBRC_CL=24;
    public static final int RULE_COLON=31;
    public static final int RULE_INTERJ=51;
    public static final int RULE_SLASH=36;
    public static final int RULE_CURL=30;
    public static final int RULE_SEPARATORS_IT=38;
    public static final int RULE_MULTI=13;
    public static final int RULE_KOMMA=11;
    public static final int RULE_INT=16;
    public static final int RULE_FULL_STOP_IM=9;
    public static final int RULE_EXBR_O=21;
    public static final int RULE_PARAGR=41;
    public static final int RULE_BR_CL=6;
    public static final int RULE_FULL_STOP_NL=10;
    public static final int RULE_ALPHA=18;
    public static final int RULE_ALPHA_NUMERIC_C=63;
    public static final int RULE_END=5;
    public static final int RULE_HORIZ_SEP=8;
    public static final int RULE_IT_ID=32;
    public static final int RULE_NEWLINE=4;
    public static final int RULE_STRING=39;
    public static final int RULE_EXBRC_O=23;
    public static final int RULE_OPERATORS=45;
    public static final int RULE_AT=50;
    public static final int RULE_AND=52;
    public static final int RULE_HASH=28;
    public static final int RULE_DASH=14;
    public static final int RULE_PLUS=54;
    public static final int RULE_DOT=17;
    public static final int EOF=-1;
    public static final int RULE_HEX_NUMBER=35;
    public static final int RULE_WS=58;
    public static final int RULE_DECORATIONS=64;
    public static final int RULE_SM=57;
    public static final int RULE_ALL_ALPHA=27;
    public static final int RULE_ALPHA_NUMERIC=60;
    public static final int RULE_URL_PROTOCOL=49;
    public static final int RULE_FS=20;
    public static final int RULE_ANY_OTHER=65;
    public static final int RULE_ALPHA_CAPITAL=59;
    public static final int RULE_MINUS=15;


    public String[] getTokenNames() { return InternalNaturalLangParser.tokenNames; }
    public String getGrammarFileName() { return "InternalNaturalLang.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	protected NaturalLangGrammarAccess grammarAccess;



        @Override
        protected String getFirstRuleName() {
        	return "Model";
       	}

       	@Override
       	protected NaturalLangGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}





    // Delegated rules

    public final boolean synpred9_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_InternalNaturalLang() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_InternalNaturalLang_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA136 dfa136 = new DFA136(this);
    static final String dfa_1s = "\41\uffff";
    static final String dfa_2s = "\1\7\3\0\35\uffff";
    static final String dfa_3s = "\1\62\3\0\35\uffff";
    static final String dfa_4s = "\4\uffff\1\2\32\uffff\1\3\1\1";
    static final String dfa_5s = "\1\uffff\1\0\1\1\1\2\35\uffff}>";
    static final String[] dfa_6s = {
            "\1\37\5\uffff\3\4\1\1\3\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\2\1\3\6\4\2\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\6\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "133:3: ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) | this_ParagraphBlock_2= ruleParagraphBlock | this_Table_3= ruleTable )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_1 = input.LA(1);

                         
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalNaturalLang()) ) {s = 32;}

                        else if ( (synpred5_InternalNaturalLang()) ) {s = 4;}

                         
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_2 = input.LA(1);

                         
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalNaturalLang()) ) {s = 32;}

                        else if ( (synpred5_InternalNaturalLang()) ) {s = 4;}

                         
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_3 = input.LA(1);

                         
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalNaturalLang()) ) {s = 32;}

                        else if ( (synpred5_InternalNaturalLang()) ) {s = 4;}

                         
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\1\15\7\uffff\1\0\5\uffff\1\0\7\uffff\1\0\5\uffff\1\0\4\uffff";
    static final String dfa_8s = "\1\62\7\uffff\1\0\5\uffff\1\0\7\uffff\1\0\5\uffff\1\0\4\uffff";
    static final String dfa_9s = "\1\uffff\1\1\33\uffff\2\4\1\2\1\3";
    static final String dfa_10s = "\1\0\7\uffff\1\1\5\uffff\1\2\7\uffff\1\3\5\uffff\1\4\4\uffff}>";
    static final String[] dfa_11s = {
            "\1\26\1\35\1\36\1\34\1\1\1\10\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\11\1\2\uffff\1\1\1\uffff\2\1\1\uffff\2\1\1\16\1\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_7 = DFA.unpackEncodedStringToUnsignedChars(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final short[] dfa_9 = DFA.unpackEncodedString(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[][] dfa_11 = unpackEncodedStringArray(dfa_11s);

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_7;
            this.max = dfa_8;
            this.accept = dfa_9;
            this.special = dfa_10;
            this.transition = dfa_11;
        }
        public String getDescription() {
            return "282:2: (this_SentenceChain_0= ruleSentenceChain | this_IgnoredText_1= ruleIgnoredText | this_FootNote_2= ruleFootNote | ( ( ruleListSentence )=>this_ListSentence_3= ruleListSentence ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_0 = input.LA(1);

                         
                        int index7_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA7_0==RULE_DOT||LA7_0==RULE_BR_O||LA7_0==RULE_EXBR_O||LA7_0==RULE_EXBRC_O||(LA7_0>=RULE_ID && LA7_0<=RULE_DOUBLE_DOT)||LA7_0==RULE_SLASH||(LA7_0>=RULE_SEPARATORS_IT && LA7_0<=RULE_STRING)||(LA7_0>=RULE_PARAGR && LA7_0<=RULE_SHORTCUTS)||(LA7_0>=RULE_OPERATORS && LA7_0<=RULE_AT)) ) {s = 1;}

                        else if ( (LA7_0==RULE_ALPHA) ) {s = 8;}

                        else if ( (LA7_0==RULE_IGNORED) ) {s = 14;}

                        else if ( (LA7_0==RULE_MULTI) ) {s = 22;}

                        else if ( (LA7_0==RULE_INT) ) {s = 28;}

                        else if ( (LA7_0==RULE_DASH) && (synpred12_InternalNaturalLang())) {s = 29;}

                        else if ( (LA7_0==RULE_MINUS) && (synpred12_InternalNaturalLang())) {s = 30;}

                         
                        input.seek(index7_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalNaturalLang()) ) {s = 1;}

                        else if ( (synpred12_InternalNaturalLang()) ) {s = 30;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalNaturalLang()) ) {s = 1;}

                        else if ( (synpred10_InternalNaturalLang()) ) {s = 31;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_22 = input.LA(1);

                         
                        int index7_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalNaturalLang()) ) {s = 1;}

                        else if ( (synpred12_InternalNaturalLang()) ) {s = 30;}

                         
                        input.seek(index7_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_28 = input.LA(1);

                         
                        int index7_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalNaturalLang()) ) {s = 32;}

                        else if ( (synpred12_InternalNaturalLang()) ) {s = 30;}

                         
                        input.seek(index7_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_12s = "\36\uffff";
    static final String dfa_13s = "\1\15\33\0\2\uffff";
    static final String dfa_14s = "\1\62\33\0\2\uffff";
    static final String dfa_15s = "\34\uffff\1\1\1\2";
    static final String dfa_16s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\2\uffff}>";
    static final String[] dfa_17s = {
            "\1\26\3\uffff\1\23\1\10\1\2\1\uffff\1\3\1\uffff\1\4\1\uffff\1\5\1\6\1\7\1\20\1\27\1\32\1\25\1\30\1\31\2\uffff\1\11\1\uffff\1\24\1\1\1\uffff\1\21\1\17\1\16\1\uffff\1\12\1\13\1\14\1\15\1\22\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final char[] dfa_13 = DFA.unpackEncodedStringToUnsignedChars(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[][] dfa_17 = unpackEncodedStringArray(dfa_17s);

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = dfa_12;
            this.eof = dfa_12;
            this.min = dfa_13;
            this.max = dfa_14;
            this.accept = dfa_15;
            this.special = dfa_16;
            this.transition = dfa_17;
        }
        public String getDescription() {
            return "1673:3: ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) | ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_3 = input.LA(1);

                         
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_4 = input.LA(1);

                         
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_5 = input.LA(1);

                         
                        int index29_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_6 = input.LA(1);

                         
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_7 = input.LA(1);

                         
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA29_14 = input.LA(1);

                         
                        int index29_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA29_15 = input.LA(1);

                         
                        int index29_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA29_16 = input.LA(1);

                         
                        int index29_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA29_17 = input.LA(1);

                         
                        int index29_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA29_18 = input.LA(1);

                         
                        int index29_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA29_19 = input.LA(1);

                         
                        int index29_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA29_20 = input.LA(1);

                         
                        int index29_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA29_21 = input.LA(1);

                         
                        int index29_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA29_22 = input.LA(1);

                         
                        int index29_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA29_23 = input.LA(1);

                         
                        int index29_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA29_24 = input.LA(1);

                         
                        int index29_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA29_25 = input.LA(1);

                         
                        int index29_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA29_26 = input.LA(1);

                         
                        int index29_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA29_27 = input.LA(1);

                         
                        int index29_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalNaturalLang()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index29_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_18s = "\45\uffff";
    static final String dfa_19s = "\1\4\41\uffff\1\0\2\uffff";
    static final String dfa_20s = "\1\62\41\uffff\1\0\2\uffff";
    static final String dfa_21s = "\1\uffff\1\3\41\uffff\1\1\1\2";
    static final String dfa_22s = "\42\uffff\1\0\2\uffff}>";
    static final String[] dfa_23s = {
            "\1\42\7\uffff\1\43\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\11\1\1\uffff\11\1\1\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final char[] dfa_19 = DFA.unpackEncodedStringToUnsignedChars(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[][] dfa_23 = unpackEncodedStringArray(dfa_23s);

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_18;
            this.eof = dfa_18;
            this.min = dfa_19;
            this.max = dfa_20;
            this.accept = dfa_21;
            this.special = dfa_22;
            this.transition = dfa_23;
        }
        public String getDescription() {
            return "()* loopback of 2060:3: (this_SPACE_1= RULE_SPACE | ( (lv_elements_2_0= ruleNew_Line ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_34 = input.LA(1);

                         
                        int index41_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_InternalNaturalLang()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_24s = "\7\uffff";
    static final String dfa_25s = "\3\3\4\uffff";
    static final String dfa_26s = "\3\4\2\uffff\1\4\1\0";
    static final String dfa_27s = "\1\30\2\62\2\uffff\1\46\1\0";
    static final String dfa_28s = "\3\uffff\1\2\1\1\2\uffff";
    static final String dfa_29s = "\6\uffff\1\0}>";
    static final String[] dfa_30s = {
            "\1\2\1\uffff\1\3\2\uffff\3\3\1\1\4\uffff\1\3\2\uffff\1\3\1\uffff\1\3\1\uffff\1\3",
            "\1\6\1\uffff\1\3\2\uffff\3\3\1\1\4\4\1\5\2\4\1\3\1\4\1\3\1\4\1\3\11\4\1\uffff\11\4\1\uffff\6\4",
            "\1\6\1\uffff\1\3\2\uffff\3\3\1\1\4\4\1\5\2\4\1\3\1\4\1\3\1\4\1\3\11\4\1\uffff\11\4\1\uffff\6\4",
            "",
            "",
            "\1\3\1\uffff\1\3\5\uffff\1\3\1\4\2\uffff\3\4\3\uffff\1\3\1\uffff\1\3\3\4\2\uffff\6\4\2\uffff\1\4",
            "\1\uffff"
    };

    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final char[] dfa_26 = DFA.unpackEncodedStringToUnsignedChars(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[][] dfa_30 = unpackEncodedStringArray(dfa_30s);

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = dfa_24;
            this.eof = dfa_25;
            this.min = dfa_26;
            this.max = dfa_27;
            this.accept = dfa_28;
            this.special = dfa_29;
            this.transition = dfa_30;
        }
        public String getDescription() {
            return "()* loopback of 2105:3: ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_6 = input.LA(1);

                         
                        int index43_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalNaturalLang()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index43_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_31s = "\u0103\uffff";
    static final String dfa_32s = "\3\uffff\3\40\14\uffff\3\102\1\uffff\4\40\10\uffff\1\102\6\uffff\14\102\5\uffff\7\102\3\uffff\4\40\5\102\2\uffff\24\102\23\uffff\22\102\4\40\17\102\1\uffff\23\102\16\uffff\16\102\22\uffff\17\102\3\uffff\3\102\3\uffff\16\102";
    static final String dfa_33s = "\1\15\2\uffff\3\4\1\15\3\uffff\1\15\2\uffff\5\15\3\4\1\uffff\4\4\1\16\1\uffff\1\4\2\15\2\uffff\2\4\1\15\4\16\1\15\14\4\1\15\4\16\7\4\1\16\1\uffff\12\4\2\16\24\4\1\16\22\15\45\4\1\15\23\4\16\15\16\4\22\15\17\4\3\15\3\4\3\15\16\4";
    static final String dfa_34s = "\1\62\2\uffff\3\62\1\46\3\uffff\1\43\2\uffff\4\46\1\43\3\62\1\uffff\4\62\1\46\1\uffff\3\46\2\uffff\1\46\1\62\5\46\15\62\5\46\7\62\1\46\1\uffff\1\46\11\62\2\46\24\62\1\46\u009f\62";
    static final String dfa_35s = "\1\uffff\1\1\1\2\4\uffff\1\4\1\5\1\6\1\uffff\1\7\1\10\10\uffff\1\12\5\uffff\1\11\3\uffff\1\13\1\3\41\uffff\1\14\u00c0\uffff";
    static final String dfa_36s = "\50\uffff\1\0\162\uffff\1\1\147\uffff}>";
    static final String[] dfa_37s = {
            "\1\20\3\uffff\1\15\1\6\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\3\1\4\1\5\1\12\1\21\1\24\1\17\1\22\1\23\2\uffff\1\7\1\uffff\1\16\1\1\1\uffff\1\13\1\11\1\10\1\uffff\4\7\1\14\1\25",
            "",
            "",
            "\11\40\1\32\1\30\1\31\1\uffff\1\34\1\uffff\1\25\1\40\1\37\1\40\1\uffff\1\40\6\uffff\1\36\4\uffff\1\26\1\27\1\35\13\uffff\1\33",
            "\11\40\1\32\1\30\1\31\1\uffff\1\34\1\uffff\1\25\1\40\1\37\1\40\1\uffff\1\40\6\uffff\1\36\4\uffff\1\26\1\27\1\35\13\uffff\1\33",
            "\11\40\1\32\1\30\1\31\1\uffff\1\41\1\uffff\1\25\1\40\1\37\1\40\1\uffff\1\40\6\uffff\1\42\4\uffff\1\26\1\27\1\35\13\uffff\1\33",
            "\1\32\1\46\1\47\1\uffff\1\43\15\uffff\1\36\4\uffff\1\44\1\45\1\35",
            "",
            "",
            "",
            "\1\61\2\uffff\1\50\1\uffff\1\52\6\uffff\1\57\1\60\1\51\2\uffff\1\62\1\uffff\1\53\1\54\1\56\1\55",
            "",
            "",
            "\1\61\2\uffff\1\63\1\15\1\52\6\uffff\1\57\1\60\1\51\2\uffff\1\62\1\17\1\53\1\54\1\56\1\55\2\uffff\1\16",
            "\1\61\2\uffff\1\63\1\15\1\52\6\uffff\1\57\1\60\1\51\2\uffff\1\62\1\17\1\53\1\54\1\56\1\55\2\uffff\1\16",
            "\1\61\2\uffff\1\63\1\15\1\52\6\uffff\1\57\1\60\1\51\2\uffff\1\62\1\17\1\53\1\54\1\56\1\55\2\uffff\1\16",
            "\1\64\1\70\1\71\1\63\1\65\1\52\6\uffff\1\57\1\60\1\51\2\uffff\1\62\1\36\1\53\1\54\1\56\1\55\1\66\1\67\1\35",
            "\1\61\2\uffff\1\63\1\uffff\1\52\6\uffff\1\57\1\60\1\51\2\uffff\1\62\1\uffff\1\53\1\54\1\56\1\55",
            "\11\102\1\101\1\77\1\100\1\uffff\1\72\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\74\4\uffff\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\101\1\77\1\100\1\uffff\1\72\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\74\4\uffff\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\uffff\1\77\1\100\1\uffff\1\72\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\74\4\uffff\1\75\1\76\1\73\13\uffff\1\33",
            "",
            "\11\40\1\uffff\1\70\1\71\1\112\1\103\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115\13\uffff\1\33",
            "\11\40\1\uffff\1\70\1\71\1\112\1\103\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115\13\uffff\1\33",
            "\11\40\1\uffff\1\70\1\71\1\112\1\103\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115\13\uffff\1\33",
            "\11\40\1\uffff\1\70\1\71\1\112\1\103\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115\13\uffff\1\33",
            "\1\70\1\71\1\uffff\1\65\15\uffff\1\36\4\uffff\1\66\1\67\1\35",
            "",
            "\1\40\1\uffff\1\40\5\uffff\1\40\1\130\1\70\1\71\1\123\1\65\1\120\3\uffff\1\40\1\uffff\1\40\1\126\1\127\1\117\2\uffff\1\131\1\36\1\121\1\122\1\125\1\124\1\66\1\67\1\35",
            "\1\130\1\70\1\71\1\123\1\65\1\120\6\uffff\1\126\1\127\1\117\2\uffff\1\131\1\36\1\121\1\122\1\125\1\124\1\66\1\67\1\35",
            "\1\130\1\70\1\71\1\123\1\65\1\120\6\uffff\1\126\1\127\1\117\2\uffff\1\131\1\36\1\121\1\122\1\125\1\124\1\66\1\67\1\35",
            "",
            "",
            "\1\40\1\uffff\1\40\5\uffff\1\40\1\130\1\70\1\71\1\123\1\65\1\133\3\uffff\1\40\1\uffff\1\40\1\126\1\127\1\132\2\uffff\1\131\1\36\1\121\1\122\1\125\1\124\1\66\1\67\1\35",
            "\11\102\1\130\1\141\1\142\1\123\1\134\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\136\1\121\1\122\1\125\1\124\1\137\1\140\1\135\13\uffff\1\33",
            "\1\130\1\70\1\71\1\123\1\65\1\133\6\uffff\1\126\1\127\1\132\2\uffff\1\131\1\36\1\121\1\122\1\125\1\124\1\66\1\67\1\35",
            "\1\70\1\71\1\112\1\143\1\107\6\uffff\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\70\1\71\1\112\1\143\1\107\6\uffff\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\70\1\71\1\112\1\143\1\107\6\uffff\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\70\1\71\1\112\1\143\1\107\6\uffff\1\104\1\105\1\106\3\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\164\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\173\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\173\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\61\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\61\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\174\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\61\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\61\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\174\1\141\1\142\1\63\1\134\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\136\1\53\1\54\1\56\1\55\1\137\1\140\1\135\13\uffff\1\33",
            "\1\130\1\70\1\71\1\123\1\65\1\120\6\uffff\1\126\1\127\1\117\2\uffff\1\131\1\36\1\121\1\122\1\125\1\124\1\66\1\67\1\35",
            "\1\70\1\71\1\112\1\143\15\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\70\1\71\1\112\1\143\15\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\70\1\71\1\112\1\143\15\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\70\1\71\1\112\1\143\15\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\1\70\1\71\1\uffff\1\65\15\uffff\1\36\4\uffff\1\66\1\67\1\35",
            "",
            "\1\40\1\uffff\1\40\5\uffff\1\40\1\uffff\1\70\1\71\1\112\1\143\4\uffff\1\40\1\uffff\1\40\6\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\11\40\1\uffff\1\u008a\1\u008b\1\uffff\1\40\1\uffff\1\25\1\40\1\37\1\40\1\uffff\1\40\13\uffff\1\u0088\1\u0089\14\uffff\1\33",
            "\11\40\1\uffff\1\u008a\1\u008b\1\uffff\1\40\1\uffff\1\25\1\40\1\37\1\40\1\uffff\1\40\13\uffff\1\u0088\1\u0089\14\uffff\1\33",
            "\11\40\1\uffff\1\u008a\1\u008b\1\uffff\1\40\1\uffff\1\25\1\40\1\37\1\40\1\uffff\1\40\13\uffff\1\u0088\1\u0089\14\uffff\1\33",
            "\11\40\1\uffff\1\u008a\1\u008b\1\uffff\1\40\1\uffff\1\25\1\40\1\37\1\40\1\uffff\1\40\13\uffff\1\u0088\1\u0089\14\uffff\1\33",
            "\11\102\1\uffff\1\u0091\1\u0092\1\uffff\1\u008c\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\u008e\4\uffff\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\uffff\1\u0091\1\u0092\1\uffff\1\u008c\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\u008e\4\uffff\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\uffff\1\u0091\1\u0092\1\uffff\1\u008c\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\u008e\4\uffff\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\uffff\1\u0091\1\u0092\1\uffff\1\u008c\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\u008e\4\uffff\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\uffff\1\u0091\1\u0092\1\uffff\1\u008c\1\uffff\1\25\1\102\1\37\1\102\1\uffff\1\102\6\uffff\1\u008e\4\uffff\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\1\70\1\71\1\112\1\143\15\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\70\1\71\1\112\1\143\15\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\11\102\1\u0093\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0093\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0099\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0099\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\130\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\130\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\130\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0093\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0093\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u009a\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\130\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0093\1\u0091\1\u0092\1\u0096\1\u009b\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0093\1\u0091\1\u0092\1\u0096\1\u009b\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00a5\1\141\1\142\1\u00a0\1\134\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\136\1\u009e\1\u009f\1\u00a2\1\u00a1\1\137\1\140\1\135\13\uffff\1\33",
            "\11\102\1\u00a5\1\141\1\142\1\u00a0\1\134\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\136\1\u009e\1\u009f\1\u00a2\1\u00a1\1\137\1\140\1\135\13\uffff\1\33",
            "\11\102\1\u00a5\1\141\1\142\1\u00a0\1\134\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\136\1\u009e\1\u009f\1\u00a2\1\u00a1\1\137\1\140\1\135\13\uffff\1\33",
            "\11\102\1\u0086\1\141\1\142\1\u00ac\1\u00a7\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\u00ad\1\137\1\140\1\u00a8\13\uffff\1\33",
            "\11\102\1\u0086\1\141\1\142\1\u00ac\1\u00a7\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\u00ad\1\137\1\140\1\u00a8\13\uffff\1\33",
            "\11\102\1\u0086\1\141\1\142\1\u00ac\1\u00a7\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\u00ad\1\137\1\140\1\u00a8\13\uffff\1\33",
            "\11\102\1\u0086\1\141\1\142\1\u00ac\1\u00a7\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\u00ad\1\137\1\140\1\u00a8\13\uffff\1\33",
            "\1\70\1\71\1\112\1\143\15\uffff\1\116\1\110\1\111\1\114\1\113\1\66\1\67\1\115",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ba\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ba\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00bb\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00bb\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\164\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\164\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\164\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ba\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ba\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00bc\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\164\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\172\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\174\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\174\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\174\1\77\1\100\1\63\1\72\1\167\1\25\1\102\1\37\1\102\1\uffff\1\102\1\170\1\171\1\166\2\uffff\1\62\1\74\1\53\1\54\1\56\1\55\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00bd\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00bd\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00be\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00be\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00bd\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00bd\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00bf\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u0086\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\40\4\uffff\1\40\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\26\uffff\1\33",
            "\11\40\4\uffff\1\40\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\26\uffff\1\33",
            "\11\40\4\uffff\1\40\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\26\uffff\1\33",
            "\11\40\4\uffff\1\40\1\107\1\25\1\40\1\37\1\40\1\uffff\1\40\1\104\1\105\1\106\26\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u009a\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0099\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u0099\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\130\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\130\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\130\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u009a\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u009a\1\u0091\1\u0092\1\u0096\1\u008c\1\120\1\25\1\102\1\37\1\102\1\uffff\1\102\1\126\1\127\1\117\2\uffff\1\131\1\u008e\1\u0094\1\u0095\1\u0098\1\u0097\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\11\102\1\u00e9\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00e9\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00ea\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00ea\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00a5\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00a5\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00a5\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00e9\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00e9\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00eb\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00a5\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0086\1\141\1\142\1\u00ac\1\u00a7\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\u00ad\1\137\1\140\1\u00a8\13\uffff\1\33",
            "\11\102\1\u0086\1\141\1\142\1\u00ac\1\u00a7\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\u00ad\1\137\1\140\1\u00a8\13\uffff\1\33",
            "\11\102\1\u0086\1\141\1\142\1\u00ac\1\u00a7\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\u00ad\1\137\1\140\1\u00a8\13\uffff\1\33",
            "\11\102\1\u00be\1\u00e2\1\u00e3\1\u0081\1\u00dd\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00df\1\177\1\u0080\1\u0083\1\u0082\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00be\1\u00e2\1\u00e3\1\u0081\1\u00dd\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00df\1\177\1\u0080\1\u0083\1\u0082\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0086\1\u00e2\1\u00e3\1\u0081\1\u00dd\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00df\1\177\1\u0080\1\u0083\1\u0082\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0086\1\u00e2\1\u00e3\1\u0081\1\u00dd\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00df\1\177\1\u0080\1\u0083\1\u0082\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0086\1\u00e2\1\u00e3\1\u0081\1\u00dd\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\u00df\1\177\1\u0080\1\u0083\1\u0082\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\1\u00ec\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ec\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ed\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ed\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ec\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ec\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ee\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00b8\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00bc\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00bc\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00bc\1\151\1\152\1\157\1\144\1\154\1\25\1\uffff\1\37\3\uffff\1\162\1\163\1\153\2\uffff\1\165\1\146\1\155\1\156\1\161\1\160\1\147\1\150\1\145\13\uffff\1\33",
            "\11\102\1\u00bf\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00bf\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00bf\1\77\1\100\1\u0081\1\72\1\176\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u0084\1\u0085\1\175\2\uffff\1\u0087\1\74\1\177\1\u0080\1\u0083\1\u0082\1\75\1\76\1\73\13\uffff\1\33",
            "\11\102\1\u00ef\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00ef\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00f0\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00f0\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00ef\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00ef\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00f1\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00c9\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f2\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f2\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f3\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f3\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f2\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f2\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f4\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00db\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00ea\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00ea\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00a5\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00a5\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00a5\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00eb\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00eb\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00eb\1\u00e2\1\u00e3\1\u00e6\1\u00dd\1\u009d\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00a3\1\u00a4\1\u009c\2\uffff\1\u00a6\1\u00df\1\u00e4\1\u00e5\1\u00e8\1\u00e7\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\1\u00ee\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ee\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\1\u00ee\1\151\1\152\1\u00b3\1\144\1\u00b0\1\25\1\uffff\1\37\3\uffff\1\u00b6\1\u00b7\1\u00af\2\uffff\1\u00b9\1\146\1\u00b1\1\u00b2\1\u00b5\1\u00b4\1\147\1\150\1\145\13\uffff\1\33",
            "\11\102\1\u00f1\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00f1\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\11\102\1\u00f1\1\u0091\1\u0092\1\u00c4\1\u008c\1\u00c1\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00c7\1\u00c8\1\u00c0\2\uffff\1\u00ca\1\u008e\1\u00c2\1\u00c3\1\u00c6\1\u00c5\1\u008f\1\u0090\1\u008d\13\uffff\1\33",
            "\1\u00f4\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f4\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\1\u00f4\1\u00d0\1\u00d1\1\u00d6\1\u00cb\1\u00d3\1\25\1\uffff\1\37\3\uffff\1\u00d9\1\u00da\1\u00d2\2\uffff\1\u00dc\1\u00cd\1\u00d4\1\u00d5\1\u00d8\1\u00d7\1\u00ce\1\u00cf\1\u00cc\13\uffff\1\33",
            "\11\102\1\u0100\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0100\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0101\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0101\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0100\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0100\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0102\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u00fe\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0102\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0102\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33",
            "\11\102\1\u0102\1\u00e2\1\u00e3\1\u00f9\1\u00dd\1\u00f6\1\25\1\102\1\37\1\102\1\uffff\1\102\1\u00fc\1\u00fd\1\u00f5\2\uffff\1\u00ff\1\u00df\1\u00f7\1\u00f8\1\u00fb\1\u00fa\1\u00e0\1\u00e1\1\u00de\13\uffff\1\33"
    };

    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final char[] dfa_33 = DFA.unpackEncodedStringToUnsignedChars(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[][] dfa_37 = unpackEncodedStringArray(dfa_37s);

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = dfa_31;
            this.eof = dfa_32;
            this.min = dfa_33;
            this.max = dfa_34;
            this.accept = dfa_35;
            this.special = dfa_36;
            this.transition = dfa_37;
        }
        public String getDescription() {
            return "2453:2: (this_Quote_0= ruleQuote | this_Brackets_1= ruleBrackets | this_Word_2= ruleWord | this_SymbolsX_3= ruleSymbolsX | this_IgnoredText_4= ruleIgnoredText | this_ShortCut_5= ruleShortCut | this_HashNumber_6= ruleHashNumber | this_UrlAdress_7= ruleUrlAdress | this_MailAdress_8= ruleMailAdress | this_Formula_9= ruleFormula | this_Array_10= ruleArray | this_ItWord_11= ruleItWord )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_40 = input.LA(1);

                         
                        int index51_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_40==RULE_DOT) ) {s = 100;}

                        else if ( (LA51_40==RULE_SEPARATORS_IT) ) {s = 101;}

                        else if ( (LA51_40==RULE_COLON) ) {s = 102;}

                        else if ( (LA51_40==RULE_SLASH) ) {s = 103;}

                        else if ( (LA51_40==RULE_SEPARATORS) ) {s = 104;}

                        else if ( (LA51_40==RULE_DASH) ) {s = 105;}

                        else if ( (LA51_40==RULE_MINUS) ) {s = 106;}

                        else if ( (LA51_40==RULE_ALL_ALPHA) ) {s = 107;}

                        else if ( (LA51_40==RULE_ALPHA) ) {s = 108;}

                        else if ( (LA51_40==RULE_IT_ID) ) {s = 109;}

                        else if ( (LA51_40==RULE_DOUBLE_DOT) ) {s = 110;}

                        else if ( (LA51_40==RULE_INT) ) {s = 111;}

                        else if ( (LA51_40==RULE_HEX_NUMBER) ) {s = 112;}

                        else if ( (LA51_40==RULE_ID_ALL) ) {s = 113;}

                        else if ( (LA51_40==RULE_ID) ) {s = 114;}

                        else if ( (LA51_40==RULE_ID_C) ) {s = 115;}

                        else if ( (LA51_40==RULE_MULTI) ) {s = 116;}

                        else if ( (LA51_40==RULE_CURL) ) {s = 117;}

                        else if ( (LA51_40==RULE_BR_O) ) {s = 21;}

                        else if ( (LA51_40==RULE_AT) ) {s = 27;}

                        else if ( (LA51_40==RULE_EXBR_O) ) {s = 31;}

                        else if ( (synpred75_InternalNaturalLang()) ) {s = 11;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index51_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_155 = input.LA(1);

                         
                        int index51_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_155==RULE_DOT) ) {s = 203;}

                        else if ( (LA51_155==RULE_SEPARATORS_IT) ) {s = 204;}

                        else if ( (LA51_155==RULE_COLON) ) {s = 205;}

                        else if ( (LA51_155==RULE_SLASH) ) {s = 206;}

                        else if ( (LA51_155==RULE_SEPARATORS) ) {s = 207;}

                        else if ( (LA51_155==RULE_DASH) ) {s = 208;}

                        else if ( (LA51_155==RULE_MINUS) ) {s = 209;}

                        else if ( (LA51_155==RULE_AT) ) {s = 27;}

                        else if ( (LA51_155==RULE_ALL_ALPHA) ) {s = 210;}

                        else if ( (LA51_155==RULE_ALPHA) ) {s = 211;}

                        else if ( (LA51_155==RULE_IT_ID) ) {s = 212;}

                        else if ( (LA51_155==RULE_DOUBLE_DOT) ) {s = 213;}

                        else if ( (LA51_155==RULE_INT) ) {s = 214;}

                        else if ( (LA51_155==RULE_HEX_NUMBER) ) {s = 215;}

                        else if ( (LA51_155==RULE_ID_ALL) ) {s = 216;}

                        else if ( (LA51_155==RULE_ID) ) {s = 217;}

                        else if ( (LA51_155==RULE_ID_C) ) {s = 218;}

                        else if ( (LA51_155==RULE_MULTI) ) {s = 219;}

                        else if ( (LA51_155==RULE_CURL) ) {s = 220;}

                        else if ( (LA51_155==RULE_BR_O) ) {s = 21;}

                        else if ( (LA51_155==RULE_EXBR_O) ) {s = 31;}

                        else if ( (synpred74_InternalNaturalLang()) ) {s = 9;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index51_155);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_38s = "\40\uffff";
    static final String dfa_39s = "\1\uffff\1\3\3\uffff\2\4\4\uffff\12\4\1\uffff\7\4\1\uffff\2\4";
    static final String dfa_40s = "\1\15\1\4\3\uffff\5\4\1\0\12\4\1\0\7\4\1\uffff\2\4";
    static final String dfa_41s = "\1\62\1\54\3\uffff\2\62\1\42\2\46\1\0\12\62\1\0\7\62\1\uffff\2\62";
    static final String dfa_42s = "\2\uffff\1\1\1\2\1\3\30\uffff\1\4\2\uffff";
    static final String dfa_43s = "\12\uffff\1\0\12\uffff\1\1\12\uffff}>";
    static final String[] dfa_44s = {
            "\1\4\1\uffff\1\3\1\1\3\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\5\1\6\6\4\1\uffff\1\2\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\6\4",
            "\11\3\1\uffff\2\2\1\uffff\1\7\2\uffff\1\3\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\3\3\uffff\1\3",
            "",
            "",
            "",
            "\14\4\1\uffff\1\10\1\uffff\4\4\1\uffff\1\4\6\uffff\1\4\4\uffff\3\4\13\uffff\1\4",
            "\14\4\1\uffff\1\11\1\uffff\4\4\1\uffff\1\4\6\uffff\1\4\4\uffff\3\4\13\uffff\1\4",
            "\1\3\1\uffff\1\3\5\uffff\1\3\3\uffff\1\12\1\uffff\1\2\3\uffff\1\3\1\uffff\1\3\1\uffff\2\2\4\uffff\1\2\1\uffff\1\2",
            "\1\4\1\uffff\1\4\5\uffff\4\4\1\16\1\4\1\14\3\uffff\1\4\1\uffff\2\4\1\20\1\13\2\uffff\2\4\1\15\1\4\1\17\4\4",
            "\1\4\1\uffff\1\4\5\uffff\4\4\1\16\1\4\1\22\3\uffff\1\4\1\uffff\2\4\1\20\1\21\2\uffff\2\4\1\15\1\4\1\17\4\4",
            "\1\uffff",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\26\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\26\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\14\4\1\32\1\4\1\30\4\4\1\uffff\2\4\1\34\1\27\2\uffff\2\4\1\31\1\4\1\33\4\4\13\uffff\1\4",
            "\14\4\1\32\1\4\1\30\4\4\1\uffff\2\4\1\34\1\27\2\uffff\2\4\1\31\1\4\1\33\4\4\13\uffff\1\4",
            "\1\uffff",
            "\14\4\1\32\1\4\1\37\4\4\1\uffff\2\4\1\34\1\36\2\uffff\2\4\1\31\1\4\1\33\4\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\23\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "",
            "\10\4\1\25\2\4\1\24\1\4\1\26\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4",
            "\10\4\1\25\2\4\1\24\1\4\1\26\5\4\1\uffff\4\4\2\uffff\11\4\13\uffff\1\4"
    };

    static final short[] dfa_38 = DFA.unpackEncodedString(dfa_38s);
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final char[] dfa_40 = DFA.unpackEncodedStringToUnsignedChars(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[][] dfa_44 = unpackEncodedStringArray(dfa_44s);

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = dfa_38;
            this.eof = dfa_39;
            this.min = dfa_40;
            this.max = dfa_41;
            this.accept = dfa_42;
            this.special = dfa_43;
            this.transition = dfa_44;
        }
        public String getDescription() {
            return "2711:2: (this_SimpleUnit_0= ruleSimpleUnit | this_Unit_1= ruleUnit | this_NoNElement_2= ruleNoNElement | this_ChapterAlpha_3= ruleChapterAlpha )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalNaturalLang()) ) {s = 2;}

                        else if ( (synpred84_InternalNaturalLang()) ) {s = 3;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA54_21 = input.LA(1);

                         
                        int index54_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalNaturalLang()) ) {s = 4;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index54_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_45s = "\6\uffff";
    static final String dfa_46s = "\2\4\1\0\1\uffff\1\4\1\uffff";
    static final String dfa_47s = "\2\62\1\0\1\uffff\1\46\1\uffff";
    static final String dfa_48s = "\3\uffff\1\1\1\uffff\1\2";
    static final String dfa_49s = "\2\uffff\1\0\3\uffff}>";
    static final String[] dfa_50s = {
            "\1\2\1\uffff\1\5\2\uffff\2\5\1\uffff\1\1\4\3\1\4\2\3\1\5\1\3\1\uffff\1\3\1\uffff\11\3\1\uffff\11\3\1\uffff\6\3",
            "\1\2\1\uffff\1\5\5\uffff\1\1\7\3\1\uffff\1\3\1\uffff\1\3\1\uffff\11\3\1\uffff\11\3\1\uffff\6\3",
            "\1\uffff",
            "",
            "\1\5\1\uffff\1\5\5\uffff\1\5\1\3\2\uffff\3\3\6\uffff\3\3\2\uffff\6\3\2\uffff\1\3",
            ""
    };

    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final char[] dfa_47 = DFA.unpackEncodedStringToUnsignedChars(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final short[][] dfa_50 = unpackEncodedStringArray(dfa_50s);

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = dfa_45;
            this.eof = dfa_45;
            this.min = dfa_46;
            this.max = dfa_47;
            this.accept = dfa_48;
            this.special = dfa_49;
            this.transition = dfa_50;
        }
        public String getDescription() {
            return "2908:3: ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_2 = input.LA(1);

                         
                        int index58_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalNaturalLang()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index58_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_51s = "\1\4\1\uffff\3\4\1\0\1\uffff";
    static final String dfa_52s = "\1\24\1\uffff\3\62\1\0\1\uffff";
    static final String dfa_53s = "\1\uffff\1\2\4\uffff\1\1";
    static final String dfa_54s = "\5\uffff\1\0\1\uffff}>";
    static final String[] dfa_55s = {
            "\1\1\1\uffff\1\1\2\uffff\1\3\1\2\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1",
            "",
            "\1\5\1\uffff\1\1\5\uffff\1\4\7\6\1\uffff\1\6\1\uffff\1\6\1\uffff\11\6\1\uffff\11\6\1\uffff\6\6",
            "\1\5\1\uffff\1\1\5\uffff\1\4\7\6\1\uffff\1\6\1\uffff\1\6\1\uffff\11\6\1\uffff\11\6\1\uffff\6\6",
            "\1\5\1\uffff\1\1\5\uffff\1\4\7\6\1\uffff\1\6\1\uffff\1\6\1\uffff\11\6\1\uffff\11\6\1\uffff\6\6",
            "\1\uffff",
            ""
    };
    static final char[] dfa_51 = DFA.unpackEncodedStringToUnsignedChars(dfa_51s);
    static final char[] dfa_52 = DFA.unpackEncodedStringToUnsignedChars(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[][] dfa_55 = unpackEncodedStringArray(dfa_55s);

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "()* loopback of 2928:4: ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_5 = input.LA(1);

                         
                        int index57_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalNaturalLang()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_56s = "\16\uffff";
    static final String dfa_57s = "\1\uffff\3\11\1\uffff\4\11\5\uffff";
    static final String dfa_58s = "\1\22\3\4\1\uffff\4\4\5\uffff";
    static final String dfa_59s = "\1\33\3\62\1\uffff\4\62\5\uffff";
    static final String dfa_60s = "\4\uffff\1\2\4\uffff\1\1\4\2";
    static final String dfa_61s = "\1\2\4\uffff\1\0\1\4\1\1\1\3\5\uffff}>";
    static final String[] dfa_62s = {
            "\1\4\6\uffff\1\1\1\2\1\3",
            "\11\11\1\uffff\1\7\1\10\1\uffff\1\11\1\uffff\4\11\1\uffff\1\11\13\uffff\1\5\1\6\14\uffff\1\11",
            "\11\11\1\uffff\1\7\1\10\1\uffff\1\11\1\uffff\4\11\1\uffff\1\11\13\uffff\1\5\1\6\14\uffff\1\11",
            "\11\11\1\uffff\1\7\1\10\1\uffff\1\11\1\uffff\4\11\1\uffff\1\11\13\uffff\1\5\1\6\14\uffff\1\11",
            "",
            "\11\11\4\uffff\1\11\1\15\4\11\1\uffff\1\11\1\12\1\13\1\14\26\uffff\1\11",
            "\11\11\4\uffff\1\11\1\15\4\11\1\uffff\1\11\1\12\1\13\1\14\26\uffff\1\11",
            "\11\11\4\uffff\1\11\1\15\4\11\1\uffff\1\11\1\12\1\13\1\14\26\uffff\1\11",
            "\11\11\4\uffff\1\11\1\15\4\11\1\uffff\1\11\1\12\1\13\1\14\26\uffff\1\11",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final char[] dfa_58 = DFA.unpackEncodedStringToUnsignedChars(dfa_58s);
    static final char[] dfa_59 = DFA.unpackEncodedStringToUnsignedChars(dfa_59s);
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final short[][] dfa_62 = unpackEncodedStringArray(dfa_62s);

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = dfa_56;
            this.eof = dfa_57;
            this.min = dfa_58;
            this.max = dfa_59;
            this.accept = dfa_60;
            this.special = dfa_61;
            this.transition = dfa_62;
        }
        public String getDescription() {
            return "3492:3: ( ( (lv_word_0_0= ruleFragmentX ) ) | ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_5 = input.LA(1);

                         
                        int index75_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA75_5==EOF||(LA75_5>=RULE_NEWLINE && LA75_5<=RULE_SPACE)||LA75_5==RULE_DOT||(LA75_5>=RULE_BR_O && LA75_5<=RULE_EXBR_CL)||LA75_5==RULE_EXBRC_CL||LA75_5==RULE_AT) ) {s = 9;}

                        else if ( (LA75_5==RULE_ID) && (synpred116_InternalNaturalLang())) {s = 10;}

                        else if ( (LA75_5==RULE_ID_C) && (synpred116_InternalNaturalLang())) {s = 11;}

                        else if ( (LA75_5==RULE_ALL_ALPHA) && (synpred116_InternalNaturalLang())) {s = 12;}

                        else if ( (LA75_5==RULE_ALPHA) && (synpred116_InternalNaturalLang())) {s = 13;}

                         
                        input.seek(index75_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA75_7 = input.LA(1);

                         
                        int index75_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA75_7==EOF||(LA75_7>=RULE_NEWLINE && LA75_7<=RULE_SPACE)||LA75_7==RULE_DOT||(LA75_7>=RULE_BR_O && LA75_7<=RULE_EXBR_CL)||LA75_7==RULE_EXBRC_CL||LA75_7==RULE_AT) ) {s = 9;}

                        else if ( (LA75_7==RULE_ID) && (synpred116_InternalNaturalLang())) {s = 10;}

                        else if ( (LA75_7==RULE_ID_C) && (synpred116_InternalNaturalLang())) {s = 11;}

                        else if ( (LA75_7==RULE_ALL_ALPHA) && (synpred116_InternalNaturalLang())) {s = 12;}

                        else if ( (LA75_7==RULE_ALPHA) && (synpred116_InternalNaturalLang())) {s = 13;}

                         
                        input.seek(index75_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA75_0 = input.LA(1);

                         
                        int index75_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA75_0==RULE_ID) ) {s = 1;}

                        else if ( (LA75_0==RULE_ID_C) ) {s = 2;}

                        else if ( (LA75_0==RULE_ALL_ALPHA) ) {s = 3;}

                        else if ( (LA75_0==RULE_ALPHA) && (synpred116_InternalNaturalLang())) {s = 4;}

                         
                        input.seek(index75_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA75_8 = input.LA(1);

                         
                        int index75_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA75_8==EOF||(LA75_8>=RULE_NEWLINE && LA75_8<=RULE_SPACE)||LA75_8==RULE_DOT||(LA75_8>=RULE_BR_O && LA75_8<=RULE_EXBR_CL)||LA75_8==RULE_EXBRC_CL||LA75_8==RULE_AT) ) {s = 9;}

                        else if ( (LA75_8==RULE_ID) && (synpred116_InternalNaturalLang())) {s = 10;}

                        else if ( (LA75_8==RULE_ID_C) && (synpred116_InternalNaturalLang())) {s = 11;}

                        else if ( (LA75_8==RULE_ALL_ALPHA) && (synpred116_InternalNaturalLang())) {s = 12;}

                        else if ( (LA75_8==RULE_ALPHA) && (synpred116_InternalNaturalLang())) {s = 13;}

                         
                        input.seek(index75_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA75_6==EOF||(LA75_6>=RULE_NEWLINE && LA75_6<=RULE_SPACE)||LA75_6==RULE_DOT||(LA75_6>=RULE_BR_O && LA75_6<=RULE_EXBR_CL)||LA75_6==RULE_EXBRC_CL||LA75_6==RULE_AT) ) {s = 9;}

                        else if ( (LA75_6==RULE_ID) && (synpred116_InternalNaturalLang())) {s = 10;}

                        else if ( (LA75_6==RULE_ID_C) && (synpred116_InternalNaturalLang())) {s = 11;}

                        else if ( (LA75_6==RULE_ALL_ALPHA) && (synpred116_InternalNaturalLang())) {s = 12;}

                        else if ( (LA75_6==RULE_ALPHA) && (synpred116_InternalNaturalLang())) {s = 13;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_63s = "\43\uffff";
    static final String dfa_64s = "\3\uffff\2\1\2\uffff\11\1\20\uffff\3\1";
    static final String dfa_65s = "\1\15\1\uffff\1\15\2\4\1\15\1\uffff\11\4\20\0\3\4";
    static final String dfa_66s = "\1\46\1\uffff\1\46\2\62\1\46\1\uffff\11\62\20\0\3\62";
    static final String dfa_67s = "\1\uffff\1\1\4\uffff\1\2\34\uffff";
    static final String dfa_68s = "\20\uffff\1\2\1\17\1\6\1\15\1\13\1\11\1\14\1\5\1\7\1\10\1\1\1\4\1\0\1\16\1\3\1\12\3\uffff}>";
    static final String[] dfa_69s = {
            "\1\2\3\uffff\1\1\1\6\6\uffff\2\6\1\5\4\1\1\3\1\4\4\uffff\1\1",
            "",
            "\1\7\2\6\1\1\1\6\1\1\6\uffff\3\1\2\uffff\1\1\1\6\4\1\3\6",
            "\11\1\1\6\2\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\13\uffff\1\1",
            "\11\1\1\6\2\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\13\uffff\1\1",
            "\3\6\1\uffff\1\6\15\uffff\1\10\4\uffff\3\6",
            "",
            "\12\1\1\16\1\17\1\1\1\11\5\1\1\uffff\4\1\2\uffff\1\1\1\13\4\1\1\14\1\15\1\12\13\uffff\1\1",
            "\11\1\1\6\1\16\1\17\1\6\1\11\1\6\4\1\1\uffff\1\1\3\6\2\uffff\1\6\1\13\4\6\1\14\1\15\1\12\13\uffff\1\1",
            "\11\1\1\31\1\16\1\17\1\24\1\11\1\21\4\1\1\uffff\1\1\1\27\1\30\1\20\2\uffff\1\32\1\13\1\22\1\23\1\26\1\25\1\14\1\15\1\12\13\uffff\1\1",
            "\11\1\1\31\1\16\1\17\1\24\1\11\1\21\4\1\1\uffff\1\1\1\27\1\30\1\20\2\uffff\1\32\1\13\1\22\1\23\1\26\1\25\1\14\1\15\1\12\13\uffff\1\1",
            "\11\1\1\31\1\16\1\17\1\24\1\11\1\21\4\1\1\uffff\1\1\1\27\1\30\1\20\2\uffff\1\32\1\13\1\22\1\23\1\26\1\25\1\14\1\15\1\12\13\uffff\1\1",
            "\12\1\1\16\1\17\1\35\1\40\5\1\1\uffff\4\1\2\uffff\1\1\1\42\1\33\1\34\1\37\1\36\1\14\1\15\1\41\13\uffff\1\1",
            "\12\1\1\16\1\17\1\35\1\40\5\1\1\uffff\4\1\2\uffff\1\1\1\42\1\33\1\34\1\37\1\36\1\14\1\15\1\41\13\uffff\1\1",
            "\12\1\1\16\1\17\1\35\1\40\5\1\1\uffff\4\1\2\uffff\1\1\1\42\1\33\1\34\1\37\1\36\1\14\1\15\1\41\13\uffff\1\1",
            "\12\1\1\16\1\17\1\35\1\40\5\1\1\uffff\4\1\2\uffff\1\1\1\42\1\33\1\34\1\37\1\36\1\14\1\15\1\41\13\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\12\1\1\16\1\17\1\35\1\40\5\1\1\uffff\4\1\2\uffff\1\1\1\42\1\33\1\34\1\37\1\36\1\14\1\15\1\41\13\uffff\1\1",
            "\12\1\1\16\1\17\1\35\1\40\5\1\1\uffff\4\1\2\uffff\1\1\1\42\1\33\1\34\1\37\1\36\1\14\1\15\1\41\13\uffff\1\1",
            "\12\1\1\16\1\17\1\35\1\40\5\1\1\uffff\4\1\2\uffff\1\1\1\42\1\33\1\34\1\37\1\36\1\14\1\15\1\41\13\uffff\1\1"
    };

    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final char[] dfa_65 = DFA.unpackEncodedStringToUnsignedChars(dfa_65s);
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[][] dfa_69 = unpackEncodedStringArray(dfa_69s);

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = dfa_63;
            this.eof = dfa_64;
            this.min = dfa_65;
            this.max = dfa_66;
            this.accept = dfa_67;
            this.special = dfa_68;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "3857:3: ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) | ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_28 = input.LA(1);

                         
                        int index94_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA94_26 = input.LA(1);

                         
                        int index94_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_26);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA94_16 = input.LA(1);

                         
                        int index94_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA94_30 = input.LA(1);

                         
                        int index94_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_30);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA94_27 = input.LA(1);

                         
                        int index94_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_27);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA94_23 = input.LA(1);

                         
                        int index94_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_23);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA94_18 = input.LA(1);

                         
                        int index94_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA94_24 = input.LA(1);

                         
                        int index94_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_24);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA94_25 = input.LA(1);

                         
                        int index94_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA94_21 = input.LA(1);

                         
                        int index94_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA94_31 = input.LA(1);

                         
                        int index94_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_31);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA94_20 = input.LA(1);

                         
                        int index94_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA94_22 = input.LA(1);

                         
                        int index94_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA94_19 = input.LA(1);

                         
                        int index94_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA94_29 = input.LA(1);

                         
                        int index94_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_29);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA94_17 = input.LA(1);

                         
                        int index94_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalNaturalLang()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index94_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_70s = "\12\uffff";
    static final String dfa_71s = "\10\10\2\uffff";
    static final String dfa_72s = "\10\4\2\uffff";
    static final String dfa_73s = "\10\62\2\uffff";
    static final String dfa_74s = "\10\uffff\1\2\1\1";
    static final String dfa_75s = "\12\uffff}>";
    static final String[] dfa_76s = {
            "\11\10\1\uffff\1\6\1\7\1\uffff\1\1\1\uffff\4\10\1\uffff\1\10\6\uffff\1\3\4\uffff\1\4\1\5\1\2\13\uffff\1\10",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\4\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2\13\uffff\1\10",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\4\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2\13\uffff\1\10",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\4\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2\13\uffff\1\10",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\4\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2\13\uffff\1\10",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\4\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2\13\uffff\1\10",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\4\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2\13\uffff\1\10",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\4\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2\13\uffff\1\10",
            "",
            ""
    };

    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final char[] dfa_72 = DFA.unpackEncodedStringToUnsignedChars(dfa_72s);
    static final char[] dfa_73 = DFA.unpackEncodedStringToUnsignedChars(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final short[] dfa_75 = DFA.unpackEncodedString(dfa_75s);
    static final short[][] dfa_76 = unpackEncodedStringArray(dfa_76s);

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = dfa_70;
            this.eof = dfa_71;
            this.min = dfa_72;
            this.max = dfa_73;
            this.accept = dfa_74;
            this.special = dfa_75;
            this.transition = dfa_76;
        }
        public String getDescription() {
            return "()* loopback of 4063:5: ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )*";
        }
    }
    static final String dfa_77s = "\13\uffff";
    static final String dfa_78s = "\1\16\3\15\2\uffff\5\0";
    static final String dfa_79s = "\4\46\2\uffff\5\0";
    static final String dfa_80s = "\4\uffff\1\2\1\1\5\uffff";
    static final String dfa_81s = "\6\uffff\1\0\1\1\1\3\1\4\1\2}>";
    static final String[] dfa_82s = {
            "\2\4\1\uffff\1\1\15\uffff\1\3\4\uffff\2\4\1\2",
            "\1\5\2\4\1\10\1\1\1\5\6\uffff\3\5\2\uffff\1\5\1\3\1\6\1\7\1\12\1\11\2\4\1\2",
            "\1\5\2\4\1\10\1\1\1\5\6\uffff\3\5\2\uffff\1\5\1\3\1\6\1\7\1\12\1\11\2\4\1\2",
            "\1\5\2\4\1\10\1\1\1\5\6\uffff\3\5\2\uffff\1\5\1\3\1\6\1\7\1\12\1\11\2\4\1\2",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final char[] dfa_78 = DFA.unpackEncodedStringToUnsignedChars(dfa_78s);
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final short[] dfa_80 = DFA.unpackEncodedString(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final short[][] dfa_82 = unpackEncodedStringArray(dfa_82s);

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = dfa_77;
            this.eof = dfa_77;
            this.min = dfa_78;
            this.max = dfa_79;
            this.accept = dfa_80;
            this.special = dfa_81;
            this.transition = dfa_82;
        }
        public String getDescription() {
            return "4151:5: ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_6 = input.LA(1);

                         
                        int index91_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalNaturalLang()) ) {s = 5;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA91_7 = input.LA(1);

                         
                        int index91_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalNaturalLang()) ) {s = 5;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA91_10 = input.LA(1);

                         
                        int index91_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalNaturalLang()) ) {s = 5;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA91_8 = input.LA(1);

                         
                        int index91_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalNaturalLang()) ) {s = 5;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA91_9 = input.LA(1);

                         
                        int index91_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalNaturalLang()) ) {s = 5;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = dfa_70;
            this.eof = dfa_71;
            this.min = dfa_72;
            this.max = dfa_73;
            this.accept = dfa_74;
            this.special = dfa_75;
            this.transition = dfa_76;
        }
        public String getDescription() {
            return "()* loopback of 4234:5: ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )*";
        }
    }
    static final String dfa_83s = "\21\uffff";
    static final String dfa_84s = "\1\1\3\uffff\2\6\1\uffff\1\14\11\uffff";
    static final String dfa_85s = "\1\4\1\uffff\2\15\2\4\1\uffff\1\4\1\15\5\uffff\2\0\1\uffff";
    static final String dfa_86s = "\1\62\1\uffff\2\15\2\62\1\uffff\1\62\1\15\5\uffff\2\0\1\uffff";
    static final String dfa_87s = "\1\uffff\1\10\4\uffff\1\3\2\uffff\1\5\1\7\1\1\1\4\1\2\2\uffff\1\6";
    static final String dfa_88s = "\2\uffff\1\0\1\2\4\uffff\1\3\5\uffff\1\1\1\4\1\uffff}>";
    static final String[] dfa_89s = {
            "\11\1\1\11\2\1\1\6\1\1\1\3\4\1\1\uffff\1\1\1\7\1\10\1\2\2\uffff\1\12\1\1\1\4\1\5\2\6\3\1\13\uffff\1\1",
            "",
            "\1\11",
            "\1\11",
            "\11\6\1\16\11\6\1\uffff\4\6\2\uffff\11\6\13\uffff\1\6",
            "\11\6\1\16\11\6\1\uffff\4\6\2\uffff\11\6\13\uffff\1\6",
            "",
            "\11\14\1\17\11\14\1\uffff\4\14\2\uffff\11\14\13\uffff\1\14",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_83 = DFA.unpackEncodedString(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = dfa_83;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "()+ loopback of 4532:2: (this_ALL_ALPHA_0= RULE_ALL_ALPHA | this_ALPHA_1= RULE_ALPHA | ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX ) | this_Fragment_3= ruleFragment | this_Asterisk_4= ruleAsterisk | this_ID_C_5= RULE_ID_C | this_CURL_6= RULE_CURL )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_2 = input.LA(1);

                         
                        int index102_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA102_2==RULE_MULTI) ) {s = 9;}

                        else if ( (synpred153_InternalNaturalLang()) ) {s = 11;}

                        else if ( (synpred157_InternalNaturalLang()) ) {s = 12;}

                         
                        input.seek(index102_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA102_14 = input.LA(1);

                         
                        int index102_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred156_InternalNaturalLang()) ) {s = 6;}

                        else if ( (synpred158_InternalNaturalLang()) ) {s = 9;}

                         
                        input.seek(index102_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA102_3 = input.LA(1);

                         
                        int index102_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA102_3==RULE_MULTI) ) {s = 9;}

                        else if ( (synpred154_InternalNaturalLang()) ) {s = 13;}

                        else if ( (synpred157_InternalNaturalLang()) ) {s = 12;}

                         
                        input.seek(index102_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA102_8 = input.LA(1);

                         
                        int index102_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA102_8==RULE_MULTI) ) {s = 9;}

                        else if ( (synpred157_InternalNaturalLang()) ) {s = 12;}

                        else if ( (synpred159_InternalNaturalLang()) ) {s = 16;}

                         
                        input.seek(index102_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA102_15 = input.LA(1);

                         
                        int index102_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_InternalNaturalLang()) ) {s = 12;}

                        else if ( (synpred158_InternalNaturalLang()) ) {s = 9;}

                         
                        input.seek(index102_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_90s = "\1\1\11\uffff";
    static final String dfa_91s = "\1\4\1\uffff\1\4\6\0\1\uffff";
    static final String dfa_92s = "\1\62\1\uffff\1\46\6\0\1\uffff";
    static final String dfa_93s = "\1\uffff\1\2\7\uffff\1\1";
    static final String dfa_94s = "\3\uffff\1\4\1\5\1\1\1\0\1\3\1\2\1\uffff}>";
    static final String[] dfa_95s = {
            "\15\1\1\2\20\1\1\uffff\11\1\1\uffff\6\1",
            "",
            "\1\1\1\uffff\1\1\5\uffff\2\1\2\uffff\1\6\1\1\1\4\3\uffff\1\1\1\uffff\2\1\1\10\1\3\2\uffff\2\1\1\5\1\1\1\7\1\1\2\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final char[] dfa_91 = DFA.unpackEncodedStringToUnsignedChars(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[][] dfa_95 = unpackEncodedStringArray(dfa_95s);

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_70;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "()+ loopback of 6257:3: (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_InternalNaturalLang()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_5 = input.LA(1);

                         
                        int index125_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_InternalNaturalLang()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index125_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_8 = input.LA(1);

                         
                        int index125_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_InternalNaturalLang()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index125_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA125_7 = input.LA(1);

                         
                        int index125_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_InternalNaturalLang()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index125_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_InternalNaturalLang()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA125_4 = input.LA(1);

                         
                        int index125_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_InternalNaturalLang()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index125_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_96s = "\10\46\2\uffff";
    static final String[] dfa_97s = {
            "\11\10\1\uffff\1\6\1\7\1\uffff\1\1\2\uffff\1\10\1\uffff\1\10\1\uffff\1\10\6\uffff\1\3\4\uffff\1\4\1\5\1\2",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2",
            "\11\10\1\11\1\6\1\7\1\11\1\1\1\11\1\uffff\1\10\1\uffff\1\10\1\uffff\1\10\3\11\2\uffff\1\11\1\3\4\11\1\4\1\5\1\2",
            "",
            ""
    };
    static final char[] dfa_96 = DFA.unpackEncodedStringToUnsignedChars(dfa_96s);
    static final short[][] dfa_97 = unpackEncodedStringArray(dfa_97s);

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = dfa_70;
            this.eof = dfa_71;
            this.min = dfa_72;
            this.max = dfa_96;
            this.accept = dfa_74;
            this.special = dfa_75;
            this.transition = dfa_97;
        }
        public String getDescription() {
            return "()* loopback of 6401:3: ( ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) ) )*";
        }
    }
    static final String dfa_98s = "\17\uffff";
    static final String dfa_99s = "\1\15\1\uffff\4\15\4\16\1\uffff\4\16";
    static final String dfa_100s = "\1\46\1\uffff\3\62\1\46\4\62\1\uffff\4\46";
    static final String dfa_101s = "\1\uffff\1\1\10\uffff\1\2\4\uffff";
    static final String dfa_102s = "\17\uffff}>";
    static final String[] dfa_103s = {
            "\1\1\3\uffff\1\1\1\5\6\uffff\1\3\1\4\1\2\6\1\4\uffff\1\1",
            "",
            "\1\1\1\10\1\11\1\uffff\1\1\15\uffff\1\1\4\uffff\1\6\1\7\1\1\13\uffff\1\12",
            "\1\1\1\10\1\11\1\uffff\1\1\15\uffff\1\1\4\uffff\1\6\1\7\1\1\13\uffff\1\12",
            "\1\1\1\10\1\11\1\uffff\1\1\15\uffff\1\1\4\uffff\1\6\1\7\1\1\13\uffff\1\12",
            "\1\1\1\15\1\16\1\uffff\1\1\15\uffff\1\1\4\uffff\1\13\1\14\1\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1\13\uffff\1\12",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1\13\uffff\1\12",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1\13\uffff\1\12",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1\13\uffff\1\12",
            "",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1"
    };

    static final short[] dfa_98 = DFA.unpackEncodedString(dfa_98s);
    static final char[] dfa_99 = DFA.unpackEncodedStringToUnsignedChars(dfa_99s);
    static final char[] dfa_100 = DFA.unpackEncodedStringToUnsignedChars(dfa_100s);
    static final short[] dfa_101 = DFA.unpackEncodedString(dfa_101s);
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final short[][] dfa_103 = unpackEncodedStringArray(dfa_103s);

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = dfa_98;
            this.eof = dfa_98;
            this.min = dfa_99;
            this.max = dfa_100;
            this.accept = dfa_101;
            this.special = dfa_102;
            this.transition = dfa_103;
        }
        public String getDescription() {
            return "6565:3: ( ( (lv_email_0_0= ruleItWord ) ) | ( (lv_email_1_0= ruleWord ) ) )";
        }
    }
    static final String dfa_104s = "\1\46\1\uffff\10\46\1\uffff\4\46";
    static final String[] dfa_105s = {
            "\1\1\3\uffff\1\1\1\5\6\uffff\1\3\1\4\1\2\6\1\4\uffff\1\1",
            "",
            "\1\1\1\10\1\11\1\uffff\1\1\1\uffff\1\12\13\uffff\1\1\4\uffff\1\6\1\7\1\1",
            "\1\1\1\10\1\11\1\uffff\1\1\1\uffff\1\12\13\uffff\1\1\4\uffff\1\6\1\7\1\1",
            "\1\1\1\10\1\11\1\uffff\1\1\1\uffff\1\12\13\uffff\1\1\4\uffff\1\6\1\7\1\1",
            "\1\1\1\15\1\16\1\uffff\1\1\15\uffff\1\1\4\uffff\1\13\1\14\1\1",
            "\4\1\2\12\5\uffff\3\12\3\uffff\10\1",
            "\4\1\2\12\5\uffff\3\12\3\uffff\10\1",
            "\4\1\2\12\5\uffff\3\12\3\uffff\10\1",
            "\4\1\2\12\5\uffff\3\12\3\uffff\10\1",
            "",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1"
    };
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[][] dfa_105 = unpackEncodedStringArray(dfa_105s);

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = dfa_98;
            this.eof = dfa_98;
            this.min = dfa_99;
            this.max = dfa_104;
            this.accept = dfa_101;
            this.special = dfa_102;
            this.transition = dfa_105;
        }
        public String getDescription() {
            return "6695:3: ( ( (lv_name_1_0= ruleItWord ) ) | ( (lv_name_2_0= ruleWord ) ) )";
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = dfa_98;
            this.eof = dfa_98;
            this.min = dfa_99;
            this.max = dfa_104;
            this.accept = dfa_101;
            this.special = dfa_102;
            this.transition = dfa_105;
        }
        public String getDescription() {
            return "6760:4: ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) )";
        }
    }
    static final String[] dfa_106s = {
            "\1\1\3\uffff\1\1\1\5\6\uffff\1\3\1\4\1\2\6\1\4\uffff\1\1",
            "",
            "\1\1\1\10\1\11\1\uffff\1\1\3\uffff\1\12\11\uffff\1\1\4\uffff\1\6\1\7\1\1",
            "\1\1\1\10\1\11\1\uffff\1\1\3\uffff\1\12\11\uffff\1\1\4\uffff\1\6\1\7\1\1",
            "\1\1\1\10\1\11\1\uffff\1\1\3\uffff\1\12\11\uffff\1\1\4\uffff\1\6\1\7\1\1",
            "\1\1\1\15\1\16\1\uffff\1\1\15\uffff\1\1\4\uffff\1\13\1\14\1\1",
            "\4\1\1\12\2\uffff\1\12\3\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\2\uffff\1\12\3\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\2\uffff\1\12\3\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\2\uffff\1\12\3\uffff\3\12\3\uffff\10\1",
            "",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1",
            "\4\1\1\12\6\uffff\3\12\3\uffff\10\1"
    };
    static final short[][] dfa_106 = unpackEncodedStringArray(dfa_106s);

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = dfa_98;
            this.eof = dfa_98;
            this.min = dfa_99;
            this.max = dfa_104;
            this.accept = dfa_101;
            this.special = dfa_102;
            this.transition = dfa_106;
        }
        public String getDescription() {
            return "6849:3: ( ( (lv_name_0_0= ruleItWord ) ) | ( (lv_name_1_0= ruleWord ) ) )";
        }
    }
 

    
    protected static class FollowSets000 {
        public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
        public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
        public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0007EED3FEAFF092L});
        public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0007EED3FEAFF0B0L});
        public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000012L});
        public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0007EED3FEAFE002L});
        public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000040L});
        public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0007EED3FEAE2000L});
        public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0007EFFBFEAFF190L});
        public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0007EED3FEAFF190L});
        public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000010L});
        public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000202L});
        public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0007EFFBFEAFE000L});
        public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000610L});
        public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000E10L});
        public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000802L});
        public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0007EFFBFEAFF010L});
        public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0007EED3FEAE2010L});
        public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000001012L});
        public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000001000L});
        public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000001010L});
        public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0007EEDBFEAFB000L});
        public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0007EEDBFEAFA000L});
        public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000001002L});
        public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000020200L});
        public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0007EFFBFEBFF650L});
        public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000121650L});
        public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000001050L});
        public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0007EFFBFEFFF610L});
        public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000521600L});
        public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000401000L});
        public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000400000L});
        public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0007EFFBFFBFF610L});
        public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000001121600L});
        public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000001001000L});
        public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000001000000L});
        public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x000000300000C002L});
        public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x000000300000C000L});
        public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x000000000E040000L});
        public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000002002L});
        public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000002000L});
        public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000004FFE072000L});
        public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x000000708002C002L});
        public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000080000000L});
        public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000007FFE07E000L});
        public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x000000708002C000L});
        public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000007F8003C000L});
        public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000004FFE072002L});
        public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000018000L});
        public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000010022000002L});
        public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000020000L});
        public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x000000050C050000L});
        public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000029000L});
        public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000008040000L});
        public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x000000508000C000L});
        public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000010000L});
        public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x000010508000C002L});
        public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000100000000000L});
        public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000020002L});
        public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000502000000L});
        public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0004000000000000L});
        public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x00000043FE062000L});
        public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000080000L});
        public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000200000L});
        public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000200002L});
        public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000120602L});
    }


}

@SuppressWarnings("all")
abstract class InternalNaturalLangParser2 extends InternalNaturalLangParser1 {

        InternalNaturalLangParser2(TokenStream input) {
            this(input, new RecognizerSharedState());
        }

        InternalNaturalLangParser2(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }

    // $ANTLR start "entryRuleModel"
    // InternalNaturalLang.g:70:1: entryRuleModel returns [EObject current=null] : iv_ruleModel= ruleModel EOF ;
    public final EObject entryRuleModel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleModel = null;


        try {
            // InternalNaturalLang.g:70:46: (iv_ruleModel= ruleModel EOF )
            // InternalNaturalLang.g:71:2: iv_ruleModel= ruleModel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModelRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleModel=ruleModel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModel; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleModel"


    // $ANTLR start "ruleModel"
    // InternalNaturalLang.g:77:1: ruleModel returns [EObject current=null] : ( (lv_sentences_0_0= ruleSentenceType ) )* ;
    public final EObject ruleModel() throws RecognitionException {
        EObject current = null;

        EObject lv_sentences_0_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:83:2: ( ( (lv_sentences_0_0= ruleSentenceType ) )* )
            // InternalNaturalLang.g:84:2: ( (lv_sentences_0_0= ruleSentenceType ) )*
            {
            // InternalNaturalLang.g:84:2: ( (lv_sentences_0_0= ruleSentenceType ) )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==RULE_NEWLINE||LA1_0==RULE_TABLE_LINE||(LA1_0>=RULE_SPACE && LA1_0<=RULE_BR_O)||LA1_0==RULE_EXBR_O||LA1_0==RULE_EXBRC_O||(LA1_0>=RULE_ID && LA1_0<=RULE_DOUBLE_DOT)||LA1_0==RULE_SLASH||(LA1_0>=RULE_SEPARATORS_IT && LA1_0<=RULE_STRING)||(LA1_0>=RULE_PARAGR && LA1_0<=RULE_IGNORED)||(LA1_0>=RULE_OPERATORS && LA1_0<=RULE_AT)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // InternalNaturalLang.g:85:3: (lv_sentences_0_0= ruleSentenceType )
            	    {
            	    // InternalNaturalLang.g:85:3: (lv_sentences_0_0= ruleSentenceType )
            	    // InternalNaturalLang.g:86:4: lv_sentences_0_0= ruleSentenceType
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getModelAccess().getSentencesSentenceTypeParserRuleCall_0());
            	      			
            	    }
            	    pushFollow(FollowSets000.FOLLOW_3);
            	    lv_sentences_0_0=ruleSentenceType();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				if (current==null) {
            	      					current = createModelElementForParent(grammarAccess.getModelRule());
            	      				}
            	      				add(
            	      					current,
            	      					"sentences",
            	      					lv_sentences_0_0,
            	      					"org.xixum.nlx.naturalLang.SentenceType");
            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleModel"


    // $ANTLR start "entryRuleSentenceType"
    // InternalNaturalLang.g:106:1: entryRuleSentenceType returns [EObject current=null] : iv_ruleSentenceType= ruleSentenceType EOF ;
    public final EObject entryRuleSentenceType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSentenceType = null;


        try {
            // InternalNaturalLang.g:106:53: (iv_ruleSentenceType= ruleSentenceType EOF )
            // InternalNaturalLang.g:107:2: iv_ruleSentenceType= ruleSentenceType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSentenceTypeRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSentenceType=ruleSentenceType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSentenceType; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSentenceType"


    // $ANTLR start "ruleSentenceType"
    // InternalNaturalLang.g:113:1: ruleSentenceType returns [EObject current=null] : ( ( ruleWhitespace )? ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) | this_ParagraphBlock_2= ruleParagraphBlock | this_Table_3= ruleTable ) ( (lv_pEnd_4_0= ruleParagraph ) ) ) ;
    public final EObject ruleSentenceType() throws RecognitionException {
        EObject current = null;

        EObject this_ChapterSentence_1 = null;

        EObject this_ParagraphBlock_2 = null;

        EObject this_Table_3 = null;

        AntlrDatatypeRuleToken lv_pEnd_4_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:119:2: ( ( ( ruleWhitespace )? ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) | this_ParagraphBlock_2= ruleParagraphBlock | this_Table_3= ruleTable ) ( (lv_pEnd_4_0= ruleParagraph ) ) ) )
            // InternalNaturalLang.g:120:2: ( ( ruleWhitespace )? ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) | this_ParagraphBlock_2= ruleParagraphBlock | this_Table_3= ruleTable ) ( (lv_pEnd_4_0= ruleParagraph ) ) )
            {
            // InternalNaturalLang.g:120:2: ( ( ruleWhitespace )? ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) | this_ParagraphBlock_2= ruleParagraphBlock | this_Table_3= ruleTable ) ( (lv_pEnd_4_0= ruleParagraph ) ) )
            // InternalNaturalLang.g:121:3: ( ruleWhitespace )? ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) | this_ParagraphBlock_2= ruleParagraphBlock | this_Table_3= ruleTable ) ( (lv_pEnd_4_0= ruleParagraph ) )
            {
            // InternalNaturalLang.g:121:3: ( ruleWhitespace )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==RULE_NEWLINE||LA2_0==RULE_SPACE) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // InternalNaturalLang.g:122:4: ruleWhitespace
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSentenceTypeAccess().getWhitespaceParserRuleCall_0());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_4);
                    ruleWhitespace();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalNaturalLang.g:133:3: ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) | this_ParagraphBlock_2= ruleParagraphBlock | this_Table_3= ruleTable )
            int alt3=3;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // InternalNaturalLang.g:134:4: ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence )
                    {
                    // InternalNaturalLang.g:134:4: ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence )
                    // InternalNaturalLang.g:135:5: ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSentenceTypeAccess().getChapterSentenceParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FollowSets000.FOLLOW_4);
                    this_ChapterSentence_1=ruleChapterSentence();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ChapterSentence_1;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:149:4: this_ParagraphBlock_2= ruleParagraphBlock
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSentenceTypeAccess().getParagraphBlockParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_4);
                    this_ParagraphBlock_2=ruleParagraphBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ParagraphBlock_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:161:4: this_Table_3= ruleTable
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSentenceTypeAccess().getTableParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_4);
                    this_Table_3=ruleTable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Table_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalNaturalLang.g:173:3: ( (lv_pEnd_4_0= ruleParagraph ) )
            // InternalNaturalLang.g:174:4: (lv_pEnd_4_0= ruleParagraph )
            {
            // InternalNaturalLang.g:174:4: (lv_pEnd_4_0= ruleParagraph )
            // InternalNaturalLang.g:175:5: lv_pEnd_4_0= ruleParagraph
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSentenceTypeAccess().getPEndParagraphParserRuleCall_2_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_pEnd_4_0=ruleParagraph();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSentenceTypeRule());
              					}
              					set(
              						current,
              						"pEnd",
              						lv_pEnd_4_0,
              						"org.xixum.nlx.naturalLang.Paragraph");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSentenceType"


    // $ANTLR start "entryRuleParagraph"
    // InternalNaturalLang.g:196:1: entryRuleParagraph returns [String current=null] : iv_ruleParagraph= ruleParagraph EOF ;
    public final String entryRuleParagraph() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleParagraph = null;


        try {
            // InternalNaturalLang.g:196:49: (iv_ruleParagraph= ruleParagraph EOF )
            // InternalNaturalLang.g:197:2: iv_ruleParagraph= ruleParagraph EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParagraphRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleParagraph=ruleParagraph();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParagraph.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParagraph"


    // $ANTLR start "ruleParagraph"
    // InternalNaturalLang.g:203:1: ruleParagraph returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (this_NEWLINE_0= RULE_NEWLINE )+ | this_END_1= RULE_END ) ;
    public final AntlrDatatypeRuleToken ruleParagraph() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_NEWLINE_0=null;
        Token this_END_1=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:209:2: ( ( (this_NEWLINE_0= RULE_NEWLINE )+ | this_END_1= RULE_END ) )
            // InternalNaturalLang.g:210:2: ( (this_NEWLINE_0= RULE_NEWLINE )+ | this_END_1= RULE_END )
            {
            // InternalNaturalLang.g:210:2: ( (this_NEWLINE_0= RULE_NEWLINE )+ | this_END_1= RULE_END )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==RULE_NEWLINE) ) {
                alt5=1;
            }
            else if ( (LA5_0==RULE_END) ) {
                alt5=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // InternalNaturalLang.g:211:3: (this_NEWLINE_0= RULE_NEWLINE )+
                    {
                    // InternalNaturalLang.g:211:3: (this_NEWLINE_0= RULE_NEWLINE )+
                    int cnt4=0;
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( (LA4_0==RULE_NEWLINE) ) {
                            int LA4_2 = input.LA(2);

                            if ( (synpred6_InternalNaturalLang()) ) {
                                alt4=1;
                            }


                        }


                        switch (alt4) {
                    	case 1 :
                    	    // InternalNaturalLang.g:212:4: this_NEWLINE_0= RULE_NEWLINE
                    	    {
                    	    this_NEWLINE_0=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      				current.merge(this_NEWLINE_0);
                    	      			
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      				newLeafNode(this_NEWLINE_0, grammarAccess.getParagraphAccess().getNEWLINETerminalRuleCall_0());
                    	      			
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt4 >= 1 ) break loop4;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(4, input);
                                throw eee;
                        }
                        cnt4++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:221:3: this_END_1= RULE_END
                    {
                    this_END_1=(Token)match(input,RULE_END,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_END_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_END_1, grammarAccess.getParagraphAccess().getENDTerminalRuleCall_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParagraph"


    // $ANTLR start "entryRuleParagraphBlock"
    // InternalNaturalLang.g:232:1: entryRuleParagraphBlock returns [EObject current=null] : iv_ruleParagraphBlock= ruleParagraphBlock EOF ;
    public final EObject entryRuleParagraphBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParagraphBlock = null;


        try {
            // InternalNaturalLang.g:232:55: (iv_ruleParagraphBlock= ruleParagraphBlock EOF )
            // InternalNaturalLang.g:233:2: iv_ruleParagraphBlock= ruleParagraphBlock EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParagraphBlockRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleParagraphBlock=ruleParagraphBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParagraphBlock; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParagraphBlock"


    // $ANTLR start "ruleParagraphBlock"
    // InternalNaturalLang.g:239:1: ruleParagraphBlock returns [EObject current=null] : ( (lv_block_0_0= ruleBlockElement ) )+ ;
    public final EObject ruleParagraphBlock() throws RecognitionException {
        EObject current = null;

        EObject lv_block_0_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:245:2: ( ( (lv_block_0_0= ruleBlockElement ) )+ )
            // InternalNaturalLang.g:246:2: ( (lv_block_0_0= ruleBlockElement ) )+
            {
            // InternalNaturalLang.g:246:2: ( (lv_block_0_0= ruleBlockElement ) )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( ((LA6_0>=RULE_MULTI && LA6_0<=RULE_BR_O)||LA6_0==RULE_EXBR_O||LA6_0==RULE_EXBRC_O||(LA6_0>=RULE_ID && LA6_0<=RULE_DOUBLE_DOT)||LA6_0==RULE_SLASH||(LA6_0>=RULE_SEPARATORS_IT && LA6_0<=RULE_STRING)||(LA6_0>=RULE_PARAGR && LA6_0<=RULE_IGNORED)||(LA6_0>=RULE_OPERATORS && LA6_0<=RULE_AT)) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // InternalNaturalLang.g:247:3: (lv_block_0_0= ruleBlockElement )
            	    {
            	    // InternalNaturalLang.g:247:3: (lv_block_0_0= ruleBlockElement )
            	    // InternalNaturalLang.g:248:4: lv_block_0_0= ruleBlockElement
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getParagraphBlockAccess().getBlockBlockElementParserRuleCall_0());
            	      			
            	    }
            	    pushFollow(FollowSets000.FOLLOW_6);
            	    lv_block_0_0=ruleBlockElement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				if (current==null) {
            	      					current = createModelElementForParent(grammarAccess.getParagraphBlockRule());
            	      				}
            	      				add(
            	      					current,
            	      					"block",
            	      					lv_block_0_0,
            	      					"org.xixum.nlx.naturalLang.BlockElement");
            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParagraphBlock"


    // $ANTLR start "entryRuleBlockElement"
    // InternalNaturalLang.g:268:1: entryRuleBlockElement returns [EObject current=null] : iv_ruleBlockElement= ruleBlockElement EOF ;
    public final EObject entryRuleBlockElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBlockElement = null;


        try {
            // InternalNaturalLang.g:268:53: (iv_ruleBlockElement= ruleBlockElement EOF )
            // InternalNaturalLang.g:269:2: iv_ruleBlockElement= ruleBlockElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockElementRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleBlockElement=ruleBlockElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlockElement; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBlockElement"


    // $ANTLR start "ruleBlockElement"
    // InternalNaturalLang.g:275:1: ruleBlockElement returns [EObject current=null] : (this_SentenceChain_0= ruleSentenceChain | this_IgnoredText_1= ruleIgnoredText | this_FootNote_2= ruleFootNote | ( ( ruleListSentence )=>this_ListSentence_3= ruleListSentence ) ) ;
    public final EObject ruleBlockElement() throws RecognitionException {
        EObject current = null;

        EObject this_SentenceChain_0 = null;

        EObject this_IgnoredText_1 = null;

        EObject this_FootNote_2 = null;

        EObject this_ListSentence_3 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:281:2: ( (this_SentenceChain_0= ruleSentenceChain | this_IgnoredText_1= ruleIgnoredText | this_FootNote_2= ruleFootNote | ( ( ruleListSentence )=>this_ListSentence_3= ruleListSentence ) ) )
            // InternalNaturalLang.g:282:2: (this_SentenceChain_0= ruleSentenceChain | this_IgnoredText_1= ruleIgnoredText | this_FootNote_2= ruleFootNote | ( ( ruleListSentence )=>this_ListSentence_3= ruleListSentence ) )
            {
            // InternalNaturalLang.g:282:2: (this_SentenceChain_0= ruleSentenceChain | this_IgnoredText_1= ruleIgnoredText | this_FootNote_2= ruleFootNote | ( ( ruleListSentence )=>this_ListSentence_3= ruleListSentence ) )
            int alt7=4;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // InternalNaturalLang.g:283:3: this_SentenceChain_0= ruleSentenceChain
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBlockElementAccess().getSentenceChainParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_SentenceChain_0=ruleSentenceChain();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SentenceChain_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:295:3: this_IgnoredText_1= ruleIgnoredText
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBlockElementAccess().getIgnoredTextParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_IgnoredText_1=ruleIgnoredText();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IgnoredText_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:307:3: this_FootNote_2= ruleFootNote
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBlockElementAccess().getFootNoteParserRuleCall_2());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_FootNote_2=ruleFootNote();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FootNote_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:319:3: ( ( ruleListSentence )=>this_ListSentence_3= ruleListSentence )
                    {
                    // InternalNaturalLang.g:319:3: ( ( ruleListSentence )=>this_ListSentence_3= ruleListSentence )
                    // InternalNaturalLang.g:320:4: ( ruleListSentence )=>this_ListSentence_3= ruleListSentence
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getBlockElementAccess().getListSentenceParserRuleCall_3());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ListSentence_3=ruleListSentence();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ListSentence_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBlockElement"


    // $ANTLR start "entryRuleFootNote"
    // InternalNaturalLang.g:337:1: entryRuleFootNote returns [EObject current=null] : iv_ruleFootNote= ruleFootNote EOF ;
    public final EObject entryRuleFootNote() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFootNote = null;


        try {
            // InternalNaturalLang.g:337:49: (iv_ruleFootNote= ruleFootNote EOF )
            // InternalNaturalLang.g:338:2: iv_ruleFootNote= ruleFootNote EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFootNoteRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleFootNote=ruleFootNote();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFootNote; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFootNote"


    // $ANTLR start "ruleFootNote"
    // InternalNaturalLang.g:344:1: ruleFootNote returns [EObject current=null] : ( ( (lv_number_0_0= rulesimpleNum ) ) this_BR_CL_1= RULE_BR_CL ( (lv_SentenceChain_2_0= ruleSentenceChain ) ) ) ;
    public final EObject ruleFootNote() throws RecognitionException {
        EObject current = null;

        Token this_BR_CL_1=null;
        AntlrDatatypeRuleToken lv_number_0_0 = null;

        EObject lv_SentenceChain_2_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:350:2: ( ( ( (lv_number_0_0= rulesimpleNum ) ) this_BR_CL_1= RULE_BR_CL ( (lv_SentenceChain_2_0= ruleSentenceChain ) ) ) )
            // InternalNaturalLang.g:351:2: ( ( (lv_number_0_0= rulesimpleNum ) ) this_BR_CL_1= RULE_BR_CL ( (lv_SentenceChain_2_0= ruleSentenceChain ) ) )
            {
            // InternalNaturalLang.g:351:2: ( ( (lv_number_0_0= rulesimpleNum ) ) this_BR_CL_1= RULE_BR_CL ( (lv_SentenceChain_2_0= ruleSentenceChain ) ) )
            // InternalNaturalLang.g:352:3: ( (lv_number_0_0= rulesimpleNum ) ) this_BR_CL_1= RULE_BR_CL ( (lv_SentenceChain_2_0= ruleSentenceChain ) )
            {
            // InternalNaturalLang.g:352:3: ( (lv_number_0_0= rulesimpleNum ) )
            // InternalNaturalLang.g:353:4: (lv_number_0_0= rulesimpleNum )
            {
            // InternalNaturalLang.g:353:4: (lv_number_0_0= rulesimpleNum )
            // InternalNaturalLang.g:354:5: lv_number_0_0= rulesimpleNum
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFootNoteAccess().getNumberSimpleNumParserRuleCall_0_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_7);
            lv_number_0_0=rulesimpleNum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFootNoteRule());
              					}
              					set(
              						current,
              						"number",
              						lv_number_0_0,
              						"org.xixum.nlx.naturalLang.simpleNum");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_BR_CL_1=(Token)match(input,RULE_BR_CL,FollowSets000.FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BR_CL_1, grammarAccess.getFootNoteAccess().getBR_CLTerminalRuleCall_1());
              		
            }
            // InternalNaturalLang.g:375:3: ( (lv_SentenceChain_2_0= ruleSentenceChain ) )
            // InternalNaturalLang.g:376:4: (lv_SentenceChain_2_0= ruleSentenceChain )
            {
            // InternalNaturalLang.g:376:4: (lv_SentenceChain_2_0= ruleSentenceChain )
            // InternalNaturalLang.g:377:5: lv_SentenceChain_2_0= ruleSentenceChain
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFootNoteAccess().getSentenceChainSentenceChainParserRuleCall_2_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_SentenceChain_2_0=ruleSentenceChain();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFootNoteRule());
              					}
              					set(
              						current,
              						"SentenceChain",
              						lv_SentenceChain_2_0,
              						"org.xixum.nlx.naturalLang.SentenceChain");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFootNote"


    // $ANTLR start "entryRuleTableLine"
    // InternalNaturalLang.g:398:1: entryRuleTableLine returns [EObject current=null] : iv_ruleTableLine= ruleTableLine EOF ;
    public final EObject entryRuleTableLine() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableLine = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:400:2: (iv_ruleTableLine= ruleTableLine EOF )
            // InternalNaturalLang.g:401:2: iv_ruleTableLine= ruleTableLine EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableLineRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleTableLine=ruleTableLine();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableLine; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleTableLine"


    // $ANTLR start "ruleTableLine"
    // InternalNaturalLang.g:410:1: ruleTableLine returns [EObject current=null] : ( (lv_content_0_0= RULE_TABLE_LINE ) ) ;
    public final EObject ruleTableLine() throws RecognitionException {
        EObject current = null;

        Token lv_content_0_0=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:417:2: ( ( (lv_content_0_0= RULE_TABLE_LINE ) ) )
            // InternalNaturalLang.g:418:2: ( (lv_content_0_0= RULE_TABLE_LINE ) )
            {
            // InternalNaturalLang.g:418:2: ( (lv_content_0_0= RULE_TABLE_LINE ) )
            // InternalNaturalLang.g:419:3: (lv_content_0_0= RULE_TABLE_LINE )
            {
            // InternalNaturalLang.g:419:3: (lv_content_0_0= RULE_TABLE_LINE )
            // InternalNaturalLang.g:420:4: lv_content_0_0= RULE_TABLE_LINE
            {
            lv_content_0_0=(Token)match(input,RULE_TABLE_LINE,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_content_0_0, grammarAccess.getTableLineAccess().getContentTABLE_LINETerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTableLineRule());
              				}
              				setWithLastConsumed(
              					current,
              					"content",
              					lv_content_0_0,
              					"org.xixum.nlx.naturalLang.TABLE_LINE");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleTableLine"


    // $ANTLR start "entryRuleTableBorder"
    // InternalNaturalLang.g:442:1: entryRuleTableBorder returns [EObject current=null] : iv_ruleTableBorder= ruleTableBorder EOF ;
    public final EObject entryRuleTableBorder() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableBorder = null;


        try {
            // InternalNaturalLang.g:442:52: (iv_ruleTableBorder= ruleTableBorder EOF )
            // InternalNaturalLang.g:443:2: iv_ruleTableBorder= ruleTableBorder EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableBorderRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleTableBorder=ruleTableBorder();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableBorder; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableBorder"


    // $ANTLR start "ruleTableBorder"
    // InternalNaturalLang.g:449:1: ruleTableBorder returns [EObject current=null] : (this_TableColumnSeparator_0= ruleTableColumnSeparator | this_TableLine_1= ruleTableLine ) ;
    public final EObject ruleTableBorder() throws RecognitionException {
        EObject current = null;

        EObject this_TableColumnSeparator_0 = null;

        EObject this_TableLine_1 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:455:2: ( (this_TableColumnSeparator_0= ruleTableColumnSeparator | this_TableLine_1= ruleTableLine ) )
            // InternalNaturalLang.g:456:2: (this_TableColumnSeparator_0= ruleTableColumnSeparator | this_TableLine_1= ruleTableLine )
            {
            // InternalNaturalLang.g:456:2: (this_TableColumnSeparator_0= ruleTableColumnSeparator | this_TableLine_1= ruleTableLine )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==RULE_HORIZ_SEP) ) {
                alt8=1;
            }
            else if ( (LA8_0==RULE_TABLE_LINE) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // InternalNaturalLang.g:457:3: this_TableColumnSeparator_0= ruleTableColumnSeparator
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTableBorderAccess().getTableColumnSeparatorParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_TableColumnSeparator_0=ruleTableColumnSeparator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TableColumnSeparator_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:469:3: this_TableLine_1= ruleTableLine
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTableBorderAccess().getTableLineParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_TableLine_1=ruleTableLine();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TableLine_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableBorder"


    // $ANTLR start "entryRuleTableRow"
    // InternalNaturalLang.g:484:1: entryRuleTableRow returns [EObject current=null] : iv_ruleTableRow= ruleTableRow EOF ;
    public final EObject entryRuleTableRow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableRow = null;


        try {
            // InternalNaturalLang.g:484:49: (iv_ruleTableRow= ruleTableRow EOF )
            // InternalNaturalLang.g:485:2: iv_ruleTableRow= ruleTableRow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableRowRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleTableRow=ruleTableRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableRow; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableRow"


    // $ANTLR start "ruleTableRow"
    // InternalNaturalLang.g:491:1: ruleTableRow returns [EObject current=null] : ( () ( (lv_content_1_0= ruleTableBorder ) ) ( (lv_content_2_0= ruleLineSentenceChain ) )? ( ( (lv_content_3_0= ruleTableBorder ) ) ( (lv_content_4_0= ruleLineSentenceChain ) )? )* ( (lv_content_5_0= ruleTableBorder ) ) ) ;
    public final EObject ruleTableRow() throws RecognitionException {
        EObject current = null;

        EObject lv_content_1_0 = null;

        EObject lv_content_2_0 = null;

        EObject lv_content_3_0 = null;

        EObject lv_content_4_0 = null;

        EObject lv_content_5_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:497:2: ( ( () ( (lv_content_1_0= ruleTableBorder ) ) ( (lv_content_2_0= ruleLineSentenceChain ) )? ( ( (lv_content_3_0= ruleTableBorder ) ) ( (lv_content_4_0= ruleLineSentenceChain ) )? )* ( (lv_content_5_0= ruleTableBorder ) ) ) )
            // InternalNaturalLang.g:498:2: ( () ( (lv_content_1_0= ruleTableBorder ) ) ( (lv_content_2_0= ruleLineSentenceChain ) )? ( ( (lv_content_3_0= ruleTableBorder ) ) ( (lv_content_4_0= ruleLineSentenceChain ) )? )* ( (lv_content_5_0= ruleTableBorder ) ) )
            {
            // InternalNaturalLang.g:498:2: ( () ( (lv_content_1_0= ruleTableBorder ) ) ( (lv_content_2_0= ruleLineSentenceChain ) )? ( ( (lv_content_3_0= ruleTableBorder ) ) ( (lv_content_4_0= ruleLineSentenceChain ) )? )* ( (lv_content_5_0= ruleTableBorder ) ) )
            // InternalNaturalLang.g:499:3: () ( (lv_content_1_0= ruleTableBorder ) ) ( (lv_content_2_0= ruleLineSentenceChain ) )? ( ( (lv_content_3_0= ruleTableBorder ) ) ( (lv_content_4_0= ruleLineSentenceChain ) )? )* ( (lv_content_5_0= ruleTableBorder ) )
            {
            // InternalNaturalLang.g:499:3: ()
            // InternalNaturalLang.g:500:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTableRowAccess().getTableRowAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:509:3: ( (lv_content_1_0= ruleTableBorder ) )
            // InternalNaturalLang.g:510:4: (lv_content_1_0= ruleTableBorder )
            {
            // InternalNaturalLang.g:510:4: (lv_content_1_0= ruleTableBorder )
            // InternalNaturalLang.g:511:5: lv_content_1_0= ruleTableBorder
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTableRowAccess().getContentTableBorderParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_9);
            lv_content_1_0=ruleTableBorder();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTableRowRule());
              					}
              					add(
              						current,
              						"content",
              						lv_content_1_0,
              						"org.xixum.nlx.naturalLang.TableBorder");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:528:3: ( (lv_content_2_0= ruleLineSentenceChain ) )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=RULE_MULTI && LA9_0<=RULE_BR_O)||LA9_0==RULE_EXBR_O||LA9_0==RULE_EXBRC_O||(LA9_0>=RULE_ID && LA9_0<=RULE_DOUBLE_DOT)||(LA9_0>=RULE_HEX_NUMBER && LA9_0<=RULE_IGNORED)||(LA9_0>=RULE_OPERATORS && LA9_0<=RULE_AT)) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // InternalNaturalLang.g:529:4: (lv_content_2_0= ruleLineSentenceChain )
                    {
                    // InternalNaturalLang.g:529:4: (lv_content_2_0= ruleLineSentenceChain )
                    // InternalNaturalLang.g:530:5: lv_content_2_0= ruleLineSentenceChain
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableRowAccess().getContentLineSentenceChainParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FollowSets000.FOLLOW_10);
                    lv_content_2_0=ruleLineSentenceChain();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableRowRule());
                      					}
                      					add(
                      						current,
                      						"content",
                      						lv_content_2_0,
                      						"org.xixum.nlx.naturalLang.LineSentenceChain");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:547:3: ( ( (lv_content_3_0= ruleTableBorder ) ) ( (lv_content_4_0= ruleLineSentenceChain ) )? )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==RULE_HORIZ_SEP) ) {
                    int LA11_1 = input.LA(2);

                    if ( ((LA11_1>=RULE_TABLE_LINE && LA11_1<=RULE_HORIZ_SEP)||(LA11_1>=RULE_MULTI && LA11_1<=RULE_BR_O)||LA11_1==RULE_EXBR_O||LA11_1==RULE_EXBRC_O||(LA11_1>=RULE_ID && LA11_1<=RULE_DOUBLE_DOT)||(LA11_1>=RULE_HEX_NUMBER && LA11_1<=RULE_IGNORED)||(LA11_1>=RULE_OPERATORS && LA11_1<=RULE_AT)) ) {
                        alt11=1;
                    }


                }
                else if ( (LA11_0==RULE_TABLE_LINE) ) {
                    int LA11_2 = input.LA(2);

                    if ( ((LA11_2>=RULE_TABLE_LINE && LA11_2<=RULE_HORIZ_SEP)||(LA11_2>=RULE_MULTI && LA11_2<=RULE_BR_O)||LA11_2==RULE_EXBR_O||LA11_2==RULE_EXBRC_O||(LA11_2>=RULE_ID && LA11_2<=RULE_DOUBLE_DOT)||(LA11_2>=RULE_HEX_NUMBER && LA11_2<=RULE_IGNORED)||(LA11_2>=RULE_OPERATORS && LA11_2<=RULE_AT)) ) {
                        alt11=1;
                    }


                }


                switch (alt11) {
            	case 1 :
            	    // InternalNaturalLang.g:548:4: ( (lv_content_3_0= ruleTableBorder ) ) ( (lv_content_4_0= ruleLineSentenceChain ) )?
            	    {
            	    // InternalNaturalLang.g:548:4: ( (lv_content_3_0= ruleTableBorder ) )
            	    // InternalNaturalLang.g:549:5: (lv_content_3_0= ruleTableBorder )
            	    {
            	    // InternalNaturalLang.g:549:5: (lv_content_3_0= ruleTableBorder )
            	    // InternalNaturalLang.g:550:6: lv_content_3_0= ruleTableBorder
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTableRowAccess().getContentTableBorderParserRuleCall_3_0_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_9);
            	    lv_content_3_0=ruleTableBorder();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTableRowRule());
            	      						}
            	      						add(
            	      							current,
            	      							"content",
            	      							lv_content_3_0,
            	      							"org.xixum.nlx.naturalLang.TableBorder");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:567:4: ( (lv_content_4_0= ruleLineSentenceChain ) )?
            	    int alt10=2;
            	    int LA10_0 = input.LA(1);

            	    if ( ((LA10_0>=RULE_MULTI && LA10_0<=RULE_BR_O)||LA10_0==RULE_EXBR_O||LA10_0==RULE_EXBRC_O||(LA10_0>=RULE_ID && LA10_0<=RULE_DOUBLE_DOT)||(LA10_0>=RULE_HEX_NUMBER && LA10_0<=RULE_IGNORED)||(LA10_0>=RULE_OPERATORS && LA10_0<=RULE_AT)) ) {
            	        alt10=1;
            	    }
            	    switch (alt10) {
            	        case 1 :
            	            // InternalNaturalLang.g:568:5: (lv_content_4_0= ruleLineSentenceChain )
            	            {
            	            // InternalNaturalLang.g:568:5: (lv_content_4_0= ruleLineSentenceChain )
            	            // InternalNaturalLang.g:569:6: lv_content_4_0= ruleLineSentenceChain
            	            {
            	            if ( state.backtracking==0 ) {

            	              						newCompositeNode(grammarAccess.getTableRowAccess().getContentLineSentenceChainParserRuleCall_3_1_0());
            	              					
            	            }
            	            pushFollow(FollowSets000.FOLLOW_10);
            	            lv_content_4_0=ruleLineSentenceChain();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						if (current==null) {
            	              							current = createModelElementForParent(grammarAccess.getTableRowRule());
            	              						}
            	              						add(
            	              							current,
            	              							"content",
            	              							lv_content_4_0,
            	              							"org.xixum.nlx.naturalLang.LineSentenceChain");
            	              						afterParserOrEnumRuleCall();
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // InternalNaturalLang.g:587:3: ( (lv_content_5_0= ruleTableBorder ) )
            // InternalNaturalLang.g:588:4: (lv_content_5_0= ruleTableBorder )
            {
            // InternalNaturalLang.g:588:4: (lv_content_5_0= ruleTableBorder )
            // InternalNaturalLang.g:589:5: lv_content_5_0= ruleTableBorder
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTableRowAccess().getContentTableBorderParserRuleCall_4_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_content_5_0=ruleTableBorder();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTableRowRule());
              					}
              					add(
              						current,
              						"content",
              						lv_content_5_0,
              						"org.xixum.nlx.naturalLang.TableBorder");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableRow"


    // $ANTLR start "entryRuleTableColumnSeparator"
    // InternalNaturalLang.g:610:1: entryRuleTableColumnSeparator returns [EObject current=null] : iv_ruleTableColumnSeparator= ruleTableColumnSeparator EOF ;
    public final EObject entryRuleTableColumnSeparator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableColumnSeparator = null;


        try {
            // InternalNaturalLang.g:610:61: (iv_ruleTableColumnSeparator= ruleTableColumnSeparator EOF )
            // InternalNaturalLang.g:611:2: iv_ruleTableColumnSeparator= ruleTableColumnSeparator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableColumnSeparatorRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleTableColumnSeparator=ruleTableColumnSeparator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableColumnSeparator; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableColumnSeparator"


    // $ANTLR start "ruleTableColumnSeparator"
    // InternalNaturalLang.g:617:1: ruleTableColumnSeparator returns [EObject current=null] : ( (lv_char_0_0= RULE_HORIZ_SEP ) ) ;
    public final EObject ruleTableColumnSeparator() throws RecognitionException {
        EObject current = null;

        Token lv_char_0_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:623:2: ( ( (lv_char_0_0= RULE_HORIZ_SEP ) ) )
            // InternalNaturalLang.g:624:2: ( (lv_char_0_0= RULE_HORIZ_SEP ) )
            {
            // InternalNaturalLang.g:624:2: ( (lv_char_0_0= RULE_HORIZ_SEP ) )
            // InternalNaturalLang.g:625:3: (lv_char_0_0= RULE_HORIZ_SEP )
            {
            // InternalNaturalLang.g:625:3: (lv_char_0_0= RULE_HORIZ_SEP )
            // InternalNaturalLang.g:626:4: lv_char_0_0= RULE_HORIZ_SEP
            {
            lv_char_0_0=(Token)match(input,RULE_HORIZ_SEP,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_char_0_0, grammarAccess.getTableColumnSeparatorAccess().getCharHORIZ_SEPTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTableColumnSeparatorRule());
              				}
              				setWithLastConsumed(
              					current,
              					"char",
              					lv_char_0_0,
              					"org.xixum.nlx.naturalLang.HORIZ_SEP");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableColumnSeparator"


    // $ANTLR start "entryRuleTable"
    // InternalNaturalLang.g:645:1: entryRuleTable returns [EObject current=null] : iv_ruleTable= ruleTable EOF ;
    public final EObject entryRuleTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTable = null;


        try {
            // InternalNaturalLang.g:645:46: (iv_ruleTable= ruleTable EOF )
            // InternalNaturalLang.g:646:2: iv_ruleTable= ruleTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleTable=ruleTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTable; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTable"


    // $ANTLR start "ruleTable"
    // InternalNaturalLang.g:652:1: ruleTable returns [EObject current=null] : ( ( (lv_lines_0_0= ruleTableLine ) ) this_NEWLINE_1= RULE_NEWLINE ( ( (lv_lines_2_0= ruleTableRow ) ) this_NEWLINE_3= RULE_NEWLINE )+ ( ( (lv_lines_4_0= ruleTableLine ) ) this_NEWLINE_5= RULE_NEWLINE ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+ )* ( (lv_lines_8_0= ruleTableLine ) ) ) ;
    public final EObject ruleTable() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_1=null;
        Token this_NEWLINE_3=null;
        Token this_NEWLINE_5=null;
        Token this_NEWLINE_7=null;
        EObject lv_lines_0_0 = null;

        EObject lv_lines_2_0 = null;

        EObject lv_lines_4_0 = null;

        EObject lv_lines_6_0 = null;

        EObject lv_lines_8_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:658:2: ( ( ( (lv_lines_0_0= ruleTableLine ) ) this_NEWLINE_1= RULE_NEWLINE ( ( (lv_lines_2_0= ruleTableRow ) ) this_NEWLINE_3= RULE_NEWLINE )+ ( ( (lv_lines_4_0= ruleTableLine ) ) this_NEWLINE_5= RULE_NEWLINE ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+ )* ( (lv_lines_8_0= ruleTableLine ) ) ) )
            // InternalNaturalLang.g:659:2: ( ( (lv_lines_0_0= ruleTableLine ) ) this_NEWLINE_1= RULE_NEWLINE ( ( (lv_lines_2_0= ruleTableRow ) ) this_NEWLINE_3= RULE_NEWLINE )+ ( ( (lv_lines_4_0= ruleTableLine ) ) this_NEWLINE_5= RULE_NEWLINE ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+ )* ( (lv_lines_8_0= ruleTableLine ) ) )
            {
            // InternalNaturalLang.g:659:2: ( ( (lv_lines_0_0= ruleTableLine ) ) this_NEWLINE_1= RULE_NEWLINE ( ( (lv_lines_2_0= ruleTableRow ) ) this_NEWLINE_3= RULE_NEWLINE )+ ( ( (lv_lines_4_0= ruleTableLine ) ) this_NEWLINE_5= RULE_NEWLINE ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+ )* ( (lv_lines_8_0= ruleTableLine ) ) )
            // InternalNaturalLang.g:660:3: ( (lv_lines_0_0= ruleTableLine ) ) this_NEWLINE_1= RULE_NEWLINE ( ( (lv_lines_2_0= ruleTableRow ) ) this_NEWLINE_3= RULE_NEWLINE )+ ( ( (lv_lines_4_0= ruleTableLine ) ) this_NEWLINE_5= RULE_NEWLINE ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+ )* ( (lv_lines_8_0= ruleTableLine ) )
            {
            // InternalNaturalLang.g:660:3: ( (lv_lines_0_0= ruleTableLine ) )
            // InternalNaturalLang.g:661:4: (lv_lines_0_0= ruleTableLine )
            {
            // InternalNaturalLang.g:661:4: (lv_lines_0_0= ruleTableLine )
            // InternalNaturalLang.g:662:5: lv_lines_0_0= ruleTableLine
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTableAccess().getLinesTableLineParserRuleCall_0_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_11);
            lv_lines_0_0=ruleTableLine();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTableRule());
              					}
              					add(
              						current,
              						"lines",
              						lv_lines_0_0,
              						"org.xixum.nlx.naturalLang.TableLine");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_NEWLINE_1=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_1, grammarAccess.getTableAccess().getNEWLINETerminalRuleCall_1());
              		
            }
            // InternalNaturalLang.g:683:3: ( ( (lv_lines_2_0= ruleTableRow ) ) this_NEWLINE_3= RULE_NEWLINE )+
            int cnt12=0;
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==RULE_TABLE_LINE) ) {
                    int LA12_1 = input.LA(2);

                    if ( ((LA12_1>=RULE_TABLE_LINE && LA12_1<=RULE_HORIZ_SEP)||(LA12_1>=RULE_MULTI && LA12_1<=RULE_BR_O)||LA12_1==RULE_EXBR_O||LA12_1==RULE_EXBRC_O||(LA12_1>=RULE_ID && LA12_1<=RULE_DOUBLE_DOT)||(LA12_1>=RULE_HEX_NUMBER && LA12_1<=RULE_IGNORED)||(LA12_1>=RULE_OPERATORS && LA12_1<=RULE_AT)) ) {
                        alt12=1;
                    }


                }
                else if ( (LA12_0==RULE_HORIZ_SEP) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // InternalNaturalLang.g:684:4: ( (lv_lines_2_0= ruleTableRow ) ) this_NEWLINE_3= RULE_NEWLINE
            	    {
            	    // InternalNaturalLang.g:684:4: ( (lv_lines_2_0= ruleTableRow ) )
            	    // InternalNaturalLang.g:685:5: (lv_lines_2_0= ruleTableRow )
            	    {
            	    // InternalNaturalLang.g:685:5: (lv_lines_2_0= ruleTableRow )
            	    // InternalNaturalLang.g:686:6: lv_lines_2_0= ruleTableRow
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTableAccess().getLinesTableRowParserRuleCall_2_0_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_11);
            	    lv_lines_2_0=ruleTableRow();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTableRule());
            	      						}
            	      						add(
            	      							current,
            	      							"lines",
            	      							lv_lines_2_0,
            	      							"org.xixum.nlx.naturalLang.TableRow");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_NEWLINE_3, grammarAccess.getTableAccess().getNEWLINETerminalRuleCall_2_1());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // InternalNaturalLang.g:708:3: ( ( (lv_lines_4_0= ruleTableLine ) ) this_NEWLINE_5= RULE_NEWLINE ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+ )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==RULE_TABLE_LINE) ) {
                    int LA14_1 = input.LA(2);

                    if ( (LA14_1==RULE_NEWLINE) ) {
                        int LA14_2 = input.LA(3);

                        if ( (LA14_2==RULE_TABLE_LINE) ) {
                            int LA14_4 = input.LA(4);

                            if ( ((LA14_4>=RULE_TABLE_LINE && LA14_4<=RULE_HORIZ_SEP)||(LA14_4>=RULE_MULTI && LA14_4<=RULE_BR_O)||LA14_4==RULE_EXBR_O||LA14_4==RULE_EXBRC_O||(LA14_4>=RULE_ID && LA14_4<=RULE_DOUBLE_DOT)||(LA14_4>=RULE_HEX_NUMBER && LA14_4<=RULE_IGNORED)||(LA14_4>=RULE_OPERATORS && LA14_4<=RULE_AT)) ) {
                                alt14=1;
                            }


                        }
                        else if ( (LA14_2==RULE_HORIZ_SEP) ) {
                            alt14=1;
                        }


                    }


                }


                switch (alt14) {
            	case 1 :
            	    // InternalNaturalLang.g:709:4: ( (lv_lines_4_0= ruleTableLine ) ) this_NEWLINE_5= RULE_NEWLINE ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+
            	    {
            	    // InternalNaturalLang.g:709:4: ( (lv_lines_4_0= ruleTableLine ) )
            	    // InternalNaturalLang.g:710:5: (lv_lines_4_0= ruleTableLine )
            	    {
            	    // InternalNaturalLang.g:710:5: (lv_lines_4_0= ruleTableLine )
            	    // InternalNaturalLang.g:711:6: lv_lines_4_0= ruleTableLine
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTableAccess().getLinesTableLineParserRuleCall_3_0_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_11);
            	    lv_lines_4_0=ruleTableLine();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTableRule());
            	      						}
            	      						add(
            	      							current,
            	      							"lines",
            	      							lv_lines_4_0,
            	      							"org.xixum.nlx.naturalLang.TableLine");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    this_NEWLINE_5=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_NEWLINE_5, grammarAccess.getTableAccess().getNEWLINETerminalRuleCall_3_1());
            	      			
            	    }
            	    // InternalNaturalLang.g:732:4: ( ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE )+
            	    int cnt13=0;
            	    loop13:
            	    do {
            	        int alt13=2;
            	        int LA13_0 = input.LA(1);

            	        if ( (LA13_0==RULE_TABLE_LINE) ) {
            	            int LA13_1 = input.LA(2);

            	            if ( ((LA13_1>=RULE_TABLE_LINE && LA13_1<=RULE_HORIZ_SEP)||(LA13_1>=RULE_MULTI && LA13_1<=RULE_BR_O)||LA13_1==RULE_EXBR_O||LA13_1==RULE_EXBRC_O||(LA13_1>=RULE_ID && LA13_1<=RULE_DOUBLE_DOT)||(LA13_1>=RULE_HEX_NUMBER && LA13_1<=RULE_IGNORED)||(LA13_1>=RULE_OPERATORS && LA13_1<=RULE_AT)) ) {
            	                alt13=1;
            	            }


            	        }
            	        else if ( (LA13_0==RULE_HORIZ_SEP) ) {
            	            alt13=1;
            	        }


            	        switch (alt13) {
            	    	case 1 :
            	    	    // InternalNaturalLang.g:733:5: ( (lv_lines_6_0= ruleTableRow ) ) this_NEWLINE_7= RULE_NEWLINE
            	    	    {
            	    	    // InternalNaturalLang.g:733:5: ( (lv_lines_6_0= ruleTableRow ) )
            	    	    // InternalNaturalLang.g:734:6: (lv_lines_6_0= ruleTableRow )
            	    	    {
            	    	    // InternalNaturalLang.g:734:6: (lv_lines_6_0= ruleTableRow )
            	    	    // InternalNaturalLang.g:735:7: lv_lines_6_0= ruleTableRow
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      							newCompositeNode(grammarAccess.getTableAccess().getLinesTableRowParserRuleCall_3_2_0_0());
            	    	      						
            	    	    }
            	    	    pushFollow(FollowSets000.FOLLOW_11);
            	    	    lv_lines_6_0=ruleTableRow();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      							if (current==null) {
            	    	      								current = createModelElementForParent(grammarAccess.getTableRule());
            	    	      							}
            	    	      							add(
            	    	      								current,
            	    	      								"lines",
            	    	      								lv_lines_6_0,
            	    	      								"org.xixum.nlx.naturalLang.TableRow");
            	    	      							afterParserOrEnumRuleCall();
            	    	      						
            	    	    }

            	    	    }


            	    	    }

            	    	    this_NEWLINE_7=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_10); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      					newLeafNode(this_NEWLINE_7, grammarAccess.getTableAccess().getNEWLINETerminalRuleCall_3_2_1());
            	    	      				
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt13 >= 1 ) break loop13;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(13, input);
            	                throw eee;
            	        }
            	        cnt13++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            // InternalNaturalLang.g:758:3: ( (lv_lines_8_0= ruleTableLine ) )
            // InternalNaturalLang.g:759:4: (lv_lines_8_0= ruleTableLine )
            {
            // InternalNaturalLang.g:759:4: (lv_lines_8_0= ruleTableLine )
            // InternalNaturalLang.g:760:5: lv_lines_8_0= ruleTableLine
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTableAccess().getLinesTableLineParserRuleCall_4_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_lines_8_0=ruleTableLine();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTableRule());
              					}
              					add(
              						current,
              						"lines",
              						lv_lines_8_0,
              						"org.xixum.nlx.naturalLang.TableLine");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTable"


    // $ANTLR start "entryRuleLineSentenceChain"
    // InternalNaturalLang.g:781:1: entryRuleLineSentenceChain returns [EObject current=null] : iv_ruleLineSentenceChain= ruleLineSentenceChain EOF ;
    public final EObject entryRuleLineSentenceChain() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLineSentenceChain = null;


        try {
            // InternalNaturalLang.g:781:58: (iv_ruleLineSentenceChain= ruleLineSentenceChain EOF )
            // InternalNaturalLang.g:782:2: iv_ruleLineSentenceChain= ruleLineSentenceChain EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLineSentenceChainRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleLineSentenceChain=ruleLineSentenceChain();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLineSentenceChain; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLineSentenceChain"


    // $ANTLR start "ruleLineSentenceChain"
    // InternalNaturalLang.g:788:1: ruleLineSentenceChain returns [EObject current=null] : ( () ( (lv_sentences_1_0= ruleLineSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleLineSentence ) ) )* ( (lv_endpoint_4_0= RULE_FULL_STOP_IM ) )? ) ;
    public final EObject ruleLineSentenceChain() throws RecognitionException {
        EObject current = null;

        Token lv_separators_2_0=null;
        Token lv_endpoint_4_0=null;
        EObject lv_sentences_1_0 = null;

        EObject lv_sentences_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:794:2: ( ( () ( (lv_sentences_1_0= ruleLineSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleLineSentence ) ) )* ( (lv_endpoint_4_0= RULE_FULL_STOP_IM ) )? ) )
            // InternalNaturalLang.g:795:2: ( () ( (lv_sentences_1_0= ruleLineSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleLineSentence ) ) )* ( (lv_endpoint_4_0= RULE_FULL_STOP_IM ) )? )
            {
            // InternalNaturalLang.g:795:2: ( () ( (lv_sentences_1_0= ruleLineSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleLineSentence ) ) )* ( (lv_endpoint_4_0= RULE_FULL_STOP_IM ) )? )
            // InternalNaturalLang.g:796:3: () ( (lv_sentences_1_0= ruleLineSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleLineSentence ) ) )* ( (lv_endpoint_4_0= RULE_FULL_STOP_IM ) )?
            {
            // InternalNaturalLang.g:796:3: ()
            // InternalNaturalLang.g:797:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getLineSentenceChainAccess().getSentenceChainAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:806:3: ( (lv_sentences_1_0= ruleLineSentence ) )
            // InternalNaturalLang.g:807:4: (lv_sentences_1_0= ruleLineSentence )
            {
            // InternalNaturalLang.g:807:4: (lv_sentences_1_0= ruleLineSentence )
            // InternalNaturalLang.g:808:5: lv_sentences_1_0= ruleLineSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLineSentenceChainAccess().getSentencesLineSentenceParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_12);
            lv_sentences_1_0=ruleLineSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLineSentenceChainRule());
              					}
              					add(
              						current,
              						"sentences",
              						lv_sentences_1_0,
              						"org.xixum.nlx.naturalLang.LineSentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:825:3: ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleLineSentence ) ) )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==RULE_FULL_STOP_IM) ) {
                    int LA15_1 = input.LA(2);

                    if ( ((LA15_1>=RULE_MULTI && LA15_1<=RULE_BR_O)||LA15_1==RULE_EXBR_O||LA15_1==RULE_EXBRC_O||(LA15_1>=RULE_ID && LA15_1<=RULE_DOUBLE_DOT)||(LA15_1>=RULE_HEX_NUMBER && LA15_1<=RULE_IGNORED)||(LA15_1>=RULE_OPERATORS && LA15_1<=RULE_AT)) ) {
                        alt15=1;
                    }


                }


                switch (alt15) {
            	case 1 :
            	    // InternalNaturalLang.g:826:4: ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleLineSentence ) )
            	    {
            	    // InternalNaturalLang.g:826:4: ( (lv_separators_2_0= RULE_FULL_STOP_IM ) )
            	    // InternalNaturalLang.g:827:5: (lv_separators_2_0= RULE_FULL_STOP_IM )
            	    {
            	    // InternalNaturalLang.g:827:5: (lv_separators_2_0= RULE_FULL_STOP_IM )
            	    // InternalNaturalLang.g:828:6: lv_separators_2_0= RULE_FULL_STOP_IM
            	    {
            	    lv_separators_2_0=(Token)match(input,RULE_FULL_STOP_IM,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_separators_2_0, grammarAccess.getLineSentenceChainAccess().getSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getLineSentenceChainRule());
            	      						}
            	      						addWithLastConsumed(
            	      							current,
            	      							"separators",
            	      							lv_separators_2_0,
            	      							"org.xixum.nlx.naturalLang.FULL_STOP_IM");
            	      					
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:844:4: ( (lv_sentences_3_0= ruleLineSentence ) )
            	    // InternalNaturalLang.g:845:5: (lv_sentences_3_0= ruleLineSentence )
            	    {
            	    // InternalNaturalLang.g:845:5: (lv_sentences_3_0= ruleLineSentence )
            	    // InternalNaturalLang.g:846:6: lv_sentences_3_0= ruleLineSentence
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLineSentenceChainAccess().getSentencesLineSentenceParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_12);
            	    lv_sentences_3_0=ruleLineSentence();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLineSentenceChainRule());
            	      						}
            	      						add(
            	      							current,
            	      							"sentences",
            	      							lv_sentences_3_0,
            	      							"org.xixum.nlx.naturalLang.LineSentence");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            // InternalNaturalLang.g:864:3: ( (lv_endpoint_4_0= RULE_FULL_STOP_IM ) )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==RULE_FULL_STOP_IM) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // InternalNaturalLang.g:865:4: (lv_endpoint_4_0= RULE_FULL_STOP_IM )
                    {
                    // InternalNaturalLang.g:865:4: (lv_endpoint_4_0= RULE_FULL_STOP_IM )
                    // InternalNaturalLang.g:866:5: lv_endpoint_4_0= RULE_FULL_STOP_IM
                    {
                    lv_endpoint_4_0=(Token)match(input,RULE_FULL_STOP_IM,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_endpoint_4_0, grammarAccess.getLineSentenceChainAccess().getEndpointFULL_STOP_IMTerminalRuleCall_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLineSentenceChainRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"endpoint",
                      						lv_endpoint_4_0,
                      						"org.xixum.nlx.naturalLang.FULL_STOP_IM");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLineSentenceChain"


    // $ANTLR start "entryRuleSentenceChain"
    // InternalNaturalLang.g:886:1: entryRuleSentenceChain returns [EObject current=null] : iv_ruleSentenceChain= ruleSentenceChain EOF ;
    public final EObject entryRuleSentenceChain() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSentenceChain = null;


        try {
            // InternalNaturalLang.g:886:54: (iv_ruleSentenceChain= ruleSentenceChain EOF )
            // InternalNaturalLang.g:887:2: iv_ruleSentenceChain= ruleSentenceChain EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSentenceChainRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSentenceChain=ruleSentenceChain();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSentenceChain; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSentenceChain"


    // $ANTLR start "ruleSentenceChain"
    // InternalNaturalLang.g:893:1: ruleSentenceChain returns [EObject current=null] : ( () ( ( ( ruleSentence ) )=> (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) ) ) ;
    public final EObject ruleSentenceChain() throws RecognitionException {
        EObject current = null;

        Token lv_separators_2_0=null;
        Token lv_endpoint_4_0=null;
        Token lv_endpoint_5_0=null;
        EObject lv_sentences_1_0 = null;

        EObject lv_sentences_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:899:2: ( ( () ( ( ( ruleSentence ) )=> (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) ) ) )
            // InternalNaturalLang.g:900:2: ( () ( ( ( ruleSentence ) )=> (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) ) )
            {
            // InternalNaturalLang.g:900:2: ( () ( ( ( ruleSentence ) )=> (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) ) )
            // InternalNaturalLang.g:901:3: () ( ( ( ruleSentence ) )=> (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) )
            {
            // InternalNaturalLang.g:901:3: ()
            // InternalNaturalLang.g:902:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSentenceChainAccess().getSentenceChainAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:911:3: ( ( ( ruleSentence ) )=> (lv_sentences_1_0= ruleSentence ) )
            // InternalNaturalLang.g:912:4: ( ( ruleSentence ) )=> (lv_sentences_1_0= ruleSentence )
            {
            // InternalNaturalLang.g:916:4: (lv_sentences_1_0= ruleSentence )
            // InternalNaturalLang.g:917:5: lv_sentences_1_0= ruleSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSentenceChainAccess().getSentencesSentenceParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_14);
            lv_sentences_1_0=ruleSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSentenceChainRule());
              					}
              					add(
              						current,
              						"sentences",
              						lv_sentences_1_0,
              						"org.xixum.nlx.naturalLang.Sentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:934:3: ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==RULE_FULL_STOP_IM) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // InternalNaturalLang.g:935:4: ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) )
            	    {
            	    // InternalNaturalLang.g:935:4: ( (lv_separators_2_0= RULE_FULL_STOP_IM ) )
            	    // InternalNaturalLang.g:936:5: (lv_separators_2_0= RULE_FULL_STOP_IM )
            	    {
            	    // InternalNaturalLang.g:936:5: (lv_separators_2_0= RULE_FULL_STOP_IM )
            	    // InternalNaturalLang.g:937:6: lv_separators_2_0= RULE_FULL_STOP_IM
            	    {
            	    lv_separators_2_0=(Token)match(input,RULE_FULL_STOP_IM,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_separators_2_0, grammarAccess.getSentenceChainAccess().getSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getSentenceChainRule());
            	      						}
            	      						addWithLastConsumed(
            	      							current,
            	      							"separators",
            	      							lv_separators_2_0,
            	      							"org.xixum.nlx.naturalLang.FULL_STOP_IM");
            	      					
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:953:4: ( (lv_sentences_3_0= ruleSentenceX ) )
            	    // InternalNaturalLang.g:954:5: (lv_sentences_3_0= ruleSentenceX )
            	    {
            	    // InternalNaturalLang.g:954:5: (lv_sentences_3_0= ruleSentenceX )
            	    // InternalNaturalLang.g:955:6: lv_sentences_3_0= ruleSentenceX
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSentenceChainAccess().getSentencesSentenceXParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_14);
            	    lv_sentences_3_0=ruleSentenceX();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSentenceChainRule());
            	      						}
            	      						add(
            	      							current,
            	      							"sentences",
            	      							lv_sentences_3_0,
            	      							"org.xixum.nlx.naturalLang.SentenceX");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            // InternalNaturalLang.g:973:3: ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==RULE_FULL_STOP_NL) ) {
                alt18=1;
            }
            else if ( (LA18_0==RULE_NEWLINE) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // InternalNaturalLang.g:974:4: ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) )
                    {
                    // InternalNaturalLang.g:974:4: ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) )
                    // InternalNaturalLang.g:975:5: (lv_endpoint_4_0= RULE_FULL_STOP_NL )
                    {
                    // InternalNaturalLang.g:975:5: (lv_endpoint_4_0= RULE_FULL_STOP_NL )
                    // InternalNaturalLang.g:976:6: lv_endpoint_4_0= RULE_FULL_STOP_NL
                    {
                    lv_endpoint_4_0=(Token)match(input,RULE_FULL_STOP_NL,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_endpoint_4_0, grammarAccess.getSentenceChainAccess().getEndpointFULL_STOP_NLTerminalRuleCall_3_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSentenceChainRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"endpoint",
                      							lv_endpoint_4_0,
                      							"org.xixum.nlx.naturalLang.FULL_STOP_NL");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:993:4: ( (lv_endpoint_5_0= RULE_NEWLINE ) )
                    {
                    // InternalNaturalLang.g:993:4: ( (lv_endpoint_5_0= RULE_NEWLINE ) )
                    // InternalNaturalLang.g:994:5: (lv_endpoint_5_0= RULE_NEWLINE )
                    {
                    // InternalNaturalLang.g:994:5: (lv_endpoint_5_0= RULE_NEWLINE )
                    // InternalNaturalLang.g:995:6: lv_endpoint_5_0= RULE_NEWLINE
                    {
                    lv_endpoint_5_0=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_endpoint_5_0, grammarAccess.getSentenceChainAccess().getEndpointNEWLINETerminalRuleCall_3_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSentenceChainRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"endpoint",
                      							lv_endpoint_5_0,
                      							"org.xixum.nlx.naturalLang.NEWLINE");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSentenceChain"


    // $ANTLR start "entryRuleSentenceChainX"
    // InternalNaturalLang.g:1016:1: entryRuleSentenceChainX returns [EObject current=null] : iv_ruleSentenceChainX= ruleSentenceChainX EOF ;
    public final EObject entryRuleSentenceChainX() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSentenceChainX = null;


        try {
            // InternalNaturalLang.g:1016:55: (iv_ruleSentenceChainX= ruleSentenceChainX EOF )
            // InternalNaturalLang.g:1017:2: iv_ruleSentenceChainX= ruleSentenceChainX EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSentenceChainXRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSentenceChainX=ruleSentenceChainX();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSentenceChainX; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSentenceChainX"


    // $ANTLR start "ruleSentenceChainX"
    // InternalNaturalLang.g:1023:1: ruleSentenceChainX returns [EObject current=null] : ( () ( (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )=> ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) ) ) ) ;
    public final EObject ruleSentenceChainX() throws RecognitionException {
        EObject current = null;

        Token lv_separators_2_0=null;
        Token lv_endpoint_4_0=null;
        Token lv_endpoint_5_0=null;
        Token lv_endpoint_6_0=null;
        EObject lv_sentences_1_0 = null;

        EObject lv_sentences_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:1029:2: ( ( () ( (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )=> ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) ) ) ) )
            // InternalNaturalLang.g:1030:2: ( () ( (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )=> ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) ) ) )
            {
            // InternalNaturalLang.g:1030:2: ( () ( (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )=> ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) ) ) )
            // InternalNaturalLang.g:1031:3: () ( (lv_sentences_1_0= ruleSentence ) ) ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )* ( ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )=> ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) ) )
            {
            // InternalNaturalLang.g:1031:3: ()
            // InternalNaturalLang.g:1032:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSentenceChainXAccess().getSentenceChainAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:1041:3: ( (lv_sentences_1_0= ruleSentence ) )
            // InternalNaturalLang.g:1042:4: (lv_sentences_1_0= ruleSentence )
            {
            // InternalNaturalLang.g:1042:4: (lv_sentences_1_0= ruleSentence )
            // InternalNaturalLang.g:1043:5: lv_sentences_1_0= ruleSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSentenceChainXAccess().getSentencesSentenceParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_15);
            lv_sentences_1_0=ruleSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSentenceChainXRule());
              					}
              					add(
              						current,
              						"sentences",
              						lv_sentences_1_0,
              						"org.xixum.nlx.naturalLang.Sentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:1060:3: ( ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) ) )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==RULE_FULL_STOP_IM) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // InternalNaturalLang.g:1061:4: ( (lv_separators_2_0= RULE_FULL_STOP_IM ) ) ( (lv_sentences_3_0= ruleSentenceX ) )
            	    {
            	    // InternalNaturalLang.g:1061:4: ( (lv_separators_2_0= RULE_FULL_STOP_IM ) )
            	    // InternalNaturalLang.g:1062:5: (lv_separators_2_0= RULE_FULL_STOP_IM )
            	    {
            	    // InternalNaturalLang.g:1062:5: (lv_separators_2_0= RULE_FULL_STOP_IM )
            	    // InternalNaturalLang.g:1063:6: lv_separators_2_0= RULE_FULL_STOP_IM
            	    {
            	    lv_separators_2_0=(Token)match(input,RULE_FULL_STOP_IM,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_separators_2_0, grammarAccess.getSentenceChainXAccess().getSeparatorsFULL_STOP_IMTerminalRuleCall_2_0_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getSentenceChainXRule());
            	      						}
            	      						addWithLastConsumed(
            	      							current,
            	      							"separators",
            	      							lv_separators_2_0,
            	      							"org.xixum.nlx.naturalLang.FULL_STOP_IM");
            	      					
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:1079:4: ( (lv_sentences_3_0= ruleSentenceX ) )
            	    // InternalNaturalLang.g:1080:5: (lv_sentences_3_0= ruleSentenceX )
            	    {
            	    // InternalNaturalLang.g:1080:5: (lv_sentences_3_0= ruleSentenceX )
            	    // InternalNaturalLang.g:1081:6: lv_sentences_3_0= ruleSentenceX
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSentenceChainXAccess().getSentencesSentenceXParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_15);
            	    lv_sentences_3_0=ruleSentenceX();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSentenceChainXRule());
            	      						}
            	      						add(
            	      							current,
            	      							"sentences",
            	      							lv_sentences_3_0,
            	      							"org.xixum.nlx.naturalLang.SentenceX");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);

            // InternalNaturalLang.g:1099:3: ( ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )=> ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) ) )
            // InternalNaturalLang.g:1100:4: ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )=> ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) )
            {
            // InternalNaturalLang.g:1120:4: ( ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) ) | ( (lv_endpoint_5_0= RULE_NEWLINE ) ) | ( (lv_endpoint_6_0= RULE_KOMMA ) ) )
            int alt20=3;
            switch ( input.LA(1) ) {
            case RULE_FULL_STOP_NL:
                {
                alt20=1;
                }
                break;
            case RULE_NEWLINE:
                {
                alt20=2;
                }
                break;
            case RULE_KOMMA:
                {
                alt20=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    // InternalNaturalLang.g:1121:5: ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) )
                    {
                    // InternalNaturalLang.g:1121:5: ( (lv_endpoint_4_0= RULE_FULL_STOP_NL ) )
                    // InternalNaturalLang.g:1122:6: (lv_endpoint_4_0= RULE_FULL_STOP_NL )
                    {
                    // InternalNaturalLang.g:1122:6: (lv_endpoint_4_0= RULE_FULL_STOP_NL )
                    // InternalNaturalLang.g:1123:7: lv_endpoint_4_0= RULE_FULL_STOP_NL
                    {
                    lv_endpoint_4_0=(Token)match(input,RULE_FULL_STOP_NL,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_endpoint_4_0, grammarAccess.getSentenceChainXAccess().getEndpointFULL_STOP_NLTerminalRuleCall_3_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getSentenceChainXRule());
                      							}
                      							setWithLastConsumed(
                      								current,
                      								"endpoint",
                      								lv_endpoint_4_0,
                      								"org.xixum.nlx.naturalLang.FULL_STOP_NL");
                      						
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:1140:5: ( (lv_endpoint_5_0= RULE_NEWLINE ) )
                    {
                    // InternalNaturalLang.g:1140:5: ( (lv_endpoint_5_0= RULE_NEWLINE ) )
                    // InternalNaturalLang.g:1141:6: (lv_endpoint_5_0= RULE_NEWLINE )
                    {
                    // InternalNaturalLang.g:1141:6: (lv_endpoint_5_0= RULE_NEWLINE )
                    // InternalNaturalLang.g:1142:7: lv_endpoint_5_0= RULE_NEWLINE
                    {
                    lv_endpoint_5_0=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_endpoint_5_0, grammarAccess.getSentenceChainXAccess().getEndpointNEWLINETerminalRuleCall_3_0_1_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getSentenceChainXRule());
                      							}
                      							setWithLastConsumed(
                      								current,
                      								"endpoint",
                      								lv_endpoint_5_0,
                      								"org.xixum.nlx.naturalLang.NEWLINE");
                      						
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:1159:5: ( (lv_endpoint_6_0= RULE_KOMMA ) )
                    {
                    // InternalNaturalLang.g:1159:5: ( (lv_endpoint_6_0= RULE_KOMMA ) )
                    // InternalNaturalLang.g:1160:6: (lv_endpoint_6_0= RULE_KOMMA )
                    {
                    // InternalNaturalLang.g:1160:6: (lv_endpoint_6_0= RULE_KOMMA )
                    // InternalNaturalLang.g:1161:7: lv_endpoint_6_0= RULE_KOMMA
                    {
                    lv_endpoint_6_0=(Token)match(input,RULE_KOMMA,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_endpoint_6_0, grammarAccess.getSentenceChainXAccess().getEndpointKOMMATerminalRuleCall_3_0_2_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getSentenceChainXRule());
                      							}
                      							setWithLastConsumed(
                      								current,
                      								"endpoint",
                      								lv_endpoint_6_0,
                      								"org.xixum.nlx.naturalLang.KOMMA");
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSentenceChainX"


    // $ANTLR start "entryRuleSentence"
    // InternalNaturalLang.g:1183:1: entryRuleSentence returns [EObject current=null] : iv_ruleSentence= ruleSentence EOF ;
    public final EObject entryRuleSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSentence = null;


        try {
            // InternalNaturalLang.g:1183:49: (iv_ruleSentence= ruleSentence EOF )
            // InternalNaturalLang.g:1184:2: iv_ruleSentence= ruleSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSentence=ruleSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSentence"


    // $ANTLR start "ruleSentence"
    // InternalNaturalLang.g:1190:1: ruleSentence returns [EObject current=null] : ( () ( (lv_subsentence_1_0= ruleSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* ) ;
    public final EObject ruleSentence() throws RecognitionException {
        EObject current = null;

        Token this_KOMMA_2=null;
        EObject lv_subsentence_1_0 = null;

        EObject lv_subsentence_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:1196:2: ( ( () ( (lv_subsentence_1_0= ruleSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* ) )
            // InternalNaturalLang.g:1197:2: ( () ( (lv_subsentence_1_0= ruleSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* )
            {
            // InternalNaturalLang.g:1197:2: ( () ( (lv_subsentence_1_0= ruleSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* )
            // InternalNaturalLang.g:1198:3: () ( (lv_subsentence_1_0= ruleSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )*
            {
            // InternalNaturalLang.g:1198:3: ()
            // InternalNaturalLang.g:1199:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSentenceAccess().getSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:1208:3: ( (lv_subsentence_1_0= ruleSubSentence ) )
            // InternalNaturalLang.g:1209:4: (lv_subsentence_1_0= ruleSubSentence )
            {
            // InternalNaturalLang.g:1209:4: (lv_subsentence_1_0= ruleSubSentence )
            // InternalNaturalLang.g:1210:5: lv_subsentence_1_0= ruleSubSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSentenceAccess().getSubsentenceSubSentenceParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_16);
            lv_subsentence_1_0=ruleSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSentenceRule());
              					}
              					add(
              						current,
              						"subsentence",
              						lv_subsentence_1_0,
              						"org.xixum.nlx.naturalLang.SubSentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:1227:3: (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==RULE_KOMMA) ) {
                    int LA21_4 = input.LA(2);

                    if ( (synpred31_InternalNaturalLang()) ) {
                        alt21=1;
                    }


                }


                switch (alt21) {
            	case 1 :
            	    // InternalNaturalLang.g:1228:4: this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
            	    {
            	    this_KOMMA_2=(Token)match(input,RULE_KOMMA,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_KOMMA_2, grammarAccess.getSentenceAccess().getKOMMATerminalRuleCall_2_0());
            	      			
            	    }
            	    // InternalNaturalLang.g:1232:4: ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
            	    // InternalNaturalLang.g:1233:5: (lv_subsentence_3_0= ruleTrailSubSentence )
            	    {
            	    // InternalNaturalLang.g:1233:5: (lv_subsentence_3_0= ruleTrailSubSentence )
            	    // InternalNaturalLang.g:1234:6: lv_subsentence_3_0= ruleTrailSubSentence
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSentenceAccess().getSubsentenceTrailSubSentenceParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_16);
            	    lv_subsentence_3_0=ruleTrailSubSentence();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"subsentence",
            	      							lv_subsentence_3_0,
            	      							"org.xixum.nlx.naturalLang.TrailSubSentence");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSentence"


    // $ANTLR start "entryRuleLineSentence"
    // InternalNaturalLang.g:1256:1: entryRuleLineSentence returns [EObject current=null] : iv_ruleLineSentence= ruleLineSentence EOF ;
    public final EObject entryRuleLineSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLineSentence = null;


        try {
            // InternalNaturalLang.g:1256:53: (iv_ruleLineSentence= ruleLineSentence EOF )
            // InternalNaturalLang.g:1257:2: iv_ruleLineSentence= ruleLineSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLineSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleLineSentence=ruleLineSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLineSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLineSentence"


    // $ANTLR start "ruleLineSentence"
    // InternalNaturalLang.g:1263:1: ruleLineSentence returns [EObject current=null] : ( () ( (lv_subsentence_1_0= ruleLineSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleLineSubSentence ) ) )* ) ;
    public final EObject ruleLineSentence() throws RecognitionException {
        EObject current = null;

        Token this_KOMMA_2=null;
        EObject lv_subsentence_1_0 = null;

        EObject lv_subsentence_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:1269:2: ( ( () ( (lv_subsentence_1_0= ruleLineSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleLineSubSentence ) ) )* ) )
            // InternalNaturalLang.g:1270:2: ( () ( (lv_subsentence_1_0= ruleLineSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleLineSubSentence ) ) )* )
            {
            // InternalNaturalLang.g:1270:2: ( () ( (lv_subsentence_1_0= ruleLineSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleLineSubSentence ) ) )* )
            // InternalNaturalLang.g:1271:3: () ( (lv_subsentence_1_0= ruleLineSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleLineSubSentence ) ) )*
            {
            // InternalNaturalLang.g:1271:3: ()
            // InternalNaturalLang.g:1272:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getLineSentenceAccess().getSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:1281:3: ( (lv_subsentence_1_0= ruleLineSubSentence ) )
            // InternalNaturalLang.g:1282:4: (lv_subsentence_1_0= ruleLineSubSentence )
            {
            // InternalNaturalLang.g:1282:4: (lv_subsentence_1_0= ruleLineSubSentence )
            // InternalNaturalLang.g:1283:5: lv_subsentence_1_0= ruleLineSubSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLineSentenceAccess().getSubsentenceLineSubSentenceParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_16);
            lv_subsentence_1_0=ruleLineSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLineSentenceRule());
              					}
              					add(
              						current,
              						"subsentence",
              						lv_subsentence_1_0,
              						"org.xixum.nlx.naturalLang.LineSubSentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:1300:3: (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleLineSubSentence ) ) )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==RULE_KOMMA) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // InternalNaturalLang.g:1301:4: this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleLineSubSentence ) )
            	    {
            	    this_KOMMA_2=(Token)match(input,RULE_KOMMA,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_KOMMA_2, grammarAccess.getLineSentenceAccess().getKOMMATerminalRuleCall_2_0());
            	      			
            	    }
            	    // InternalNaturalLang.g:1305:4: ( (lv_subsentence_3_0= ruleLineSubSentence ) )
            	    // InternalNaturalLang.g:1306:5: (lv_subsentence_3_0= ruleLineSubSentence )
            	    {
            	    // InternalNaturalLang.g:1306:5: (lv_subsentence_3_0= ruleLineSubSentence )
            	    // InternalNaturalLang.g:1307:6: lv_subsentence_3_0= ruleLineSubSentence
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLineSentenceAccess().getSubsentenceLineSubSentenceParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_16);
            	    lv_subsentence_3_0=ruleLineSubSentence();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLineSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"subsentence",
            	      							lv_subsentence_3_0,
            	      							"org.xixum.nlx.naturalLang.LineSubSentence");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLineSentence"


    // $ANTLR start "entryRuleFreeSentence"
    // InternalNaturalLang.g:1329:1: entryRuleFreeSentence returns [EObject current=null] : iv_ruleFreeSentence= ruleFreeSentence EOF ;
    public final EObject entryRuleFreeSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFreeSentence = null;


        try {
            // InternalNaturalLang.g:1329:53: (iv_ruleFreeSentence= ruleFreeSentence EOF )
            // InternalNaturalLang.g:1330:2: iv_ruleFreeSentence= ruleFreeSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFreeSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleFreeSentence=ruleFreeSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFreeSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFreeSentence"


    // $ANTLR start "ruleFreeSentence"
    // InternalNaturalLang.g:1336:1: ruleFreeSentence returns [EObject current=null] : ( () ( (lv_subsentence_1_0= ruleFreeSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleFreeSubSentence ) ) )* ) ;
    public final EObject ruleFreeSentence() throws RecognitionException {
        EObject current = null;

        Token this_KOMMA_2=null;
        EObject lv_subsentence_1_0 = null;

        EObject lv_subsentence_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:1342:2: ( ( () ( (lv_subsentence_1_0= ruleFreeSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleFreeSubSentence ) ) )* ) )
            // InternalNaturalLang.g:1343:2: ( () ( (lv_subsentence_1_0= ruleFreeSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleFreeSubSentence ) ) )* )
            {
            // InternalNaturalLang.g:1343:2: ( () ( (lv_subsentence_1_0= ruleFreeSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleFreeSubSentence ) ) )* )
            // InternalNaturalLang.g:1344:3: () ( (lv_subsentence_1_0= ruleFreeSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleFreeSubSentence ) ) )*
            {
            // InternalNaturalLang.g:1344:3: ()
            // InternalNaturalLang.g:1345:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFreeSentenceAccess().getSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:1354:3: ( (lv_subsentence_1_0= ruleFreeSubSentence ) )
            // InternalNaturalLang.g:1355:4: (lv_subsentence_1_0= ruleFreeSubSentence )
            {
            // InternalNaturalLang.g:1355:4: (lv_subsentence_1_0= ruleFreeSubSentence )
            // InternalNaturalLang.g:1356:5: lv_subsentence_1_0= ruleFreeSubSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFreeSentenceAccess().getSubsentenceFreeSubSentenceParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_16);
            lv_subsentence_1_0=ruleFreeSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFreeSentenceRule());
              					}
              					add(
              						current,
              						"subsentence",
              						lv_subsentence_1_0,
              						"org.xixum.nlx.naturalLang.FreeSubSentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:1373:3: (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleFreeSubSentence ) ) )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==RULE_KOMMA) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // InternalNaturalLang.g:1374:4: this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleFreeSubSentence ) )
            	    {
            	    this_KOMMA_2=(Token)match(input,RULE_KOMMA,FollowSets000.FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_KOMMA_2, grammarAccess.getFreeSentenceAccess().getKOMMATerminalRuleCall_2_0());
            	      			
            	    }
            	    // InternalNaturalLang.g:1378:4: ( (lv_subsentence_3_0= ruleFreeSubSentence ) )
            	    // InternalNaturalLang.g:1379:5: (lv_subsentence_3_0= ruleFreeSubSentence )
            	    {
            	    // InternalNaturalLang.g:1379:5: (lv_subsentence_3_0= ruleFreeSubSentence )
            	    // InternalNaturalLang.g:1380:6: lv_subsentence_3_0= ruleFreeSubSentence
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFreeSentenceAccess().getSubsentenceFreeSubSentenceParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_16);
            	    lv_subsentence_3_0=ruleFreeSubSentence();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFreeSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"subsentence",
            	      							lv_subsentence_3_0,
            	      							"org.xixum.nlx.naturalLang.FreeSubSentence");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFreeSentence"


    // $ANTLR start "entryRuleSentenceX"
    // InternalNaturalLang.g:1402:1: entryRuleSentenceX returns [EObject current=null] : iv_ruleSentenceX= ruleSentenceX EOF ;
    public final EObject entryRuleSentenceX() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSentenceX = null;


        try {
            // InternalNaturalLang.g:1402:50: (iv_ruleSentenceX= ruleSentenceX EOF )
            // InternalNaturalLang.g:1403:2: iv_ruleSentenceX= ruleSentenceX EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSentenceXRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSentenceX=ruleSentenceX();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSentenceX; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSentenceX"


    // $ANTLR start "ruleSentenceX"
    // InternalNaturalLang.g:1409:1: ruleSentenceX returns [EObject current=null] : ( () ( (lv_subsentence_1_0= ruleTrailSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* ) ;
    public final EObject ruleSentenceX() throws RecognitionException {
        EObject current = null;

        Token this_KOMMA_2=null;
        EObject lv_subsentence_1_0 = null;

        EObject lv_subsentence_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:1415:2: ( ( () ( (lv_subsentence_1_0= ruleTrailSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* ) )
            // InternalNaturalLang.g:1416:2: ( () ( (lv_subsentence_1_0= ruleTrailSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* )
            {
            // InternalNaturalLang.g:1416:2: ( () ( (lv_subsentence_1_0= ruleTrailSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )* )
            // InternalNaturalLang.g:1417:3: () ( (lv_subsentence_1_0= ruleTrailSubSentence ) ) (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )*
            {
            // InternalNaturalLang.g:1417:3: ()
            // InternalNaturalLang.g:1418:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSentenceXAccess().getSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:1427:3: ( (lv_subsentence_1_0= ruleTrailSubSentence ) )
            // InternalNaturalLang.g:1428:4: (lv_subsentence_1_0= ruleTrailSubSentence )
            {
            // InternalNaturalLang.g:1428:4: (lv_subsentence_1_0= ruleTrailSubSentence )
            // InternalNaturalLang.g:1429:5: lv_subsentence_1_0= ruleTrailSubSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSentenceXAccess().getSubsentenceTrailSubSentenceParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_16);
            lv_subsentence_1_0=ruleTrailSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSentenceXRule());
              					}
              					add(
              						current,
              						"subsentence",
              						lv_subsentence_1_0,
              						"org.xixum.nlx.naturalLang.TrailSubSentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:1446:3: (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==RULE_KOMMA) ) {
                    int LA24_4 = input.LA(2);

                    if ( (synpred34_InternalNaturalLang()) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // InternalNaturalLang.g:1447:4: this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
            	    {
            	    this_KOMMA_2=(Token)match(input,RULE_KOMMA,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_KOMMA_2, grammarAccess.getSentenceXAccess().getKOMMATerminalRuleCall_2_0());
            	      			
            	    }
            	    // InternalNaturalLang.g:1451:4: ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
            	    // InternalNaturalLang.g:1452:5: (lv_subsentence_3_0= ruleTrailSubSentence )
            	    {
            	    // InternalNaturalLang.g:1452:5: (lv_subsentence_3_0= ruleTrailSubSentence )
            	    // InternalNaturalLang.g:1453:6: lv_subsentence_3_0= ruleTrailSubSentence
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSentenceXAccess().getSubsentenceTrailSubSentenceParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_16);
            	    lv_subsentence_3_0=ruleTrailSubSentence();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSentenceXRule());
            	      						}
            	      						add(
            	      							current,
            	      							"subsentence",
            	      							lv_subsentence_3_0,
            	      							"org.xixum.nlx.naturalLang.TrailSubSentence");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSentenceX"


    // $ANTLR start "entryRuleListSentence"
    // InternalNaturalLang.g:1475:1: entryRuleListSentence returns [EObject current=null] : iv_ruleListSentence= ruleListSentence EOF ;
    public final EObject entryRuleListSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleListSentence = null;


        try {
            // InternalNaturalLang.g:1475:53: (iv_ruleListSentence= ruleListSentence EOF )
            // InternalNaturalLang.g:1476:2: iv_ruleListSentence= ruleListSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleListSentence=ruleListSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleListSentence"


    // $ANTLR start "ruleListSentence"
    // InternalNaturalLang.g:1482:1: ruleListSentence returns [EObject current=null] : ( ( (lv_listpoint_0_0= ruleListPoint ) ) ( ( (lv_SentenceChain_1_0= ruleSentenceChainX ) ) | this_NEWLINE_2= RULE_NEWLINE ) ) ;
    public final EObject ruleListSentence() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_2=null;
        AntlrDatatypeRuleToken lv_listpoint_0_0 = null;

        EObject lv_SentenceChain_1_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:1488:2: ( ( ( (lv_listpoint_0_0= ruleListPoint ) ) ( ( (lv_SentenceChain_1_0= ruleSentenceChainX ) ) | this_NEWLINE_2= RULE_NEWLINE ) ) )
            // InternalNaturalLang.g:1489:2: ( ( (lv_listpoint_0_0= ruleListPoint ) ) ( ( (lv_SentenceChain_1_0= ruleSentenceChainX ) ) | this_NEWLINE_2= RULE_NEWLINE ) )
            {
            // InternalNaturalLang.g:1489:2: ( ( (lv_listpoint_0_0= ruleListPoint ) ) ( ( (lv_SentenceChain_1_0= ruleSentenceChainX ) ) | this_NEWLINE_2= RULE_NEWLINE ) )
            // InternalNaturalLang.g:1490:3: ( (lv_listpoint_0_0= ruleListPoint ) ) ( ( (lv_SentenceChain_1_0= ruleSentenceChainX ) ) | this_NEWLINE_2= RULE_NEWLINE )
            {
            // InternalNaturalLang.g:1490:3: ( (lv_listpoint_0_0= ruleListPoint ) )
            // InternalNaturalLang.g:1491:4: (lv_listpoint_0_0= ruleListPoint )
            {
            // InternalNaturalLang.g:1491:4: (lv_listpoint_0_0= ruleListPoint )
            // InternalNaturalLang.g:1492:5: lv_listpoint_0_0= ruleListPoint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getListSentenceAccess().getListpointListPointParserRuleCall_0_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_18);
            lv_listpoint_0_0=ruleListPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getListSentenceRule());
              					}
              					set(
              						current,
              						"listpoint",
              						lv_listpoint_0_0,
              						"org.xixum.nlx.naturalLang.ListPoint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:1509:3: ( ( (lv_SentenceChain_1_0= ruleSentenceChainX ) ) | this_NEWLINE_2= RULE_NEWLINE )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==RULE_MULTI||(LA25_0>=RULE_DOT && LA25_0<=RULE_BR_O)||LA25_0==RULE_EXBR_O||LA25_0==RULE_EXBRC_O||(LA25_0>=RULE_ID && LA25_0<=RULE_DOUBLE_DOT)||LA25_0==RULE_SLASH||(LA25_0>=RULE_SEPARATORS_IT && LA25_0<=RULE_STRING)||(LA25_0>=RULE_PARAGR && LA25_0<=RULE_IGNORED)||(LA25_0>=RULE_OPERATORS && LA25_0<=RULE_AT)) ) {
                alt25=1;
            }
            else if ( (LA25_0==RULE_NEWLINE) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // InternalNaturalLang.g:1510:4: ( (lv_SentenceChain_1_0= ruleSentenceChainX ) )
                    {
                    // InternalNaturalLang.g:1510:4: ( (lv_SentenceChain_1_0= ruleSentenceChainX ) )
                    // InternalNaturalLang.g:1511:5: (lv_SentenceChain_1_0= ruleSentenceChainX )
                    {
                    // InternalNaturalLang.g:1511:5: (lv_SentenceChain_1_0= ruleSentenceChainX )
                    // InternalNaturalLang.g:1512:6: lv_SentenceChain_1_0= ruleSentenceChainX
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getListSentenceAccess().getSentenceChainSentenceChainXParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    lv_SentenceChain_1_0=ruleSentenceChainX();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getListSentenceRule());
                      						}
                      						set(
                      							current,
                      							"SentenceChain",
                      							lv_SentenceChain_1_0,
                      							"org.xixum.nlx.naturalLang.SentenceChainX");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:1530:4: this_NEWLINE_2= RULE_NEWLINE
                    {
                    this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_2, grammarAccess.getListSentenceAccess().getNEWLINETerminalRuleCall_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleListSentence"


    // $ANTLR start "entryRuleChapterSentence"
    // InternalNaturalLang.g:1539:1: entryRuleChapterSentence returns [EObject current=null] : iv_ruleChapterSentence= ruleChapterSentence EOF ;
    public final EObject entryRuleChapterSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleChapterSentence = null;


        try {
            // InternalNaturalLang.g:1539:56: (iv_ruleChapterSentence= ruleChapterSentence EOF )
            // InternalNaturalLang.g:1540:2: iv_ruleChapterSentence= ruleChapterSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getChapterSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleChapterSentence=ruleChapterSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleChapterSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleChapterSentence"


    // $ANTLR start "ruleChapterSentence"
    // InternalNaturalLang.g:1546:1: ruleChapterSentence returns [EObject current=null] : ( ( ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) ) | ( (lv_chapterNumber_1_0= ruleChapterAlpha ) ) | ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) ) ) ( (lv_Headline_3_0= ruleLineSentenceChain ) ) ) ;
    public final EObject ruleChapterSentence() throws RecognitionException {
        EObject current = null;

        EObject lv_chapterNumber_0_0 = null;

        EObject lv_chapterNumber_1_0 = null;

        EObject lv_chapterNumber_2_0 = null;

        EObject lv_Headline_3_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:1552:2: ( ( ( ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) ) | ( (lv_chapterNumber_1_0= ruleChapterAlpha ) ) | ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) ) ) ( (lv_Headline_3_0= ruleLineSentenceChain ) ) ) )
            // InternalNaturalLang.g:1553:2: ( ( ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) ) | ( (lv_chapterNumber_1_0= ruleChapterAlpha ) ) | ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) ) ) ( (lv_Headline_3_0= ruleLineSentenceChain ) ) )
            {
            // InternalNaturalLang.g:1553:2: ( ( ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) ) | ( (lv_chapterNumber_1_0= ruleChapterAlpha ) ) | ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) ) ) ( (lv_Headline_3_0= ruleLineSentenceChain ) ) )
            // InternalNaturalLang.g:1554:3: ( ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) ) | ( (lv_chapterNumber_1_0= ruleChapterAlpha ) ) | ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) ) ) ( (lv_Headline_3_0= ruleLineSentenceChain ) )
            {
            // InternalNaturalLang.g:1554:3: ( ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) ) | ( (lv_chapterNumber_1_0= ruleChapterAlpha ) ) | ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) ) )
            int alt26=3;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==RULE_INT) ) {
                int LA26_1 = input.LA(2);

                if ( (LA26_1==RULE_DOT) ) {
                    int LA26_3 = input.LA(3);

                    if ( (LA26_3==RULE_INT) ) {
                        int LA26_4 = input.LA(4);

                        if ( (synpred37_InternalNaturalLang()) ) {
                            alt26=1;
                        }
                        else if ( (true) ) {
                            alt26=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA26_3==RULE_ALPHA||(LA26_3>=RULE_ID_C && LA26_3<=RULE_ALL_ALPHA)||LA26_3==RULE_IT_ID||LA26_3==RULE_ID_ALL) ) {
                        alt26=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA26_0>=RULE_ID_C && LA26_0<=RULE_ALL_ALPHA)) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // InternalNaturalLang.g:1555:4: ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) )
                    {
                    // InternalNaturalLang.g:1555:4: ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) )
                    // InternalNaturalLang.g:1556:5: ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low )
                    {
                    // InternalNaturalLang.g:1560:5: (lv_chapterNumber_0_0= ruleChapter_Unit_Low )
                    // InternalNaturalLang.g:1561:6: lv_chapterNumber_0_0= ruleChapter_Unit_Low
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getChapterSentenceAccess().getChapterNumberChapter_Unit_LowParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_13);
                    lv_chapterNumber_0_0=ruleChapter_Unit_Low();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getChapterSentenceRule());
                      						}
                      						set(
                      							current,
                      							"chapterNumber",
                      							lv_chapterNumber_0_0,
                      							"org.xixum.nlx.naturalLang.Chapter_Unit_Low");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:1579:4: ( (lv_chapterNumber_1_0= ruleChapterAlpha ) )
                    {
                    // InternalNaturalLang.g:1579:4: ( (lv_chapterNumber_1_0= ruleChapterAlpha ) )
                    // InternalNaturalLang.g:1580:5: (lv_chapterNumber_1_0= ruleChapterAlpha )
                    {
                    // InternalNaturalLang.g:1580:5: (lv_chapterNumber_1_0= ruleChapterAlpha )
                    // InternalNaturalLang.g:1581:6: lv_chapterNumber_1_0= ruleChapterAlpha
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getChapterSentenceAccess().getChapterNumberChapterAlphaParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_13);
                    lv_chapterNumber_1_0=ruleChapterAlpha();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getChapterSentenceRule());
                      						}
                      						set(
                      							current,
                      							"chapterNumber",
                      							lv_chapterNumber_1_0,
                      							"org.xixum.nlx.naturalLang.ChapterAlpha");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:1599:4: ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) )
                    {
                    // InternalNaturalLang.g:1599:4: ( (lv_chapterNumber_2_0= ruleChapter_Unit_HI ) )
                    // InternalNaturalLang.g:1600:5: (lv_chapterNumber_2_0= ruleChapter_Unit_HI )
                    {
                    // InternalNaturalLang.g:1600:5: (lv_chapterNumber_2_0= ruleChapter_Unit_HI )
                    // InternalNaturalLang.g:1601:6: lv_chapterNumber_2_0= ruleChapter_Unit_HI
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getChapterSentenceAccess().getChapterNumberChapter_Unit_HIParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_13);
                    lv_chapterNumber_2_0=ruleChapter_Unit_HI();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getChapterSentenceRule());
                      						}
                      						set(
                      							current,
                      							"chapterNumber",
                      							lv_chapterNumber_2_0,
                      							"org.xixum.nlx.naturalLang.Chapter_Unit_HI");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:1619:3: ( (lv_Headline_3_0= ruleLineSentenceChain ) )
            // InternalNaturalLang.g:1620:4: (lv_Headline_3_0= ruleLineSentenceChain )
            {
            // InternalNaturalLang.g:1620:4: (lv_Headline_3_0= ruleLineSentenceChain )
            // InternalNaturalLang.g:1621:5: lv_Headline_3_0= ruleLineSentenceChain
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getChapterSentenceAccess().getHeadlineLineSentenceChainParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_Headline_3_0=ruleLineSentenceChain();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getChapterSentenceRule());
              					}
              					set(
              						current,
              						"Headline",
              						lv_Headline_3_0,
              						"org.xixum.nlx.naturalLang.LineSentenceChain");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleChapterSentence"


    // $ANTLR start "entryRuleSubSentence"
    // InternalNaturalLang.g:1642:1: entryRuleSubSentence returns [EObject current=null] : iv_ruleSubSentence= ruleSubSentence EOF ;
    public final EObject entryRuleSubSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSubSentence = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:1644:2: (iv_ruleSubSentence= ruleSubSentence EOF )
            // InternalNaturalLang.g:1645:2: iv_ruleSubSentence= ruleSubSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSubSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSubSentence=ruleSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSubSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleSubSentence"


    // $ANTLR start "ruleSubSentence"
    // InternalNaturalLang.g:1654:1: ruleSubSentence returns [EObject current=null] : ( () ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) | ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ ) ) ( (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )* )* (this_SPACE_13= RULE_SPACE )? ) ;
    public final EObject ruleSubSentence() throws RecognitionException {
        EObject current = null;

        Token this_SPACE_2=null;
        Token this_SPACE_5=null;
        Token this_SPACE_7=null;
        Token this_SPACE_9=null;
        Token this_SPACE_11=null;
        Token this_SPACE_13=null;
        EObject lv_elements_1_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_4_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;

        EObject lv_elements_10_0 = null;

        EObject lv_elements_12_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:1661:2: ( ( () ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) | ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ ) ) ( (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )* )* (this_SPACE_13= RULE_SPACE )? ) )
            // InternalNaturalLang.g:1662:2: ( () ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) | ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ ) ) ( (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )* )* (this_SPACE_13= RULE_SPACE )? )
            {
            // InternalNaturalLang.g:1662:2: ( () ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) | ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ ) ) ( (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )* )* (this_SPACE_13= RULE_SPACE )? )
            // InternalNaturalLang.g:1663:3: () ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) | ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ ) ) ( (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )* )* (this_SPACE_13= RULE_SPACE )?
            {
            // InternalNaturalLang.g:1663:3: ()
            // InternalNaturalLang.g:1664:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSubSentenceAccess().getSubSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:1673:3: ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) | ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ ) )
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // InternalNaturalLang.g:1674:4: ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* )
                    {
                    // InternalNaturalLang.g:1674:4: ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* )
                    // InternalNaturalLang.g:1675:5: ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )*
                    {
                    // InternalNaturalLang.g:1675:5: ( (lv_elements_1_0= ruleNoNElement ) )
                    // InternalNaturalLang.g:1676:6: (lv_elements_1_0= ruleNoNElement )
                    {
                    // InternalNaturalLang.g:1676:6: (lv_elements_1_0= ruleNoNElement )
                    // InternalNaturalLang.g:1677:7: lv_elements_1_0= ruleNoNElement
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsNoNElementParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FollowSets000.FOLLOW_19);
                    lv_elements_1_0=ruleNoNElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getSubSentenceRule());
                      							}
                      							add(
                      								current,
                      								"elements",
                      								lv_elements_1_0,
                      								"org.xixum.nlx.naturalLang.NoNElement");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalNaturalLang.g:1694:5: (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==RULE_SPACE) ) {
                            int LA27_1 = input.LA(2);

                            if ( ((LA27_1>=RULE_MULTI && LA27_1<=RULE_BR_O)||LA27_1==RULE_EXBR_O||LA27_1==RULE_EXBRC_O||(LA27_1>=RULE_ID && LA27_1<=RULE_DOUBLE_DOT)||(LA27_1>=RULE_HEX_NUMBER && LA27_1<=RULE_IGNORED)||(LA27_1>=RULE_OPERATORS && LA27_1<=RULE_AT)) ) {
                                alt27=1;
                            }


                        }


                        switch (alt27) {
                    	case 1 :
                    	    // InternalNaturalLang.g:1695:6: this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) )
                    	    {
                    	    this_SPACE_2=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_SPACE_2, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_1_0_1_0());
                    	      					
                    	    }
                    	    // InternalNaturalLang.g:1699:6: ( (lv_elements_3_0= ruleElements ) )
                    	    // InternalNaturalLang.g:1700:7: (lv_elements_3_0= ruleElements )
                    	    {
                    	    // InternalNaturalLang.g:1700:7: (lv_elements_3_0= ruleElements )
                    	    // InternalNaturalLang.g:1701:8: lv_elements_3_0= ruleElements
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsElementsParserRuleCall_1_0_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_19);
                    	    lv_elements_3_0=ruleElements();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getSubSentenceRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"elements",
                    	      									lv_elements_3_0,
                    	      									"org.xixum.nlx.naturalLang.Elements");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:1721:4: ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ )
                    {
                    // InternalNaturalLang.g:1721:4: ( ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+ )
                    // InternalNaturalLang.g:1722:5: ( (lv_elements_4_0= ruleNoNElementX ) ) (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+
                    {
                    // InternalNaturalLang.g:1722:5: ( (lv_elements_4_0= ruleNoNElementX ) )
                    // InternalNaturalLang.g:1723:6: (lv_elements_4_0= ruleNoNElementX )
                    {
                    // InternalNaturalLang.g:1723:6: (lv_elements_4_0= ruleNoNElementX )
                    // InternalNaturalLang.g:1724:7: lv_elements_4_0= ruleNoNElementX
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsNoNElementXParserRuleCall_1_1_0_0());
                      						
                    }
                    pushFollow(FollowSets000.FOLLOW_20);
                    lv_elements_4_0=ruleNoNElementX();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getSubSentenceRule());
                      							}
                      							add(
                      								current,
                      								"elements",
                      								lv_elements_4_0,
                      								"org.xixum.nlx.naturalLang.NoNElementX");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalNaturalLang.g:1741:5: (this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) ) )+
                    int cnt28=0;
                    loop28:
                    do {
                        int alt28=2;
                        int LA28_0 = input.LA(1);

                        if ( (LA28_0==RULE_SPACE) ) {
                            int LA28_1 = input.LA(2);

                            if ( ((LA28_1>=RULE_MULTI && LA28_1<=RULE_BR_O)||LA28_1==RULE_EXBR_O||LA28_1==RULE_EXBRC_O||(LA28_1>=RULE_ID && LA28_1<=RULE_DOUBLE_DOT)||(LA28_1>=RULE_HEX_NUMBER && LA28_1<=RULE_IGNORED)||(LA28_1>=RULE_OPERATORS && LA28_1<=RULE_AT)) ) {
                                alt28=1;
                            }


                        }


                        switch (alt28) {
                    	case 1 :
                    	    // InternalNaturalLang.g:1742:6: this_SPACE_5= RULE_SPACE ( (lv_elements_6_0= ruleElements ) )
                    	    {
                    	    this_SPACE_5=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_SPACE_5, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_1_1_1_0());
                    	      					
                    	    }
                    	    // InternalNaturalLang.g:1746:6: ( (lv_elements_6_0= ruleElements ) )
                    	    // InternalNaturalLang.g:1747:7: (lv_elements_6_0= ruleElements )
                    	    {
                    	    // InternalNaturalLang.g:1747:7: (lv_elements_6_0= ruleElements )
                    	    // InternalNaturalLang.g:1748:8: lv_elements_6_0= ruleElements
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsElementsParserRuleCall_1_1_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_19);
                    	    lv_elements_6_0=ruleElements();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getSubSentenceRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"elements",
                    	      									lv_elements_6_0,
                    	      									"org.xixum.nlx.naturalLang.Elements");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt28 >= 1 ) break loop28;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(28, input);
                                throw eee;
                        }
                        cnt28++;
                    } while (true);


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:1768:3: ( (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )* )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==RULE_SPACE) ) {
                    int LA33_1 = input.LA(2);

                    if ( (synpred45_InternalNaturalLang()) ) {
                        alt33=1;
                    }


                }
                else if ( (LA33_0==RULE_NEWLINE) ) {
                    int LA33_5 = input.LA(2);

                    if ( (synpred45_InternalNaturalLang()) ) {
                        alt33=1;
                    }


                }


                switch (alt33) {
            	case 1 :
            	    // InternalNaturalLang.g:1769:4: (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )*
            	    {
            	    // InternalNaturalLang.g:1769:4: (this_SPACE_7= RULE_SPACE )?
            	    int alt30=2;
            	    int LA30_0 = input.LA(1);

            	    if ( (LA30_0==RULE_SPACE) ) {
            	        alt30=1;
            	    }
            	    switch (alt30) {
            	        case 1 :
            	            // InternalNaturalLang.g:1770:5: this_SPACE_7= RULE_SPACE
            	            {
            	            this_SPACE_7=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_21); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(this_SPACE_7, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_2_0());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    // InternalNaturalLang.g:1775:4: ( (lv_elements_8_0= ruleNew_Line ) )
            	    // InternalNaturalLang.g:1776:5: (lv_elements_8_0= ruleNew_Line )
            	    {
            	    // InternalNaturalLang.g:1776:5: (lv_elements_8_0= ruleNew_Line )
            	    // InternalNaturalLang.g:1777:6: lv_elements_8_0= ruleNew_Line
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsNew_LineParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_22);
            	    lv_elements_8_0=ruleNew_Line();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSubSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"elements",
            	      							lv_elements_8_0,
            	      							"org.xixum.nlx.naturalLang.New_Line");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:1794:4: (this_SPACE_9= RULE_SPACE )?
            	    int alt31=2;
            	    int LA31_0 = input.LA(1);

            	    if ( (LA31_0==RULE_SPACE) ) {
            	        alt31=1;
            	    }
            	    switch (alt31) {
            	        case 1 :
            	            // InternalNaturalLang.g:1795:5: this_SPACE_9= RULE_SPACE
            	            {
            	            this_SPACE_9=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_23); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(this_SPACE_9, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_2_2());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    // InternalNaturalLang.g:1800:4: ( (lv_elements_10_0= ruleNoNElementX2 ) )
            	    // InternalNaturalLang.g:1801:5: (lv_elements_10_0= ruleNoNElementX2 )
            	    {
            	    // InternalNaturalLang.g:1801:5: (lv_elements_10_0= ruleNoNElementX2 )
            	    // InternalNaturalLang.g:1802:6: lv_elements_10_0= ruleNoNElementX2
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsNoNElementX2ParserRuleCall_2_3_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_19);
            	    lv_elements_10_0=ruleNoNElementX2();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSubSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"elements",
            	      							lv_elements_10_0,
            	      							"org.xixum.nlx.naturalLang.NoNElementX2");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:1819:4: (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )*
            	    loop32:
            	    do {
            	        int alt32=2;
            	        int LA32_0 = input.LA(1);

            	        if ( (LA32_0==RULE_SPACE) ) {
            	            int LA32_1 = input.LA(2);

            	            if ( ((LA32_1>=RULE_MULTI && LA32_1<=RULE_BR_O)||LA32_1==RULE_EXBR_O||LA32_1==RULE_EXBRC_O||(LA32_1>=RULE_ID && LA32_1<=RULE_DOUBLE_DOT)||(LA32_1>=RULE_HEX_NUMBER && LA32_1<=RULE_IGNORED)||(LA32_1>=RULE_OPERATORS && LA32_1<=RULE_AT)) ) {
            	                alt32=1;
            	            }


            	        }


            	        switch (alt32) {
            	    	case 1 :
            	    	    // InternalNaturalLang.g:1820:5: this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) )
            	    	    {
            	    	    this_SPACE_11=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      					newLeafNode(this_SPACE_11, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_2_4_0());
            	    	      				
            	    	    }
            	    	    // InternalNaturalLang.g:1824:5: ( (lv_elements_12_0= ruleElements ) )
            	    	    // InternalNaturalLang.g:1825:6: (lv_elements_12_0= ruleElements )
            	    	    {
            	    	    // InternalNaturalLang.g:1825:6: (lv_elements_12_0= ruleElements )
            	    	    // InternalNaturalLang.g:1826:7: lv_elements_12_0= ruleElements
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      							newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsElementsParserRuleCall_2_4_1_0());
            	    	      						
            	    	    }
            	    	    pushFollow(FollowSets000.FOLLOW_19);
            	    	    lv_elements_12_0=ruleElements();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      							if (current==null) {
            	    	      								current = createModelElementForParent(grammarAccess.getSubSentenceRule());
            	    	      							}
            	    	      							add(
            	    	      								current,
            	    	      								"elements",
            	    	      								lv_elements_12_0,
            	    	      								"org.xixum.nlx.naturalLang.Elements");
            	    	      							afterParserOrEnumRuleCall();
            	    	      						
            	    	    }

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop32;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            // InternalNaturalLang.g:1845:3: (this_SPACE_13= RULE_SPACE )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==RULE_SPACE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // InternalNaturalLang.g:1846:4: this_SPACE_13= RULE_SPACE
                    {
                    this_SPACE_13=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_13, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_3());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleSubSentence"


    // $ANTLR start "entryRuleTrailSubSentence"
    // InternalNaturalLang.g:1858:1: entryRuleTrailSubSentence returns [EObject current=null] : iv_ruleTrailSubSentence= ruleTrailSubSentence EOF ;
    public final EObject entryRuleTrailSubSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTrailSubSentence = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:1860:2: (iv_ruleTrailSubSentence= ruleTrailSubSentence EOF )
            // InternalNaturalLang.g:1861:2: iv_ruleTrailSubSentence= ruleTrailSubSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTrailSubSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleTrailSubSentence=ruleTrailSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTrailSubSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleTrailSubSentence"


    // $ANTLR start "ruleTrailSubSentence"
    // InternalNaturalLang.g:1870:1: ruleTrailSubSentence returns [EObject current=null] : ( () ( ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )* ) (this_SPACE_10= RULE_SPACE )? ) ;
    public final EObject ruleTrailSubSentence() throws RecognitionException {
        EObject current = null;

        Token this_SPACE_2=null;
        Token this_SPACE_4=null;
        Token this_SPACE_6=null;
        Token this_SPACE_8=null;
        Token this_SPACE_10=null;
        EObject lv_elements_1_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_7_0 = null;

        EObject lv_elements_9_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:1877:2: ( ( () ( ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )* ) (this_SPACE_10= RULE_SPACE )? ) )
            // InternalNaturalLang.g:1878:2: ( () ( ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )* ) (this_SPACE_10= RULE_SPACE )? )
            {
            // InternalNaturalLang.g:1878:2: ( () ( ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )* ) (this_SPACE_10= RULE_SPACE )? )
            // InternalNaturalLang.g:1879:3: () ( ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )* ) (this_SPACE_10= RULE_SPACE )?
            {
            // InternalNaturalLang.g:1879:3: ()
            // InternalNaturalLang.g:1880:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTrailSubSentenceAccess().getSubSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:1889:3: ( ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )* )
            // InternalNaturalLang.g:1890:4: ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )*
            {
            // InternalNaturalLang.g:1890:4: ( (lv_elements_1_0= ruleElements ) )
            // InternalNaturalLang.g:1891:5: (lv_elements_1_0= ruleElements )
            {
            // InternalNaturalLang.g:1891:5: (lv_elements_1_0= ruleElements )
            // InternalNaturalLang.g:1892:6: lv_elements_1_0= ruleElements
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsElementsParserRuleCall_1_0_0());
              					
            }
            pushFollow(FollowSets000.FOLLOW_19);
            lv_elements_1_0=ruleElements();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getTrailSubSentenceRule());
              						}
              						add(
              							current,
              							"elements",
              							lv_elements_1_0,
              							"org.xixum.nlx.naturalLang.Elements");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }

            // InternalNaturalLang.g:1909:4: (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==RULE_SPACE) ) {
                    int LA35_1 = input.LA(2);

                    if ( ((LA35_1>=RULE_MULTI && LA35_1<=RULE_BR_O)||LA35_1==RULE_EXBR_O||LA35_1==RULE_EXBRC_O||(LA35_1>=RULE_ID && LA35_1<=RULE_DOUBLE_DOT)||(LA35_1>=RULE_HEX_NUMBER && LA35_1<=RULE_IGNORED)||(LA35_1>=RULE_OPERATORS && LA35_1<=RULE_AT)) ) {
                        alt35=1;
                    }


                }


                switch (alt35) {
            	case 1 :
            	    // InternalNaturalLang.g:1910:5: this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) )
            	    {
            	    this_SPACE_2=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(this_SPACE_2, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_1_1_0());
            	      				
            	    }
            	    // InternalNaturalLang.g:1914:5: ( (lv_elements_3_0= ruleElements ) )
            	    // InternalNaturalLang.g:1915:6: (lv_elements_3_0= ruleElements )
            	    {
            	    // InternalNaturalLang.g:1915:6: (lv_elements_3_0= ruleElements )
            	    // InternalNaturalLang.g:1916:7: lv_elements_3_0= ruleElements
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsElementsParserRuleCall_1_1_1_0());
            	      						
            	    }
            	    pushFollow(FollowSets000.FOLLOW_19);
            	    lv_elements_3_0=ruleElements();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getTrailSubSentenceRule());
            	      							}
            	      							add(
            	      								current,
            	      								"elements",
            	      								lv_elements_3_0,
            	      								"org.xixum.nlx.naturalLang.Elements");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);

            // InternalNaturalLang.g:1934:4: ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==RULE_SPACE) ) {
                    int LA39_1 = input.LA(2);

                    if ( (synpred52_InternalNaturalLang()) ) {
                        alt39=1;
                    }


                }
                else if ( (LA39_0==RULE_NEWLINE) ) {
                    int LA39_4 = input.LA(2);

                    if ( (synpred52_InternalNaturalLang()) ) {
                        alt39=1;
                    }


                }


                switch (alt39) {
            	case 1 :
            	    // InternalNaturalLang.g:1935:5: (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )*
            	    {
            	    // InternalNaturalLang.g:1935:5: (this_SPACE_4= RULE_SPACE )?
            	    int alt36=2;
            	    int LA36_0 = input.LA(1);

            	    if ( (LA36_0==RULE_SPACE) ) {
            	        alt36=1;
            	    }
            	    switch (alt36) {
            	        case 1 :
            	            // InternalNaturalLang.g:1936:6: this_SPACE_4= RULE_SPACE
            	            {
            	            this_SPACE_4=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_21); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(this_SPACE_4, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_1_2_0());
            	              					
            	            }

            	            }
            	            break;

            	    }

            	    // InternalNaturalLang.g:1941:5: ( (lv_elements_5_0= ruleNew_Line ) )
            	    // InternalNaturalLang.g:1942:6: (lv_elements_5_0= ruleNew_Line )
            	    {
            	    // InternalNaturalLang.g:1942:6: (lv_elements_5_0= ruleNew_Line )
            	    // InternalNaturalLang.g:1943:7: lv_elements_5_0= ruleNew_Line
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsNew_LineParserRuleCall_1_2_1_0());
            	      						
            	    }
            	    pushFollow(FollowSets000.FOLLOW_22);
            	    lv_elements_5_0=ruleNew_Line();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getTrailSubSentenceRule());
            	      							}
            	      							add(
            	      								current,
            	      								"elements",
            	      								lv_elements_5_0,
            	      								"org.xixum.nlx.naturalLang.New_Line");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:1960:5: (this_SPACE_6= RULE_SPACE )?
            	    int alt37=2;
            	    int LA37_0 = input.LA(1);

            	    if ( (LA37_0==RULE_SPACE) ) {
            	        alt37=1;
            	    }
            	    switch (alt37) {
            	        case 1 :
            	            // InternalNaturalLang.g:1961:6: this_SPACE_6= RULE_SPACE
            	            {
            	            this_SPACE_6=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_23); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(this_SPACE_6, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_1_2_2());
            	              					
            	            }

            	            }
            	            break;

            	    }

            	    // InternalNaturalLang.g:1966:5: ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) )
            	    // InternalNaturalLang.g:1967:6: ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 )
            	    {
            	    // InternalNaturalLang.g:1971:6: (lv_elements_7_0= ruleNoNElementX2 )
            	    // InternalNaturalLang.g:1972:7: lv_elements_7_0= ruleNoNElementX2
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsNoNElementX2ParserRuleCall_1_2_3_0());
            	      						
            	    }
            	    pushFollow(FollowSets000.FOLLOW_19);
            	    lv_elements_7_0=ruleNoNElementX2();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getTrailSubSentenceRule());
            	      							}
            	      							add(
            	      								current,
            	      								"elements",
            	      								lv_elements_7_0,
            	      								"org.xixum.nlx.naturalLang.NoNElementX2");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:1989:5: (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )*
            	    loop38:
            	    do {
            	        int alt38=2;
            	        int LA38_0 = input.LA(1);

            	        if ( (LA38_0==RULE_SPACE) ) {
            	            int LA38_1 = input.LA(2);

            	            if ( ((LA38_1>=RULE_MULTI && LA38_1<=RULE_BR_O)||LA38_1==RULE_EXBR_O||LA38_1==RULE_EXBRC_O||(LA38_1>=RULE_ID && LA38_1<=RULE_DOUBLE_DOT)||(LA38_1>=RULE_HEX_NUMBER && LA38_1<=RULE_IGNORED)||(LA38_1>=RULE_OPERATORS && LA38_1<=RULE_AT)) ) {
            	                alt38=1;
            	            }


            	        }


            	        switch (alt38) {
            	    	case 1 :
            	    	    // InternalNaturalLang.g:1990:6: this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) )
            	    	    {
            	    	    this_SPACE_8=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      						newLeafNode(this_SPACE_8, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_1_2_4_0());
            	    	      					
            	    	    }
            	    	    // InternalNaturalLang.g:1994:6: ( (lv_elements_9_0= ruleElements ) )
            	    	    // InternalNaturalLang.g:1995:7: (lv_elements_9_0= ruleElements )
            	    	    {
            	    	    // InternalNaturalLang.g:1995:7: (lv_elements_9_0= ruleElements )
            	    	    // InternalNaturalLang.g:1996:8: lv_elements_9_0= ruleElements
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      								newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsElementsParserRuleCall_1_2_4_1_0());
            	    	      							
            	    	    }
            	    	    pushFollow(FollowSets000.FOLLOW_19);
            	    	    lv_elements_9_0=ruleElements();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      								if (current==null) {
            	    	      									current = createModelElementForParent(grammarAccess.getTrailSubSentenceRule());
            	    	      								}
            	    	      								add(
            	    	      									current,
            	    	      									"elements",
            	    	      									lv_elements_9_0,
            	    	      									"org.xixum.nlx.naturalLang.Elements");
            	    	      								afterParserOrEnumRuleCall();
            	    	      							
            	    	    }

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop38;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            // InternalNaturalLang.g:2016:3: (this_SPACE_10= RULE_SPACE )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==RULE_SPACE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // InternalNaturalLang.g:2017:4: this_SPACE_10= RULE_SPACE
                    {
                    this_SPACE_10=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_10, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleTrailSubSentence"


    // $ANTLR start "entryRuleFreeSubSentence"
    // InternalNaturalLang.g:2029:1: entryRuleFreeSubSentence returns [EObject current=null] : iv_ruleFreeSubSentence= ruleFreeSubSentence EOF ;
    public final EObject entryRuleFreeSubSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFreeSubSentence = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:2031:2: (iv_ruleFreeSubSentence= ruleFreeSubSentence EOF )
            // InternalNaturalLang.g:2032:2: iv_ruleFreeSubSentence= ruleFreeSubSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFreeSubSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleFreeSubSentence=ruleFreeSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFreeSubSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleFreeSubSentence"


    // $ANTLR start "ruleFreeSubSentence"
    // InternalNaturalLang.g:2041:1: ruleFreeSubSentence returns [EObject current=null] : ( () (this_SPACE_1= RULE_SPACE | ( (lv_elements_2_0= ruleNew_Line ) ) )* ( (lv_elements_3_0= ruleAllElements ) ) ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )* (this_SPACE_7= RULE_SPACE | ( (lv_elements_8_0= ruleNew_Line ) ) )* ) ;
    public final EObject ruleFreeSubSentence() throws RecognitionException {
        EObject current = null;

        Token this_SPACE_1=null;
        Token this_SPACE_4=null;
        Token this_SPACE_7=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:2048:2: ( ( () (this_SPACE_1= RULE_SPACE | ( (lv_elements_2_0= ruleNew_Line ) ) )* ( (lv_elements_3_0= ruleAllElements ) ) ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )* (this_SPACE_7= RULE_SPACE | ( (lv_elements_8_0= ruleNew_Line ) ) )* ) )
            // InternalNaturalLang.g:2049:2: ( () (this_SPACE_1= RULE_SPACE | ( (lv_elements_2_0= ruleNew_Line ) ) )* ( (lv_elements_3_0= ruleAllElements ) ) ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )* (this_SPACE_7= RULE_SPACE | ( (lv_elements_8_0= ruleNew_Line ) ) )* )
            {
            // InternalNaturalLang.g:2049:2: ( () (this_SPACE_1= RULE_SPACE | ( (lv_elements_2_0= ruleNew_Line ) ) )* ( (lv_elements_3_0= ruleAllElements ) ) ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )* (this_SPACE_7= RULE_SPACE | ( (lv_elements_8_0= ruleNew_Line ) ) )* )
            // InternalNaturalLang.g:2050:3: () (this_SPACE_1= RULE_SPACE | ( (lv_elements_2_0= ruleNew_Line ) ) )* ( (lv_elements_3_0= ruleAllElements ) ) ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )* (this_SPACE_7= RULE_SPACE | ( (lv_elements_8_0= ruleNew_Line ) ) )*
            {
            // InternalNaturalLang.g:2050:3: ()
            // InternalNaturalLang.g:2051:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFreeSubSentenceAccess().getSubSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:2060:3: (this_SPACE_1= RULE_SPACE | ( (lv_elements_2_0= ruleNew_Line ) ) )*
            loop41:
            do {
                int alt41=3;
                alt41 = dfa41.predict(input);
                switch (alt41) {
            	case 1 :
            	    // InternalNaturalLang.g:2061:4: this_SPACE_1= RULE_SPACE
            	    {
            	    this_SPACE_1=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_SPACE_1, grammarAccess.getFreeSubSentenceAccess().getSPACETerminalRuleCall_1_0());
            	      			
            	    }

            	    }
            	    break;
            	case 2 :
            	    // InternalNaturalLang.g:2066:4: ( (lv_elements_2_0= ruleNew_Line ) )
            	    {
            	    // InternalNaturalLang.g:2066:4: ( (lv_elements_2_0= ruleNew_Line ) )
            	    // InternalNaturalLang.g:2067:5: (lv_elements_2_0= ruleNew_Line )
            	    {
            	    // InternalNaturalLang.g:2067:5: (lv_elements_2_0= ruleNew_Line )
            	    // InternalNaturalLang.g:2068:6: lv_elements_2_0= ruleNew_Line
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsNew_LineParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_17);
            	    lv_elements_2_0=ruleNew_Line();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFreeSubSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"elements",
            	      							lv_elements_2_0,
            	      							"org.xixum.nlx.naturalLang.New_Line");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);

            // InternalNaturalLang.g:2086:3: ( (lv_elements_3_0= ruleAllElements ) )
            // InternalNaturalLang.g:2087:4: (lv_elements_3_0= ruleAllElements )
            {
            // InternalNaturalLang.g:2087:4: (lv_elements_3_0= ruleAllElements )
            // InternalNaturalLang.g:2088:5: lv_elements_3_0= ruleAllElements
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsAllElementsParserRuleCall_2_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_19);
            lv_elements_3_0=ruleAllElements();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFreeSubSentenceRule());
              					}
              					add(
              						current,
              						"elements",
              						lv_elements_3_0,
              						"org.xixum.nlx.naturalLang.AllElements");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:2105:3: ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )*
            loop43:
            do {
                int alt43=2;
                alt43 = dfa43.predict(input);
                switch (alt43) {
            	case 1 :
            	    // InternalNaturalLang.g:2106:4: (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) )
            	    {
            	    // InternalNaturalLang.g:2106:4: (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+
            	    int cnt42=0;
            	    loop42:
            	    do {
            	        int alt42=3;
            	        int LA42_0 = input.LA(1);

            	        if ( (LA42_0==RULE_NEWLINE) ) {
            	            int LA42_2 = input.LA(2);

            	            if ( (synpred57_InternalNaturalLang()) ) {
            	                alt42=2;
            	            }


            	        }
            	        else if ( (LA42_0==RULE_SPACE) ) {
            	            alt42=1;
            	        }


            	        switch (alt42) {
            	    	case 1 :
            	    	    // InternalNaturalLang.g:2107:5: this_SPACE_4= RULE_SPACE
            	    	    {
            	    	    this_SPACE_4=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_17); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      					newLeafNode(this_SPACE_4, grammarAccess.getFreeSubSentenceAccess().getSPACETerminalRuleCall_3_0_0());
            	    	      				
            	    	    }

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // InternalNaturalLang.g:2112:5: ( (lv_elements_5_0= ruleNew_Line ) )
            	    	    {
            	    	    // InternalNaturalLang.g:2112:5: ( (lv_elements_5_0= ruleNew_Line ) )
            	    	    // InternalNaturalLang.g:2113:6: (lv_elements_5_0= ruleNew_Line )
            	    	    {
            	    	    // InternalNaturalLang.g:2113:6: (lv_elements_5_0= ruleNew_Line )
            	    	    // InternalNaturalLang.g:2114:7: lv_elements_5_0= ruleNew_Line
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      							newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsNew_LineParserRuleCall_3_0_1_0());
            	    	      						
            	    	    }
            	    	    pushFollow(FollowSets000.FOLLOW_17);
            	    	    lv_elements_5_0=ruleNew_Line();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      							if (current==null) {
            	    	      								current = createModelElementForParent(grammarAccess.getFreeSubSentenceRule());
            	    	      							}
            	    	      							add(
            	    	      								current,
            	    	      								"elements",
            	    	      								lv_elements_5_0,
            	    	      								"org.xixum.nlx.naturalLang.New_Line");
            	    	      							afterParserOrEnumRuleCall();
            	    	      						
            	    	    }

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt42 >= 1 ) break loop42;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(42, input);
            	                throw eee;
            	        }
            	        cnt42++;
            	    } while (true);

            	    // InternalNaturalLang.g:2132:4: ( (lv_elements_6_0= ruleAllElements ) )
            	    // InternalNaturalLang.g:2133:5: (lv_elements_6_0= ruleAllElements )
            	    {
            	    // InternalNaturalLang.g:2133:5: (lv_elements_6_0= ruleAllElements )
            	    // InternalNaturalLang.g:2134:6: lv_elements_6_0= ruleAllElements
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsAllElementsParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_19);
            	    lv_elements_6_0=ruleAllElements();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFreeSubSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"elements",
            	      							lv_elements_6_0,
            	      							"org.xixum.nlx.naturalLang.AllElements");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);

            // InternalNaturalLang.g:2152:3: (this_SPACE_7= RULE_SPACE | ( (lv_elements_8_0= ruleNew_Line ) ) )*
            loop44:
            do {
                int alt44=3;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==RULE_SPACE) ) {
                    int LA44_2 = input.LA(2);

                    if ( (synpred59_InternalNaturalLang()) ) {
                        alt44=1;
                    }


                }
                else if ( (LA44_0==RULE_NEWLINE) ) {
                    int LA44_3 = input.LA(2);

                    if ( (synpred60_InternalNaturalLang()) ) {
                        alt44=2;
                    }


                }


                switch (alt44) {
            	case 1 :
            	    // InternalNaturalLang.g:2153:4: this_SPACE_7= RULE_SPACE
            	    {
            	    this_SPACE_7=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_19); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_SPACE_7, grammarAccess.getFreeSubSentenceAccess().getSPACETerminalRuleCall_4_0());
            	      			
            	    }

            	    }
            	    break;
            	case 2 :
            	    // InternalNaturalLang.g:2158:4: ( (lv_elements_8_0= ruleNew_Line ) )
            	    {
            	    // InternalNaturalLang.g:2158:4: ( (lv_elements_8_0= ruleNew_Line ) )
            	    // InternalNaturalLang.g:2159:5: (lv_elements_8_0= ruleNew_Line )
            	    {
            	    // InternalNaturalLang.g:2159:5: (lv_elements_8_0= ruleNew_Line )
            	    // InternalNaturalLang.g:2160:6: lv_elements_8_0= ruleNew_Line
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsNew_LineParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_19);
            	    lv_elements_8_0=ruleNew_Line();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFreeSubSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"elements",
            	      							lv_elements_8_0,
            	      							"org.xixum.nlx.naturalLang.New_Line");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleFreeSubSentence"


    // $ANTLR start "entryRuleLineSubSentence"
    // InternalNaturalLang.g:2185:1: entryRuleLineSubSentence returns [EObject current=null] : iv_ruleLineSubSentence= ruleLineSubSentence EOF ;
    public final EObject entryRuleLineSubSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLineSubSentence = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:2187:2: (iv_ruleLineSubSentence= ruleLineSubSentence EOF )
            // InternalNaturalLang.g:2188:2: iv_ruleLineSubSentence= ruleLineSubSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLineSubSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleLineSubSentence=ruleLineSubSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLineSubSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleLineSubSentence"


    // $ANTLR start "ruleLineSubSentence"
    // InternalNaturalLang.g:2197:1: ruleLineSubSentence returns [EObject current=null] : ( () ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* (this_SPACE_4= RULE_SPACE )? ) ;
    public final EObject ruleLineSubSentence() throws RecognitionException {
        EObject current = null;

        Token this_SPACE_2=null;
        Token this_SPACE_4=null;
        EObject lv_elements_1_0 = null;

        EObject lv_elements_3_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:2204:2: ( ( () ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* (this_SPACE_4= RULE_SPACE )? ) )
            // InternalNaturalLang.g:2205:2: ( () ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* (this_SPACE_4= RULE_SPACE )? )
            {
            // InternalNaturalLang.g:2205:2: ( () ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* (this_SPACE_4= RULE_SPACE )? )
            // InternalNaturalLang.g:2206:3: () ( (lv_elements_1_0= ruleElements ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* (this_SPACE_4= RULE_SPACE )?
            {
            // InternalNaturalLang.g:2206:3: ()
            // InternalNaturalLang.g:2207:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getLineSubSentenceAccess().getSubSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:2216:3: ( (lv_elements_1_0= ruleElements ) )
            // InternalNaturalLang.g:2217:4: (lv_elements_1_0= ruleElements )
            {
            // InternalNaturalLang.g:2217:4: (lv_elements_1_0= ruleElements )
            // InternalNaturalLang.g:2218:5: lv_elements_1_0= ruleElements
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLineSubSentenceAccess().getElementsElementsParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_24);
            lv_elements_1_0=ruleElements();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLineSubSentenceRule());
              					}
              					add(
              						current,
              						"elements",
              						lv_elements_1_0,
              						"org.xixum.nlx.naturalLang.Elements");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:2235:3: (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==RULE_SPACE) ) {
                    int LA45_1 = input.LA(2);

                    if ( ((LA45_1>=RULE_MULTI && LA45_1<=RULE_BR_O)||LA45_1==RULE_EXBR_O||LA45_1==RULE_EXBRC_O||(LA45_1>=RULE_ID && LA45_1<=RULE_DOUBLE_DOT)||(LA45_1>=RULE_HEX_NUMBER && LA45_1<=RULE_IGNORED)||(LA45_1>=RULE_OPERATORS && LA45_1<=RULE_AT)) ) {
                        alt45=1;
                    }


                }


                switch (alt45) {
            	case 1 :
            	    // InternalNaturalLang.g:2236:4: this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) )
            	    {
            	    this_SPACE_2=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_SPACE_2, grammarAccess.getLineSubSentenceAccess().getSPACETerminalRuleCall_2_0());
            	      			
            	    }
            	    // InternalNaturalLang.g:2240:4: ( (lv_elements_3_0= ruleElements ) )
            	    // InternalNaturalLang.g:2241:5: (lv_elements_3_0= ruleElements )
            	    {
            	    // InternalNaturalLang.g:2241:5: (lv_elements_3_0= ruleElements )
            	    // InternalNaturalLang.g:2242:6: lv_elements_3_0= ruleElements
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLineSubSentenceAccess().getElementsElementsParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_24);
            	    lv_elements_3_0=ruleElements();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLineSubSentenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"elements",
            	      							lv_elements_3_0,
            	      							"org.xixum.nlx.naturalLang.Elements");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);

            // InternalNaturalLang.g:2260:3: (this_SPACE_4= RULE_SPACE )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==RULE_SPACE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // InternalNaturalLang.g:2261:4: this_SPACE_4= RULE_SPACE
                    {
                    this_SPACE_4=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_4, grammarAccess.getLineSubSentenceAccess().getSPACETerminalRuleCall_3());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleLineSubSentence"


    // $ANTLR start "entryRuleListPoint"
    // InternalNaturalLang.g:2273:1: entryRuleListPoint returns [String current=null] : iv_ruleListPoint= ruleListPoint EOF ;
    public final String entryRuleListPoint() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleListPoint = null;


        try {
            // InternalNaturalLang.g:2273:49: (iv_ruleListPoint= ruleListPoint EOF )
            // InternalNaturalLang.g:2274:2: iv_ruleListPoint= ruleListPoint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListPointRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleListPoint=ruleListPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListPoint.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleListPoint"


    // $ANTLR start "ruleListPoint"
    // InternalNaturalLang.g:2280:1: ruleListPoint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_MULTI_0= RULE_MULTI | this_DASH_1= RULE_DASH | this_ListPointNum_2= ruleListPointNum | this_MINUS_3= RULE_MINUS ) ;
    public final AntlrDatatypeRuleToken ruleListPoint() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_MULTI_0=null;
        Token this_DASH_1=null;
        Token this_MINUS_3=null;
        AntlrDatatypeRuleToken this_ListPointNum_2 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2286:2: ( (this_MULTI_0= RULE_MULTI | this_DASH_1= RULE_DASH | this_ListPointNum_2= ruleListPointNum | this_MINUS_3= RULE_MINUS ) )
            // InternalNaturalLang.g:2287:2: (this_MULTI_0= RULE_MULTI | this_DASH_1= RULE_DASH | this_ListPointNum_2= ruleListPointNum | this_MINUS_3= RULE_MINUS )
            {
            // InternalNaturalLang.g:2287:2: (this_MULTI_0= RULE_MULTI | this_DASH_1= RULE_DASH | this_ListPointNum_2= ruleListPointNum | this_MINUS_3= RULE_MINUS )
            int alt47=4;
            switch ( input.LA(1) ) {
            case RULE_MULTI:
                {
                alt47=1;
                }
                break;
            case RULE_DASH:
                {
                alt47=2;
                }
                break;
            case RULE_INT:
            case RULE_ALPHA:
                {
                alt47=3;
                }
                break;
            case RULE_MINUS:
                {
                alt47=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }

            switch (alt47) {
                case 1 :
                    // InternalNaturalLang.g:2288:3: this_MULTI_0= RULE_MULTI
                    {
                    this_MULTI_0=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_MULTI_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_MULTI_0, grammarAccess.getListPointAccess().getMULTITerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2296:3: this_DASH_1= RULE_DASH
                    {
                    this_DASH_1=(Token)match(input,RULE_DASH,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DASH_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DASH_1, grammarAccess.getListPointAccess().getDASHTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:2304:3: this_ListPointNum_2= ruleListPointNum
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getListPointAccess().getListPointNumParserRuleCall_2());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ListPointNum_2=ruleListPointNum();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ListPointNum_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:2315:3: this_MINUS_3= RULE_MINUS
                    {
                    this_MINUS_3=(Token)match(input,RULE_MINUS,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_MINUS_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_MINUS_3, grammarAccess.getListPointAccess().getMINUSTerminalRuleCall_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleListPoint"


    // $ANTLR start "entryRuleListPointNum"
    // InternalNaturalLang.g:2326:1: entryRuleListPointNum returns [String current=null] : iv_ruleListPointNum= ruleListPointNum EOF ;
    public final String entryRuleListPointNum() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleListPointNum = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:2328:2: (iv_ruleListPointNum= ruleListPointNum EOF )
            // InternalNaturalLang.g:2329:2: iv_ruleListPointNum= ruleListPointNum EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListPointNumRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleListPointNum=ruleListPointNum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListPointNum.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleListPointNum"


    // $ANTLR start "ruleListPointNum"
    // InternalNaturalLang.g:2338:1: ruleListPointNum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (this_INT_0= RULE_INT ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM ) ) | (this_ALPHA_5= RULE_ALPHA ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM ) ) ) ;
    public final AntlrDatatypeRuleToken ruleListPointNum() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token this_DOT_1=null;
        Token this_BR_CL_2=null;
        Token this_SPACE_3=null;
        Token this_FULL_STOP_IM_4=null;
        Token this_ALPHA_5=null;
        Token this_DOT_6=null;
        Token this_BR_CL_7=null;
        Token this_SPACE_8=null;
        Token this_FULL_STOP_IM_9=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:2345:2: ( ( (this_INT_0= RULE_INT ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM ) ) | (this_ALPHA_5= RULE_ALPHA ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM ) ) ) )
            // InternalNaturalLang.g:2346:2: ( (this_INT_0= RULE_INT ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM ) ) | (this_ALPHA_5= RULE_ALPHA ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM ) ) )
            {
            // InternalNaturalLang.g:2346:2: ( (this_INT_0= RULE_INT ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM ) ) | (this_ALPHA_5= RULE_ALPHA ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM ) ) )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==RULE_INT) ) {
                alt50=1;
            }
            else if ( (LA50_0==RULE_ALPHA) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // InternalNaturalLang.g:2347:3: (this_INT_0= RULE_INT ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM ) )
                    {
                    // InternalNaturalLang.g:2347:3: (this_INT_0= RULE_INT ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM ) )
                    // InternalNaturalLang.g:2348:4: this_INT_0= RULE_INT ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM )
                    {
                    this_INT_0=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_INT_0);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_INT_0, grammarAccess.getListPointNumAccess().getINTTerminalRuleCall_0_0());
                      			
                    }
                    // InternalNaturalLang.g:2355:4: ( (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE ) | this_FULL_STOP_IM_4= RULE_FULL_STOP_IM )
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==RULE_DOT) ) {
                        alt48=1;
                    }
                    else if ( (LA48_0==RULE_FULL_STOP_IM) ) {
                        alt48=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 48, 0, input);

                        throw nvae;
                    }
                    switch (alt48) {
                        case 1 :
                            // InternalNaturalLang.g:2356:5: (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE )
                            {
                            // InternalNaturalLang.g:2356:5: (this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE )
                            // InternalNaturalLang.g:2357:6: this_DOT_1= RULE_DOT this_BR_CL_2= RULE_BR_CL this_SPACE_3= RULE_SPACE
                            {
                            this_DOT_1=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(this_DOT_1);
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						newLeafNode(this_DOT_1, grammarAccess.getListPointNumAccess().getDOTTerminalRuleCall_0_1_0_0());
                              					
                            }
                            this_BR_CL_2=(Token)match(input,RULE_BR_CL,FollowSets000.FOLLOW_20); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(this_BR_CL_2);
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						newLeafNode(this_BR_CL_2, grammarAccess.getListPointNumAccess().getBR_CLTerminalRuleCall_0_1_0_1());
                              					
                            }
                            this_SPACE_3=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(this_SPACE_3);
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						newLeafNode(this_SPACE_3, grammarAccess.getListPointNumAccess().getSPACETerminalRuleCall_0_1_0_2());
                              					
                            }

                            }


                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:2380:5: this_FULL_STOP_IM_4= RULE_FULL_STOP_IM
                            {
                            this_FULL_STOP_IM_4=(Token)match(input,RULE_FULL_STOP_IM,FollowSets000.FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_FULL_STOP_IM_4);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_FULL_STOP_IM_4, grammarAccess.getListPointNumAccess().getFULL_STOP_IMTerminalRuleCall_0_1_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2390:3: (this_ALPHA_5= RULE_ALPHA ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM ) )
                    {
                    // InternalNaturalLang.g:2390:3: (this_ALPHA_5= RULE_ALPHA ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM ) )
                    // InternalNaturalLang.g:2391:4: this_ALPHA_5= RULE_ALPHA ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM )
                    {
                    this_ALPHA_5=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_ALPHA_5);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_ALPHA_5, grammarAccess.getListPointNumAccess().getALPHATerminalRuleCall_1_0());
                      			
                    }
                    // InternalNaturalLang.g:2398:4: ( (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE ) | this_FULL_STOP_IM_9= RULE_FULL_STOP_IM )
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==RULE_DOT) ) {
                        alt49=1;
                    }
                    else if ( (LA49_0==RULE_FULL_STOP_IM) ) {
                        alt49=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 49, 0, input);

                        throw nvae;
                    }
                    switch (alt49) {
                        case 1 :
                            // InternalNaturalLang.g:2399:5: (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE )
                            {
                            // InternalNaturalLang.g:2399:5: (this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE )
                            // InternalNaturalLang.g:2400:6: this_DOT_6= RULE_DOT this_BR_CL_7= RULE_BR_CL this_SPACE_8= RULE_SPACE
                            {
                            this_DOT_6=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(this_DOT_6);
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						newLeafNode(this_DOT_6, grammarAccess.getListPointNumAccess().getDOTTerminalRuleCall_1_1_0_0());
                              					
                            }
                            this_BR_CL_7=(Token)match(input,RULE_BR_CL,FollowSets000.FOLLOW_20); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(this_BR_CL_7);
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						newLeafNode(this_BR_CL_7, grammarAccess.getListPointNumAccess().getBR_CLTerminalRuleCall_1_1_0_1());
                              					
                            }
                            this_SPACE_8=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(this_SPACE_8);
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						newLeafNode(this_SPACE_8, grammarAccess.getListPointNumAccess().getSPACETerminalRuleCall_1_1_0_2());
                              					
                            }

                            }


                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:2423:5: this_FULL_STOP_IM_9= RULE_FULL_STOP_IM
                            {
                            this_FULL_STOP_IM_9=(Token)match(input,RULE_FULL_STOP_IM,FollowSets000.FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_FULL_STOP_IM_9);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_FULL_STOP_IM_9, grammarAccess.getListPointNumAccess().getFULL_STOP_IMTerminalRuleCall_1_1_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleListPointNum"


    // $ANTLR start "entryRuleNoNElement"
    // InternalNaturalLang.g:2439:1: entryRuleNoNElement returns [EObject current=null] : iv_ruleNoNElement= ruleNoNElement EOF ;
    public final EObject entryRuleNoNElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNoNElement = null;


        try {
            // InternalNaturalLang.g:2439:51: (iv_ruleNoNElement= ruleNoNElement EOF )
            // InternalNaturalLang.g:2440:2: iv_ruleNoNElement= ruleNoNElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoNElementRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleNoNElement=ruleNoNElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoNElement; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNoNElement"


    // $ANTLR start "ruleNoNElement"
    // InternalNaturalLang.g:2446:1: ruleNoNElement returns [EObject current=null] : (this_Quote_0= ruleQuote | this_Brackets_1= ruleBrackets | this_Word_2= ruleWord | this_SymbolsX_3= ruleSymbolsX | this_IgnoredText_4= ruleIgnoredText | this_ShortCut_5= ruleShortCut | this_HashNumber_6= ruleHashNumber | this_UrlAdress_7= ruleUrlAdress | this_MailAdress_8= ruleMailAdress | this_Formula_9= ruleFormula | this_Array_10= ruleArray | this_ItWord_11= ruleItWord ) ;
    public final EObject ruleNoNElement() throws RecognitionException {
        EObject current = null;

        EObject this_Quote_0 = null;

        EObject this_Brackets_1 = null;

        EObject this_Word_2 = null;

        EObject this_SymbolsX_3 = null;

        EObject this_IgnoredText_4 = null;

        EObject this_ShortCut_5 = null;

        EObject this_HashNumber_6 = null;

        EObject this_UrlAdress_7 = null;

        EObject this_MailAdress_8 = null;

        EObject this_Formula_9 = null;

        EObject this_Array_10 = null;

        EObject this_ItWord_11 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2452:2: ( (this_Quote_0= ruleQuote | this_Brackets_1= ruleBrackets | this_Word_2= ruleWord | this_SymbolsX_3= ruleSymbolsX | this_IgnoredText_4= ruleIgnoredText | this_ShortCut_5= ruleShortCut | this_HashNumber_6= ruleHashNumber | this_UrlAdress_7= ruleUrlAdress | this_MailAdress_8= ruleMailAdress | this_Formula_9= ruleFormula | this_Array_10= ruleArray | this_ItWord_11= ruleItWord ) )
            // InternalNaturalLang.g:2453:2: (this_Quote_0= ruleQuote | this_Brackets_1= ruleBrackets | this_Word_2= ruleWord | this_SymbolsX_3= ruleSymbolsX | this_IgnoredText_4= ruleIgnoredText | this_ShortCut_5= ruleShortCut | this_HashNumber_6= ruleHashNumber | this_UrlAdress_7= ruleUrlAdress | this_MailAdress_8= ruleMailAdress | this_Formula_9= ruleFormula | this_Array_10= ruleArray | this_ItWord_11= ruleItWord )
            {
            // InternalNaturalLang.g:2453:2: (this_Quote_0= ruleQuote | this_Brackets_1= ruleBrackets | this_Word_2= ruleWord | this_SymbolsX_3= ruleSymbolsX | this_IgnoredText_4= ruleIgnoredText | this_ShortCut_5= ruleShortCut | this_HashNumber_6= ruleHashNumber | this_UrlAdress_7= ruleUrlAdress | this_MailAdress_8= ruleMailAdress | this_Formula_9= ruleFormula | this_Array_10= ruleArray | this_ItWord_11= ruleItWord )
            int alt51=12;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // InternalNaturalLang.g:2454:3: this_Quote_0= ruleQuote
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getQuoteParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Quote_0=ruleQuote();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Quote_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2466:3: this_Brackets_1= ruleBrackets
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getBracketsParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Brackets_1=ruleBrackets();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Brackets_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:2478:3: this_Word_2= ruleWord
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getWordParserRuleCall_2());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Word_2=ruleWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Word_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:2490:3: this_SymbolsX_3= ruleSymbolsX
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getSymbolsXParserRuleCall_3());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_SymbolsX_3=ruleSymbolsX();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SymbolsX_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalNaturalLang.g:2502:3: this_IgnoredText_4= ruleIgnoredText
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getIgnoredTextParserRuleCall_4());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_IgnoredText_4=ruleIgnoredText();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IgnoredText_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalNaturalLang.g:2514:3: this_ShortCut_5= ruleShortCut
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getShortCutParserRuleCall_5());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ShortCut_5=ruleShortCut();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ShortCut_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalNaturalLang.g:2526:3: this_HashNumber_6= ruleHashNumber
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getHashNumberParserRuleCall_6());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_HashNumber_6=ruleHashNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_HashNumber_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalNaturalLang.g:2538:3: this_UrlAdress_7= ruleUrlAdress
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getUrlAdressParserRuleCall_7());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_UrlAdress_7=ruleUrlAdress();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UrlAdress_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalNaturalLang.g:2550:3: this_MailAdress_8= ruleMailAdress
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getMailAdressParserRuleCall_8());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_MailAdress_8=ruleMailAdress();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MailAdress_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalNaturalLang.g:2562:3: this_Formula_9= ruleFormula
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getFormulaParserRuleCall_9());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Formula_9=ruleFormula();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Formula_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalNaturalLang.g:2574:3: this_Array_10= ruleArray
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getArrayParserRuleCall_10());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Array_10=ruleArray();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Array_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalNaturalLang.g:2586:3: this_ItWord_11= ruleItWord
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementAccess().getItWordParserRuleCall_11());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ItWord_11=ruleItWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ItWord_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNoNElement"


    // $ANTLR start "entryRuleBrackets"
    // InternalNaturalLang.g:2601:1: entryRuleBrackets returns [EObject current=null] : iv_ruleBrackets= ruleBrackets EOF ;
    public final EObject entryRuleBrackets() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBrackets = null;


        try {
            // InternalNaturalLang.g:2601:49: (iv_ruleBrackets= ruleBrackets EOF )
            // InternalNaturalLang.g:2602:2: iv_ruleBrackets= ruleBrackets EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBracketsRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleBrackets=ruleBrackets();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBrackets; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBrackets"


    // $ANTLR start "ruleBrackets"
    // InternalNaturalLang.g:2608:1: ruleBrackets returns [EObject current=null] : (this_BracketSentence_0= ruleBracketSentence | this_ExtBracketSentence_1= ruleExtBracketSentence | this_ExtBracketSentenceC_2= ruleExtBracketSentenceC ) ;
    public final EObject ruleBrackets() throws RecognitionException {
        EObject current = null;

        EObject this_BracketSentence_0 = null;

        EObject this_ExtBracketSentence_1 = null;

        EObject this_ExtBracketSentenceC_2 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2614:2: ( (this_BracketSentence_0= ruleBracketSentence | this_ExtBracketSentence_1= ruleExtBracketSentence | this_ExtBracketSentenceC_2= ruleExtBracketSentenceC ) )
            // InternalNaturalLang.g:2615:2: (this_BracketSentence_0= ruleBracketSentence | this_ExtBracketSentence_1= ruleExtBracketSentence | this_ExtBracketSentenceC_2= ruleExtBracketSentenceC )
            {
            // InternalNaturalLang.g:2615:2: (this_BracketSentence_0= ruleBracketSentence | this_ExtBracketSentence_1= ruleExtBracketSentence | this_ExtBracketSentenceC_2= ruleExtBracketSentenceC )
            int alt52=3;
            switch ( input.LA(1) ) {
            case RULE_BR_O:
                {
                alt52=1;
                }
                break;
            case RULE_EXBR_O:
                {
                alt52=2;
                }
                break;
            case RULE_EXBRC_O:
                {
                alt52=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // InternalNaturalLang.g:2616:3: this_BracketSentence_0= ruleBracketSentence
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBracketsAccess().getBracketSentenceParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_BracketSentence_0=ruleBracketSentence();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BracketSentence_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2628:3: this_ExtBracketSentence_1= ruleExtBracketSentence
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBracketsAccess().getExtBracketSentenceParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ExtBracketSentence_1=ruleExtBracketSentence();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExtBracketSentence_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:2640:3: this_ExtBracketSentenceC_2= ruleExtBracketSentenceC
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBracketsAccess().getExtBracketSentenceCParserRuleCall_2());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ExtBracketSentenceC_2=ruleExtBracketSentenceC();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExtBracketSentenceC_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBrackets"


    // $ANTLR start "entryRuleNoNElementX"
    // InternalNaturalLang.g:2655:1: entryRuleNoNElementX returns [EObject current=null] : iv_ruleNoNElementX= ruleNoNElementX EOF ;
    public final EObject entryRuleNoNElementX() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNoNElementX = null;


        try {
            // InternalNaturalLang.g:2655:52: (iv_ruleNoNElementX= ruleNoNElementX EOF )
            // InternalNaturalLang.g:2656:2: iv_ruleNoNElementX= ruleNoNElementX EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoNElementXRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleNoNElementX=ruleNoNElementX();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoNElementX; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNoNElementX"


    // $ANTLR start "ruleNoNElementX"
    // InternalNaturalLang.g:2662:1: ruleNoNElementX returns [EObject current=null] : (this_NoNElement_0= ruleNoNElement | this_WordShort_1= ruleWordShort ) ;
    public final EObject ruleNoNElementX() throws RecognitionException {
        EObject current = null;

        EObject this_NoNElement_0 = null;

        EObject this_WordShort_1 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2668:2: ( (this_NoNElement_0= ruleNoNElement | this_WordShort_1= ruleWordShort ) )
            // InternalNaturalLang.g:2669:2: (this_NoNElement_0= ruleNoNElement | this_WordShort_1= ruleWordShort )
            {
            // InternalNaturalLang.g:2669:2: (this_NoNElement_0= ruleNoNElement | this_WordShort_1= ruleWordShort )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==RULE_MULTI||LA53_0==RULE_DOT||LA53_0==RULE_BR_O||LA53_0==RULE_EXBR_O||LA53_0==RULE_EXBRC_O||(LA53_0>=RULE_ID && LA53_0<=RULE_DOUBLE_DOT)||LA53_0==RULE_SLASH||(LA53_0>=RULE_SEPARATORS_IT && LA53_0<=RULE_STRING)||(LA53_0>=RULE_PARAGR && LA53_0<=RULE_IGNORED)||(LA53_0>=RULE_OPERATORS && LA53_0<=RULE_AT)) ) {
                alt53=1;
            }
            else if ( (LA53_0==RULE_ALPHA) ) {
                int LA53_2 = input.LA(2);

                if ( ((LA53_2>=RULE_MULTI && LA53_2<=RULE_MINUS)||LA53_2==RULE_DOT||LA53_2==RULE_COLON||(LA53_2>=RULE_SLASH && LA53_2<=RULE_SEPARATORS_IT)) ) {
                    alt53=1;
                }
                else if ( (LA53_2==EOF||LA53_2==RULE_SPACE) ) {
                    alt53=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    // InternalNaturalLang.g:2670:3: this_NoNElement_0= ruleNoNElement
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementXAccess().getNoNElementParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_NoNElement_0=ruleNoNElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NoNElement_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2682:3: this_WordShort_1= ruleWordShort
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementXAccess().getWordShortParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_WordShort_1=ruleWordShort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WordShort_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNoNElementX"


    // $ANTLR start "entryRuleNoNElementX2"
    // InternalNaturalLang.g:2697:1: entryRuleNoNElementX2 returns [EObject current=null] : iv_ruleNoNElementX2= ruleNoNElementX2 EOF ;
    public final EObject entryRuleNoNElementX2() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNoNElementX2 = null;


        try {
            // InternalNaturalLang.g:2697:53: (iv_ruleNoNElementX2= ruleNoNElementX2 EOF )
            // InternalNaturalLang.g:2698:2: iv_ruleNoNElementX2= ruleNoNElementX2 EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoNElementX2Rule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleNoNElementX2=ruleNoNElementX2();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoNElementX2; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNoNElementX2"


    // $ANTLR start "ruleNoNElementX2"
    // InternalNaturalLang.g:2704:1: ruleNoNElementX2 returns [EObject current=null] : (this_SimpleUnit_0= ruleSimpleUnit | this_Unit_1= ruleUnit | this_NoNElement_2= ruleNoNElement | this_ChapterAlpha_3= ruleChapterAlpha ) ;
    public final EObject ruleNoNElementX2() throws RecognitionException {
        EObject current = null;

        EObject this_SimpleUnit_0 = null;

        EObject this_Unit_1 = null;

        EObject this_NoNElement_2 = null;

        EObject this_ChapterAlpha_3 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2710:2: ( (this_SimpleUnit_0= ruleSimpleUnit | this_Unit_1= ruleUnit | this_NoNElement_2= ruleNoNElement | this_ChapterAlpha_3= ruleChapterAlpha ) )
            // InternalNaturalLang.g:2711:2: (this_SimpleUnit_0= ruleSimpleUnit | this_Unit_1= ruleUnit | this_NoNElement_2= ruleNoNElement | this_ChapterAlpha_3= ruleChapterAlpha )
            {
            // InternalNaturalLang.g:2711:2: (this_SimpleUnit_0= ruleSimpleUnit | this_Unit_1= ruleUnit | this_NoNElement_2= ruleNoNElement | this_ChapterAlpha_3= ruleChapterAlpha )
            int alt54=4;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // InternalNaturalLang.g:2712:3: this_SimpleUnit_0= ruleSimpleUnit
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementX2Access().getSimpleUnitParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_SimpleUnit_0=ruleSimpleUnit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimpleUnit_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2724:3: this_Unit_1= ruleUnit
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementX2Access().getUnitParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Unit_1=ruleUnit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Unit_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:2736:3: this_NoNElement_2= ruleNoNElement
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementX2Access().getNoNElementParserRuleCall_2());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_NoNElement_2=ruleNoNElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NoNElement_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:2748:3: this_ChapterAlpha_3= ruleChapterAlpha
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNoNElementX2Access().getChapterAlphaParserRuleCall_3());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ChapterAlpha_3=ruleChapterAlpha();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ChapterAlpha_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNoNElementX2"


    // $ANTLR start "entryRuleElements"
    // InternalNaturalLang.g:2763:1: entryRuleElements returns [EObject current=null] : iv_ruleElements= ruleElements EOF ;
    public final EObject entryRuleElements() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleElements = null;


        try {
            // InternalNaturalLang.g:2763:49: (iv_ruleElements= ruleElements EOF )
            // InternalNaturalLang.g:2764:2: iv_ruleElements= ruleElements EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElementsRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleElements=ruleElements();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElements; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleElements"


    // $ANTLR start "ruleElements"
    // InternalNaturalLang.g:2770:1: ruleElements returns [EObject current=null] : (this_Symbols_0= ruleSymbols | ( ( ruleNoNElementX2 )=>this_NoNElementX2_1= ruleNoNElementX2 ) | this_WordShort_2= ruleWordShort ) ;
    public final EObject ruleElements() throws RecognitionException {
        EObject current = null;

        EObject this_Symbols_0 = null;

        EObject this_NoNElementX2_1 = null;

        EObject this_WordShort_2 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2776:2: ( (this_Symbols_0= ruleSymbols | ( ( ruleNoNElementX2 )=>this_NoNElementX2_1= ruleNoNElementX2 ) | this_WordShort_2= ruleWordShort ) )
            // InternalNaturalLang.g:2777:2: (this_Symbols_0= ruleSymbols | ( ( ruleNoNElementX2 )=>this_NoNElementX2_1= ruleNoNElementX2 ) | this_WordShort_2= ruleWordShort )
            {
            // InternalNaturalLang.g:2777:2: (this_Symbols_0= ruleSymbols | ( ( ruleNoNElementX2 )=>this_NoNElementX2_1= ruleNoNElementX2 ) | this_WordShort_2= ruleWordShort )
            int alt55=3;
            switch ( input.LA(1) ) {
            case RULE_DASH:
            case RULE_SEPARATORS:
            case RULE_PERCENT:
                {
                alt55=1;
                }
                break;
            case RULE_MINUS:
                {
                int LA55_2 = input.LA(2);

                if ( (LA55_2==EOF||(LA55_2>=RULE_NEWLINE && LA55_2<=RULE_SPACE)||LA55_2==RULE_DOT||LA55_2==RULE_FS||LA55_2==RULE_EXBR_CL||LA55_2==RULE_EXBRC_CL) ) {
                    alt55=1;
                }
                else if ( (LA55_2==RULE_INT) ) {
                    alt55=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 55, 2, input);

                    throw nvae;
                }
                }
                break;
            case RULE_MULTI:
                {
                switch ( input.LA(2) ) {
                case RULE_MULTI:
                case RULE_DASH:
                case RULE_MINUS:
                case RULE_INT:
                case RULE_ALPHA:
                case RULE_ID:
                case RULE_ID_C:
                case RULE_ALL_ALPHA:
                case RULE_CURL:
                case RULE_COLON:
                case RULE_IT_ID:
                case RULE_DOUBLE_DOT:
                case RULE_ID_ALL:
                case RULE_HEX_NUMBER:
                case RULE_SLASH:
                case RULE_SEPARATORS:
                case RULE_SEPARATORS_IT:
                    {
                    alt55=2;
                    }
                    break;
                case RULE_DOT:
                    {
                    int LA55_6 = input.LA(3);

                    if ( (LA55_6==RULE_NEWLINE||LA55_6==RULE_BR_CL||LA55_6==RULE_SPACE||LA55_6==RULE_EXBR_CL||LA55_6==RULE_EXBRC_CL) ) {
                        alt55=1;
                    }
                    else if ( ((LA55_6>=RULE_MULTI && LA55_6<=RULE_ALPHA)||(LA55_6>=RULE_ID && LA55_6<=RULE_ALL_ALPHA)||(LA55_6>=RULE_CURL && LA55_6<=RULE_SEPARATORS_IT)) ) {
                        alt55=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 55, 6, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_NEWLINE:
                case RULE_END:
                case RULE_BR_CL:
                case RULE_TABLE_LINE:
                case RULE_HORIZ_SEP:
                case RULE_FULL_STOP_IM:
                case RULE_FULL_STOP_NL:
                case RULE_KOMMA:
                case RULE_SPACE:
                case RULE_FS:
                case RULE_EXBR_CL:
                case RULE_EXBRC_CL:
                    {
                    alt55=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 55, 3, input);

                    throw nvae;
                }

                }
                break;
            case RULE_INT:
            case RULE_DOT:
            case RULE_BR_O:
            case RULE_EXBR_O:
            case RULE_EXBRC_O:
            case RULE_ID:
            case RULE_ID_C:
            case RULE_ALL_ALPHA:
            case RULE_HASH:
            case RULE_CURRENCY:
            case RULE_CURL:
            case RULE_COLON:
            case RULE_IT_ID:
            case RULE_DOUBLE_DOT:
            case RULE_HEX_NUMBER:
            case RULE_SLASH:
            case RULE_SEPARATORS_IT:
            case RULE_STRING:
            case RULE_PARAGR:
            case RULE_SHORTCUTS:
            case RULE_IGNORED:
            case RULE_OPERATORS:
            case RULE_ARROW:
            case RULE_SMILEY:
            case RULE_TRIPLE_DOT:
            case RULE_URL_PROTOCOL:
            case RULE_AT:
                {
                alt55=2;
                }
                break;
            case RULE_ALPHA:
                {
                switch ( input.LA(2) ) {
                case RULE_MULTI:
                case RULE_DASH:
                case RULE_MINUS:
                case RULE_COLON:
                case RULE_SLASH:
                case RULE_SEPARATORS:
                case RULE_SEPARATORS_IT:
                    {
                    alt55=2;
                    }
                    break;
                case RULE_DOT:
                    {
                    int LA55_7 = input.LA(3);

                    if ( (LA55_7==RULE_NEWLINE||LA55_7==RULE_BR_CL||LA55_7==RULE_SPACE||LA55_7==RULE_EXBR_CL||LA55_7==RULE_EXBRC_CL) ) {
                        alt55=3;
                    }
                    else if ( ((LA55_7>=RULE_MULTI && LA55_7<=RULE_ALPHA)||(LA55_7>=RULE_ID && LA55_7<=RULE_ALL_ALPHA)||(LA55_7>=RULE_CURL && LA55_7<=RULE_SEPARATORS_IT)) ) {
                        alt55=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 55, 7, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_NEWLINE:
                case RULE_END:
                case RULE_BR_CL:
                case RULE_TABLE_LINE:
                case RULE_HORIZ_SEP:
                case RULE_FULL_STOP_IM:
                case RULE_FULL_STOP_NL:
                case RULE_KOMMA:
                case RULE_SPACE:
                case RULE_FS:
                case RULE_EXBR_CL:
                case RULE_EXBRC_CL:
                    {
                    alt55=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 55, 5, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // InternalNaturalLang.g:2778:3: this_Symbols_0= ruleSymbols
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getElementsAccess().getSymbolsParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Symbols_0=ruleSymbols();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Symbols_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2790:3: ( ( ruleNoNElementX2 )=>this_NoNElementX2_1= ruleNoNElementX2 )
                    {
                    // InternalNaturalLang.g:2790:3: ( ( ruleNoNElementX2 )=>this_NoNElementX2_1= ruleNoNElementX2 )
                    // InternalNaturalLang.g:2791:4: ( ruleNoNElementX2 )=>this_NoNElementX2_1= ruleNoNElementX2
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getElementsAccess().getNoNElementX2ParserRuleCall_1());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_NoNElementX2_1=ruleNoNElementX2();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_NoNElementX2_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:2805:3: this_WordShort_2= ruleWordShort
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getElementsAccess().getWordShortParserRuleCall_2());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_WordShort_2=ruleWordShort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WordShort_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleElements"


    // $ANTLR start "entryRuleAllElements"
    // InternalNaturalLang.g:2820:1: entryRuleAllElements returns [EObject current=null] : iv_ruleAllElements= ruleAllElements EOF ;
    public final EObject entryRuleAllElements() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAllElements = null;


        try {
            // InternalNaturalLang.g:2820:52: (iv_ruleAllElements= ruleAllElements EOF )
            // InternalNaturalLang.g:2821:2: iv_ruleAllElements= ruleAllElements EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAllElementsRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleAllElements=ruleAllElements();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAllElements; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAllElements"


    // $ANTLR start "ruleAllElements"
    // InternalNaturalLang.g:2827:1: ruleAllElements returns [EObject current=null] : ( ( ( ruleElements )=>this_Elements_0= ruleElements ) | this_New_Line_1= ruleNew_Line ) ;
    public final EObject ruleAllElements() throws RecognitionException {
        EObject current = null;

        EObject this_Elements_0 = null;

        EObject this_New_Line_1 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2833:2: ( ( ( ( ruleElements )=>this_Elements_0= ruleElements ) | this_New_Line_1= ruleNew_Line ) )
            // InternalNaturalLang.g:2834:2: ( ( ( ruleElements )=>this_Elements_0= ruleElements ) | this_New_Line_1= ruleNew_Line )
            {
            // InternalNaturalLang.g:2834:2: ( ( ( ruleElements )=>this_Elements_0= ruleElements ) | this_New_Line_1= ruleNew_Line )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( ((LA56_0>=RULE_MULTI && LA56_0<=RULE_BR_O)||LA56_0==RULE_EXBR_O||LA56_0==RULE_EXBRC_O||(LA56_0>=RULE_ID && LA56_0<=RULE_DOUBLE_DOT)||(LA56_0>=RULE_HEX_NUMBER && LA56_0<=RULE_IGNORED)||(LA56_0>=RULE_OPERATORS && LA56_0<=RULE_AT)) ) {
                alt56=1;
            }
            else if ( (LA56_0==RULE_NEWLINE) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // InternalNaturalLang.g:2835:3: ( ( ruleElements )=>this_Elements_0= ruleElements )
                    {
                    // InternalNaturalLang.g:2835:3: ( ( ruleElements )=>this_Elements_0= ruleElements )
                    // InternalNaturalLang.g:2836:4: ( ruleElements )=>this_Elements_0= ruleElements
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAllElementsAccess().getElementsParserRuleCall_0());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_Elements_0=ruleElements();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Elements_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:2850:3: this_New_Line_1= ruleNew_Line
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAllElementsAccess().getNew_LineParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_New_Line_1=ruleNew_Line();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_New_Line_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAllElements"


    // $ANTLR start "entryRuleBracketSentence"
    // InternalNaturalLang.g:2865:1: entryRuleBracketSentence returns [EObject current=null] : iv_ruleBracketSentence= ruleBracketSentence EOF ;
    public final EObject entryRuleBracketSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBracketSentence = null;


        try {
            // InternalNaturalLang.g:2865:56: (iv_ruleBracketSentence= ruleBracketSentence EOF )
            // InternalNaturalLang.g:2866:2: iv_ruleBracketSentence= ruleBracketSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBracketSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleBracketSentence=ruleBracketSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBracketSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBracketSentence"


    // $ANTLR start "ruleBracketSentence"
    // InternalNaturalLang.g:2872:1: ruleBracketSentence returns [EObject current=null] : ( () ( (lv_open_1_0= RULE_BR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE | this_NEWLINE_7= RULE_NEWLINE )* (this_SPACE_8= RULE_SPACE )? ( ( ( RULE_BR_CL ) )=> (lv_close_9_0= RULE_BR_CL ) ) ) ;
    public final EObject ruleBracketSentence() throws RecognitionException {
        EObject current = null;

        Token lv_open_1_0=null;
        Token lv_separator_5_1=null;
        Token lv_separator_5_2=null;
        Token this_SPACE_6=null;
        Token this_NEWLINE_7=null;
        Token this_SPACE_8=null;
        Token lv_close_9_0=null;
        EObject lv_brackedSentences_2_0 = null;

        AntlrDatatypeRuleToken lv_separator_3_0 = null;

        EObject lv_brackedSentences_4_0 = null;

        AntlrDatatypeRuleToken lv_separator_5_3 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:2878:2: ( ( () ( (lv_open_1_0= RULE_BR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE | this_NEWLINE_7= RULE_NEWLINE )* (this_SPACE_8= RULE_SPACE )? ( ( ( RULE_BR_CL ) )=> (lv_close_9_0= RULE_BR_CL ) ) ) )
            // InternalNaturalLang.g:2879:2: ( () ( (lv_open_1_0= RULE_BR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE | this_NEWLINE_7= RULE_NEWLINE )* (this_SPACE_8= RULE_SPACE )? ( ( ( RULE_BR_CL ) )=> (lv_close_9_0= RULE_BR_CL ) ) )
            {
            // InternalNaturalLang.g:2879:2: ( () ( (lv_open_1_0= RULE_BR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE | this_NEWLINE_7= RULE_NEWLINE )* (this_SPACE_8= RULE_SPACE )? ( ( ( RULE_BR_CL ) )=> (lv_close_9_0= RULE_BR_CL ) ) )
            // InternalNaturalLang.g:2880:3: () ( (lv_open_1_0= RULE_BR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE | this_NEWLINE_7= RULE_NEWLINE )* (this_SPACE_8= RULE_SPACE )? ( ( ( RULE_BR_CL ) )=> (lv_close_9_0= RULE_BR_CL ) )
            {
            // InternalNaturalLang.g:2880:3: ()
            // InternalNaturalLang.g:2881:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBracketSentenceAccess().getBracketSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:2890:3: ( (lv_open_1_0= RULE_BR_O ) )
            // InternalNaturalLang.g:2891:4: (lv_open_1_0= RULE_BR_O )
            {
            // InternalNaturalLang.g:2891:4: (lv_open_1_0= RULE_BR_O )
            // InternalNaturalLang.g:2892:5: lv_open_1_0= RULE_BR_O
            {
            lv_open_1_0=(Token)match(input,RULE_BR_O,FollowSets000.FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_open_1_0, grammarAccess.getBracketSentenceAccess().getOpenBR_OTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getBracketSentenceRule());
              					}
              					setWithLastConsumed(
              						current,
              						"open",
              						lv_open_1_0,
              						"org.xixum.nlx.naturalLang.BR_O");
              				
            }

            }


            }

            // InternalNaturalLang.g:2908:3: ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )?
            int alt58=2;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // InternalNaturalLang.g:2909:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
                    {
                    // InternalNaturalLang.g:2909:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) )
                    // InternalNaturalLang.g:2910:5: (lv_brackedSentences_2_0= ruleFreeSentence )
                    {
                    // InternalNaturalLang.g:2910:5: (lv_brackedSentences_2_0= ruleFreeSentence )
                    // InternalNaturalLang.g:2911:6: lv_brackedSentences_2_0= ruleFreeSentence
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBracketSentenceAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_27);
                    lv_brackedSentences_2_0=ruleFreeSentence();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBracketSentenceRule());
                      						}
                      						add(
                      							current,
                      							"brackedSentences",
                      							lv_brackedSentences_2_0,
                      							"org.xixum.nlx.naturalLang.FreeSentence");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalNaturalLang.g:2928:4: ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
                    loop57:
                    do {
                        int alt57=2;
                        alt57 = dfa57.predict(input);
                        switch (alt57) {
                    	case 1 :
                    	    // InternalNaturalLang.g:2929:5: ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
                    	    {
                    	    // InternalNaturalLang.g:2929:5: ( (lv_separator_3_0= ruleFullStop ) )
                    	    // InternalNaturalLang.g:2930:6: (lv_separator_3_0= ruleFullStop )
                    	    {
                    	    // InternalNaturalLang.g:2930:6: (lv_separator_3_0= ruleFullStop )
                    	    // InternalNaturalLang.g:2931:7: lv_separator_3_0= ruleFullStop
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getBracketSentenceAccess().getSeparatorFullStopParserRuleCall_2_1_0_0());
                    	      						
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_17);
                    	    lv_separator_3_0=ruleFullStop();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBracketSentenceRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"separator",
                    	      								lv_separator_3_0,
                    	      								"org.xixum.nlx.naturalLang.FullStop");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }

                    	    // InternalNaturalLang.g:2948:5: ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
                    	    // InternalNaturalLang.g:2949:6: (lv_brackedSentences_4_0= ruleFreeSentence )
                    	    {
                    	    // InternalNaturalLang.g:2949:6: (lv_brackedSentences_4_0= ruleFreeSentence )
                    	    // InternalNaturalLang.g:2950:7: lv_brackedSentences_4_0= ruleFreeSentence
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getBracketSentenceAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_27);
                    	    lv_brackedSentences_4_0=ruleFreeSentence();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBracketSentenceRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"brackedSentences",
                    	      								lv_brackedSentences_4_0,
                    	      								"org.xixum.nlx.naturalLang.FreeSentence");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalNaturalLang.g:2969:3: ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( ((LA60_0>=RULE_FULL_STOP_IM && LA60_0<=RULE_FULL_STOP_NL)||LA60_0==RULE_DOT||LA60_0==RULE_FS) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // InternalNaturalLang.g:2970:4: ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) )
                    {
                    // InternalNaturalLang.g:2970:4: ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) )
                    // InternalNaturalLang.g:2971:5: (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop )
                    {
                    // InternalNaturalLang.g:2971:5: (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop )
                    int alt59=3;
                    switch ( input.LA(1) ) {
                    case RULE_DOT:
                        {
                        alt59=1;
                        }
                        break;
                    case RULE_FS:
                        {
                        alt59=2;
                        }
                        break;
                    case RULE_FULL_STOP_IM:
                    case RULE_FULL_STOP_NL:
                        {
                        alt59=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 59, 0, input);

                        throw nvae;
                    }

                    switch (alt59) {
                        case 1 :
                            // InternalNaturalLang.g:2972:6: lv_separator_5_1= RULE_DOT
                            {
                            lv_separator_5_1=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_28); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_separator_5_1, grammarAccess.getBracketSentenceAccess().getSeparatorDOTTerminalRuleCall_3_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBracketSentenceRule());
                              						}
                              						addWithLastConsumed(
                              							current,
                              							"separator",
                              							lv_separator_5_1,
                              							"org.xixum.nlx.naturalLang.DOT");
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:2987:6: lv_separator_5_2= RULE_FS
                            {
                            lv_separator_5_2=(Token)match(input,RULE_FS,FollowSets000.FOLLOW_28); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_separator_5_2, grammarAccess.getBracketSentenceAccess().getSeparatorFSTerminalRuleCall_3_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBracketSentenceRule());
                              						}
                              						addWithLastConsumed(
                              							current,
                              							"separator",
                              							lv_separator_5_2,
                              							"org.xixum.nlx.naturalLang.FS");
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalNaturalLang.g:3002:6: lv_separator_5_3= ruleFullStop
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getBracketSentenceAccess().getSeparatorFullStopParserRuleCall_3_0_2());
                              					
                            }
                            pushFollow(FollowSets000.FOLLOW_28);
                            lv_separator_5_3=ruleFullStop();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBracketSentenceRule());
                              						}
                              						add(
                              							current,
                              							"separator",
                              							lv_separator_5_3,
                              							"org.xixum.nlx.naturalLang.FullStop");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:3020:3: (this_SPACE_6= RULE_SPACE | this_NEWLINE_7= RULE_NEWLINE )*
            loop61:
            do {
                int alt61=3;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==RULE_SPACE) ) {
                    int LA61_1 = input.LA(2);

                    if ( (synpred96_InternalNaturalLang()) ) {
                        alt61=1;
                    }


                }
                else if ( (LA61_0==RULE_NEWLINE) ) {
                    alt61=2;
                }


                switch (alt61) {
            	case 1 :
            	    // InternalNaturalLang.g:3021:4: this_SPACE_6= RULE_SPACE
            	    {
            	    this_SPACE_6=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_SPACE_6, grammarAccess.getBracketSentenceAccess().getSPACETerminalRuleCall_4_0());
            	      			
            	    }

            	    }
            	    break;
            	case 2 :
            	    // InternalNaturalLang.g:3026:4: this_NEWLINE_7= RULE_NEWLINE
            	    {
            	    this_NEWLINE_7=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_NEWLINE_7, grammarAccess.getBracketSentenceAccess().getNEWLINETerminalRuleCall_4_1());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            // InternalNaturalLang.g:3031:3: (this_SPACE_8= RULE_SPACE )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==RULE_SPACE) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // InternalNaturalLang.g:3032:4: this_SPACE_8= RULE_SPACE
                    {
                    this_SPACE_8=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_7); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_8, grammarAccess.getBracketSentenceAccess().getSPACETerminalRuleCall_5());
                      			
                    }

                    }
                    break;

            }

            // InternalNaturalLang.g:3037:3: ( ( ( RULE_BR_CL ) )=> (lv_close_9_0= RULE_BR_CL ) )
            // InternalNaturalLang.g:3038:4: ( ( RULE_BR_CL ) )=> (lv_close_9_0= RULE_BR_CL )
            {
            // InternalNaturalLang.g:3042:4: (lv_close_9_0= RULE_BR_CL )
            // InternalNaturalLang.g:3043:5: lv_close_9_0= RULE_BR_CL
            {
            lv_close_9_0=(Token)match(input,RULE_BR_CL,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_close_9_0, grammarAccess.getBracketSentenceAccess().getCloseBR_CLTerminalRuleCall_6_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getBracketSentenceRule());
              					}
              					setWithLastConsumed(
              						current,
              						"close",
              						lv_close_9_0,
              						"org.xixum.nlx.naturalLang.BR_CL");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBracketSentence"


    // $ANTLR start "entryRuleExtBracketSentence"
    // InternalNaturalLang.g:3063:1: entryRuleExtBracketSentence returns [EObject current=null] : iv_ruleExtBracketSentence= ruleExtBracketSentence EOF ;
    public final EObject entryRuleExtBracketSentence() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExtBracketSentence = null;


        try {
            // InternalNaturalLang.g:3063:59: (iv_ruleExtBracketSentence= ruleExtBracketSentence EOF )
            // InternalNaturalLang.g:3064:2: iv_ruleExtBracketSentence= ruleExtBracketSentence EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExtBracketSentenceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleExtBracketSentence=ruleExtBracketSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExtBracketSentence; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExtBracketSentence"


    // $ANTLR start "ruleExtBracketSentence"
    // InternalNaturalLang.g:3070:1: ruleExtBracketSentence returns [EObject current=null] : ( () ( (lv_open_1_0= RULE_EXBR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBR_CL ) )=> (lv_close_7_0= RULE_EXBR_CL ) ) ) ;
    public final EObject ruleExtBracketSentence() throws RecognitionException {
        EObject current = null;

        Token lv_open_1_0=null;
        Token lv_separator_5_1=null;
        Token lv_separator_5_2=null;
        Token this_SPACE_6=null;
        Token lv_close_7_0=null;
        EObject lv_brackedSentences_2_0 = null;

        AntlrDatatypeRuleToken lv_separator_3_0 = null;

        EObject lv_brackedSentences_4_0 = null;

        AntlrDatatypeRuleToken lv_separator_5_3 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:3076:2: ( ( () ( (lv_open_1_0= RULE_EXBR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBR_CL ) )=> (lv_close_7_0= RULE_EXBR_CL ) ) ) )
            // InternalNaturalLang.g:3077:2: ( () ( (lv_open_1_0= RULE_EXBR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBR_CL ) )=> (lv_close_7_0= RULE_EXBR_CL ) ) )
            {
            // InternalNaturalLang.g:3077:2: ( () ( (lv_open_1_0= RULE_EXBR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBR_CL ) )=> (lv_close_7_0= RULE_EXBR_CL ) ) )
            // InternalNaturalLang.g:3078:3: () ( (lv_open_1_0= RULE_EXBR_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBR_CL ) )=> (lv_close_7_0= RULE_EXBR_CL ) )
            {
            // InternalNaturalLang.g:3078:3: ()
            // InternalNaturalLang.g:3079:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExtBracketSentenceAccess().getExtBracketSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:3088:3: ( (lv_open_1_0= RULE_EXBR_O ) )
            // InternalNaturalLang.g:3089:4: (lv_open_1_0= RULE_EXBR_O )
            {
            // InternalNaturalLang.g:3089:4: (lv_open_1_0= RULE_EXBR_O )
            // InternalNaturalLang.g:3090:5: lv_open_1_0= RULE_EXBR_O
            {
            lv_open_1_0=(Token)match(input,RULE_EXBR_O,FollowSets000.FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_open_1_0, grammarAccess.getExtBracketSentenceAccess().getOpenEXBR_OTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExtBracketSentenceRule());
              					}
              					setWithLastConsumed(
              						current,
              						"open",
              						lv_open_1_0,
              						"org.xixum.nlx.naturalLang.EXBR_O");
              				
            }

            }


            }

            // InternalNaturalLang.g:3106:3: ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case RULE_SPACE:
                    {
                    int LA64_1 = input.LA(2);

                    if ( (LA64_1==RULE_NEWLINE||(LA64_1>=RULE_SPACE && LA64_1<=RULE_BR_O)||LA64_1==RULE_EXBR_O||LA64_1==RULE_EXBRC_O||(LA64_1>=RULE_ID && LA64_1<=RULE_DOUBLE_DOT)||(LA64_1>=RULE_HEX_NUMBER && LA64_1<=RULE_IGNORED)||(LA64_1>=RULE_OPERATORS && LA64_1<=RULE_AT)) ) {
                        alt64=1;
                    }
                    }
                    break;
                case RULE_NEWLINE:
                case RULE_MULTI:
                case RULE_DASH:
                case RULE_MINUS:
                case RULE_INT:
                case RULE_ALPHA:
                case RULE_BR_O:
                case RULE_EXBR_O:
                case RULE_EXBRC_O:
                case RULE_ID:
                case RULE_ID_C:
                case RULE_ALL_ALPHA:
                case RULE_HASH:
                case RULE_CURRENCY:
                case RULE_CURL:
                case RULE_COLON:
                case RULE_IT_ID:
                case RULE_DOUBLE_DOT:
                case RULE_HEX_NUMBER:
                case RULE_SLASH:
                case RULE_SEPARATORS:
                case RULE_SEPARATORS_IT:
                case RULE_STRING:
                case RULE_PERCENT:
                case RULE_PARAGR:
                case RULE_SHORTCUTS:
                case RULE_IGNORED:
                case RULE_OPERATORS:
                case RULE_ARROW:
                case RULE_SMILEY:
                case RULE_TRIPLE_DOT:
                case RULE_URL_PROTOCOL:
                case RULE_AT:
                    {
                    alt64=1;
                    }
                    break;
                case RULE_DOT:
                    {
                    int LA64_3 = input.LA(2);

                    if ( (LA64_3==RULE_MULTI||(LA64_3>=RULE_INT && LA64_3<=RULE_ALPHA)||(LA64_3>=RULE_ID && LA64_3<=RULE_ALL_ALPHA)||(LA64_3>=RULE_CURL && LA64_3<=RULE_HEX_NUMBER)||LA64_3==RULE_SEPARATORS_IT) ) {
                        alt64=1;
                    }
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // InternalNaturalLang.g:3107:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
                    {
                    // InternalNaturalLang.g:3107:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) )
                    // InternalNaturalLang.g:3108:5: (lv_brackedSentences_2_0= ruleFreeSentence )
                    {
                    // InternalNaturalLang.g:3108:5: (lv_brackedSentences_2_0= ruleFreeSentence )
                    // InternalNaturalLang.g:3109:6: lv_brackedSentences_2_0= ruleFreeSentence
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExtBracketSentenceAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_30);
                    lv_brackedSentences_2_0=ruleFreeSentence();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExtBracketSentenceRule());
                      						}
                      						add(
                      							current,
                      							"brackedSentences",
                      							lv_brackedSentences_2_0,
                      							"org.xixum.nlx.naturalLang.FreeSentence");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalNaturalLang.g:3126:4: ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);

                        if ( (LA63_0==RULE_FULL_STOP_NL) ) {
                            int LA63_2 = input.LA(2);

                            if ( (LA63_2==RULE_SPACE) ) {
                                int LA63_4 = input.LA(3);

                                if ( (LA63_4==RULE_NEWLINE||(LA63_4>=RULE_SPACE && LA63_4<=RULE_BR_O)||LA63_4==RULE_EXBR_O||LA63_4==RULE_EXBRC_O||(LA63_4>=RULE_ID && LA63_4<=RULE_DOUBLE_DOT)||(LA63_4>=RULE_HEX_NUMBER && LA63_4<=RULE_IGNORED)||(LA63_4>=RULE_OPERATORS && LA63_4<=RULE_AT)) ) {
                                    alt63=1;
                                }


                            }
                            else if ( (LA63_2==RULE_NEWLINE||(LA63_2>=RULE_MULTI && LA63_2<=RULE_BR_O)||LA63_2==RULE_EXBR_O||LA63_2==RULE_EXBRC_O||(LA63_2>=RULE_ID && LA63_2<=RULE_DOUBLE_DOT)||(LA63_2>=RULE_HEX_NUMBER && LA63_2<=RULE_IGNORED)||(LA63_2>=RULE_OPERATORS && LA63_2<=RULE_AT)) ) {
                                alt63=1;
                            }


                        }
                        else if ( (LA63_0==RULE_FULL_STOP_IM) ) {
                            int LA63_3 = input.LA(2);

                            if ( (LA63_3==RULE_SPACE) ) {
                                int LA63_4 = input.LA(3);

                                if ( (LA63_4==RULE_NEWLINE||(LA63_4>=RULE_SPACE && LA63_4<=RULE_BR_O)||LA63_4==RULE_EXBR_O||LA63_4==RULE_EXBRC_O||(LA63_4>=RULE_ID && LA63_4<=RULE_DOUBLE_DOT)||(LA63_4>=RULE_HEX_NUMBER && LA63_4<=RULE_IGNORED)||(LA63_4>=RULE_OPERATORS && LA63_4<=RULE_AT)) ) {
                                    alt63=1;
                                }


                            }
                            else if ( (LA63_3==RULE_NEWLINE||(LA63_3>=RULE_MULTI && LA63_3<=RULE_BR_O)||LA63_3==RULE_EXBR_O||LA63_3==RULE_EXBRC_O||(LA63_3>=RULE_ID && LA63_3<=RULE_DOUBLE_DOT)||(LA63_3>=RULE_HEX_NUMBER && LA63_3<=RULE_IGNORED)||(LA63_3>=RULE_OPERATORS && LA63_3<=RULE_AT)) ) {
                                alt63=1;
                            }


                        }


                        switch (alt63) {
                    	case 1 :
                    	    // InternalNaturalLang.g:3127:5: ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
                    	    {
                    	    // InternalNaturalLang.g:3127:5: ( (lv_separator_3_0= ruleFullStop ) )
                    	    // InternalNaturalLang.g:3128:6: (lv_separator_3_0= ruleFullStop )
                    	    {
                    	    // InternalNaturalLang.g:3128:6: (lv_separator_3_0= ruleFullStop )
                    	    // InternalNaturalLang.g:3129:7: lv_separator_3_0= ruleFullStop
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExtBracketSentenceAccess().getSeparatorFullStopParserRuleCall_2_1_0_0());
                    	      						
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_17);
                    	    lv_separator_3_0=ruleFullStop();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExtBracketSentenceRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"separator",
                    	      								lv_separator_3_0,
                    	      								"org.xixum.nlx.naturalLang.FullStop");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }

                    	    // InternalNaturalLang.g:3146:5: ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
                    	    // InternalNaturalLang.g:3147:6: (lv_brackedSentences_4_0= ruleFreeSentence )
                    	    {
                    	    // InternalNaturalLang.g:3147:6: (lv_brackedSentences_4_0= ruleFreeSentence )
                    	    // InternalNaturalLang.g:3148:7: lv_brackedSentences_4_0= ruleFreeSentence
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExtBracketSentenceAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_30);
                    	    lv_brackedSentences_4_0=ruleFreeSentence();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExtBracketSentenceRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"brackedSentences",
                    	      								lv_brackedSentences_4_0,
                    	      								"org.xixum.nlx.naturalLang.FreeSentence");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalNaturalLang.g:3167:3: ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( ((LA66_0>=RULE_FULL_STOP_IM && LA66_0<=RULE_FULL_STOP_NL)||LA66_0==RULE_DOT||LA66_0==RULE_FS) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // InternalNaturalLang.g:3168:4: ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) )
                    {
                    // InternalNaturalLang.g:3168:4: ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) )
                    // InternalNaturalLang.g:3169:5: (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop )
                    {
                    // InternalNaturalLang.g:3169:5: (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop )
                    int alt65=3;
                    switch ( input.LA(1) ) {
                    case RULE_DOT:
                        {
                        alt65=1;
                        }
                        break;
                    case RULE_FS:
                        {
                        alt65=2;
                        }
                        break;
                    case RULE_FULL_STOP_IM:
                    case RULE_FULL_STOP_NL:
                        {
                        alt65=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 65, 0, input);

                        throw nvae;
                    }

                    switch (alt65) {
                        case 1 :
                            // InternalNaturalLang.g:3170:6: lv_separator_5_1= RULE_DOT
                            {
                            lv_separator_5_1=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_31); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_separator_5_1, grammarAccess.getExtBracketSentenceAccess().getSeparatorDOTTerminalRuleCall_3_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExtBracketSentenceRule());
                              						}
                              						addWithLastConsumed(
                              							current,
                              							"separator",
                              							lv_separator_5_1,
                              							"org.xixum.nlx.naturalLang.DOT");
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:3185:6: lv_separator_5_2= RULE_FS
                            {
                            lv_separator_5_2=(Token)match(input,RULE_FS,FollowSets000.FOLLOW_31); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_separator_5_2, grammarAccess.getExtBracketSentenceAccess().getSeparatorFSTerminalRuleCall_3_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExtBracketSentenceRule());
                              						}
                              						addWithLastConsumed(
                              							current,
                              							"separator",
                              							lv_separator_5_2,
                              							"org.xixum.nlx.naturalLang.FS");
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalNaturalLang.g:3200:6: lv_separator_5_3= ruleFullStop
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExtBracketSentenceAccess().getSeparatorFullStopParserRuleCall_3_0_2());
                              					
                            }
                            pushFollow(FollowSets000.FOLLOW_31);
                            lv_separator_5_3=ruleFullStop();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExtBracketSentenceRule());
                              						}
                              						add(
                              							current,
                              							"separator",
                              							lv_separator_5_3,
                              							"org.xixum.nlx.naturalLang.FullStop");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:3218:3: (this_SPACE_6= RULE_SPACE )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==RULE_SPACE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // InternalNaturalLang.g:3219:4: this_SPACE_6= RULE_SPACE
                    {
                    this_SPACE_6=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_6, grammarAccess.getExtBracketSentenceAccess().getSPACETerminalRuleCall_4());
                      			
                    }

                    }
                    break;

            }

            // InternalNaturalLang.g:3224:3: ( ( ( RULE_EXBR_CL ) )=> (lv_close_7_0= RULE_EXBR_CL ) )
            // InternalNaturalLang.g:3225:4: ( ( RULE_EXBR_CL ) )=> (lv_close_7_0= RULE_EXBR_CL )
            {
            // InternalNaturalLang.g:3229:4: (lv_close_7_0= RULE_EXBR_CL )
            // InternalNaturalLang.g:3230:5: lv_close_7_0= RULE_EXBR_CL
            {
            lv_close_7_0=(Token)match(input,RULE_EXBR_CL,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_close_7_0, grammarAccess.getExtBracketSentenceAccess().getCloseEXBR_CLTerminalRuleCall_5_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExtBracketSentenceRule());
              					}
              					setWithLastConsumed(
              						current,
              						"close",
              						lv_close_7_0,
              						"org.xixum.nlx.naturalLang.EXBR_CL");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExtBracketSentence"


    // $ANTLR start "entryRuleExtBracketSentenceC"
    // InternalNaturalLang.g:3250:1: entryRuleExtBracketSentenceC returns [EObject current=null] : iv_ruleExtBracketSentenceC= ruleExtBracketSentenceC EOF ;
    public final EObject entryRuleExtBracketSentenceC() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExtBracketSentenceC = null;


        try {
            // InternalNaturalLang.g:3250:60: (iv_ruleExtBracketSentenceC= ruleExtBracketSentenceC EOF )
            // InternalNaturalLang.g:3251:2: iv_ruleExtBracketSentenceC= ruleExtBracketSentenceC EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExtBracketSentenceCRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleExtBracketSentenceC=ruleExtBracketSentenceC();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExtBracketSentenceC; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExtBracketSentenceC"


    // $ANTLR start "ruleExtBracketSentenceC"
    // InternalNaturalLang.g:3257:1: ruleExtBracketSentenceC returns [EObject current=null] : ( () ( (lv_open_1_0= RULE_EXBRC_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBRC_CL ) )=> (lv_close_7_0= RULE_EXBRC_CL ) ) ) ;
    public final EObject ruleExtBracketSentenceC() throws RecognitionException {
        EObject current = null;

        Token lv_open_1_0=null;
        Token lv_separator_5_1=null;
        Token lv_separator_5_2=null;
        Token this_SPACE_6=null;
        Token lv_close_7_0=null;
        EObject lv_brackedSentences_2_0 = null;

        AntlrDatatypeRuleToken lv_separator_3_0 = null;

        EObject lv_brackedSentences_4_0 = null;

        AntlrDatatypeRuleToken lv_separator_5_3 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:3263:2: ( ( () ( (lv_open_1_0= RULE_EXBRC_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBRC_CL ) )=> (lv_close_7_0= RULE_EXBRC_CL ) ) ) )
            // InternalNaturalLang.g:3264:2: ( () ( (lv_open_1_0= RULE_EXBRC_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBRC_CL ) )=> (lv_close_7_0= RULE_EXBRC_CL ) ) )
            {
            // InternalNaturalLang.g:3264:2: ( () ( (lv_open_1_0= RULE_EXBRC_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBRC_CL ) )=> (lv_close_7_0= RULE_EXBRC_CL ) ) )
            // InternalNaturalLang.g:3265:3: () ( (lv_open_1_0= RULE_EXBRC_O ) ) ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )? ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )? (this_SPACE_6= RULE_SPACE )? ( ( ( RULE_EXBRC_CL ) )=> (lv_close_7_0= RULE_EXBRC_CL ) )
            {
            // InternalNaturalLang.g:3265:3: ()
            // InternalNaturalLang.g:3266:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExtBracketSentenceCAccess().getExtBracketSentenceAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:3275:3: ( (lv_open_1_0= RULE_EXBRC_O ) )
            // InternalNaturalLang.g:3276:4: (lv_open_1_0= RULE_EXBRC_O )
            {
            // InternalNaturalLang.g:3276:4: (lv_open_1_0= RULE_EXBRC_O )
            // InternalNaturalLang.g:3277:5: lv_open_1_0= RULE_EXBRC_O
            {
            lv_open_1_0=(Token)match(input,RULE_EXBRC_O,FollowSets000.FOLLOW_33); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_open_1_0, grammarAccess.getExtBracketSentenceCAccess().getOpenEXBRC_OTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExtBracketSentenceCRule());
              					}
              					setWithLastConsumed(
              						current,
              						"open",
              						lv_open_1_0,
              						"org.xixum.nlx.naturalLang.EXBRC_O");
              				
            }

            }


            }

            // InternalNaturalLang.g:3293:3: ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )?
            int alt69=2;
            switch ( input.LA(1) ) {
                case RULE_SPACE:
                    {
                    int LA69_1 = input.LA(2);

                    if ( (LA69_1==RULE_NEWLINE||(LA69_1>=RULE_SPACE && LA69_1<=RULE_BR_O)||LA69_1==RULE_EXBR_O||LA69_1==RULE_EXBRC_O||(LA69_1>=RULE_ID && LA69_1<=RULE_DOUBLE_DOT)||(LA69_1>=RULE_HEX_NUMBER && LA69_1<=RULE_IGNORED)||(LA69_1>=RULE_OPERATORS && LA69_1<=RULE_AT)) ) {
                        alt69=1;
                    }
                    }
                    break;
                case RULE_NEWLINE:
                case RULE_MULTI:
                case RULE_DASH:
                case RULE_MINUS:
                case RULE_INT:
                case RULE_ALPHA:
                case RULE_BR_O:
                case RULE_EXBR_O:
                case RULE_EXBRC_O:
                case RULE_ID:
                case RULE_ID_C:
                case RULE_ALL_ALPHA:
                case RULE_HASH:
                case RULE_CURRENCY:
                case RULE_CURL:
                case RULE_COLON:
                case RULE_IT_ID:
                case RULE_DOUBLE_DOT:
                case RULE_HEX_NUMBER:
                case RULE_SLASH:
                case RULE_SEPARATORS:
                case RULE_SEPARATORS_IT:
                case RULE_STRING:
                case RULE_PERCENT:
                case RULE_PARAGR:
                case RULE_SHORTCUTS:
                case RULE_IGNORED:
                case RULE_OPERATORS:
                case RULE_ARROW:
                case RULE_SMILEY:
                case RULE_TRIPLE_DOT:
                case RULE_URL_PROTOCOL:
                case RULE_AT:
                    {
                    alt69=1;
                    }
                    break;
                case RULE_DOT:
                    {
                    int LA69_3 = input.LA(2);

                    if ( (LA69_3==RULE_MULTI||(LA69_3>=RULE_INT && LA69_3<=RULE_ALPHA)||(LA69_3>=RULE_ID && LA69_3<=RULE_ALL_ALPHA)||(LA69_3>=RULE_CURL && LA69_3<=RULE_HEX_NUMBER)||LA69_3==RULE_SEPARATORS_IT) ) {
                        alt69=1;
                    }
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // InternalNaturalLang.g:3294:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
                    {
                    // InternalNaturalLang.g:3294:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) )
                    // InternalNaturalLang.g:3295:5: (lv_brackedSentences_2_0= ruleFreeSentence )
                    {
                    // InternalNaturalLang.g:3295:5: (lv_brackedSentences_2_0= ruleFreeSentence )
                    // InternalNaturalLang.g:3296:6: lv_brackedSentences_2_0= ruleFreeSentence
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExtBracketSentenceCAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_34);
                    lv_brackedSentences_2_0=ruleFreeSentence();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExtBracketSentenceCRule());
                      						}
                      						add(
                      							current,
                      							"brackedSentences",
                      							lv_brackedSentences_2_0,
                      							"org.xixum.nlx.naturalLang.FreeSentence");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalNaturalLang.g:3313:4: ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==RULE_FULL_STOP_NL) ) {
                            int LA68_2 = input.LA(2);

                            if ( (LA68_2==RULE_SPACE) ) {
                                int LA68_4 = input.LA(3);

                                if ( (LA68_4==RULE_NEWLINE||(LA68_4>=RULE_SPACE && LA68_4<=RULE_BR_O)||LA68_4==RULE_EXBR_O||LA68_4==RULE_EXBRC_O||(LA68_4>=RULE_ID && LA68_4<=RULE_DOUBLE_DOT)||(LA68_4>=RULE_HEX_NUMBER && LA68_4<=RULE_IGNORED)||(LA68_4>=RULE_OPERATORS && LA68_4<=RULE_AT)) ) {
                                    alt68=1;
                                }


                            }
                            else if ( (LA68_2==RULE_NEWLINE||(LA68_2>=RULE_MULTI && LA68_2<=RULE_BR_O)||LA68_2==RULE_EXBR_O||LA68_2==RULE_EXBRC_O||(LA68_2>=RULE_ID && LA68_2<=RULE_DOUBLE_DOT)||(LA68_2>=RULE_HEX_NUMBER && LA68_2<=RULE_IGNORED)||(LA68_2>=RULE_OPERATORS && LA68_2<=RULE_AT)) ) {
                                alt68=1;
                            }


                        }
                        else if ( (LA68_0==RULE_FULL_STOP_IM) ) {
                            int LA68_3 = input.LA(2);

                            if ( (LA68_3==RULE_SPACE) ) {
                                int LA68_4 = input.LA(3);

                                if ( (LA68_4==RULE_NEWLINE||(LA68_4>=RULE_SPACE && LA68_4<=RULE_BR_O)||LA68_4==RULE_EXBR_O||LA68_4==RULE_EXBRC_O||(LA68_4>=RULE_ID && LA68_4<=RULE_DOUBLE_DOT)||(LA68_4>=RULE_HEX_NUMBER && LA68_4<=RULE_IGNORED)||(LA68_4>=RULE_OPERATORS && LA68_4<=RULE_AT)) ) {
                                    alt68=1;
                                }


                            }
                            else if ( (LA68_3==RULE_NEWLINE||(LA68_3>=RULE_MULTI && LA68_3<=RULE_BR_O)||LA68_3==RULE_EXBR_O||LA68_3==RULE_EXBRC_O||(LA68_3>=RULE_ID && LA68_3<=RULE_DOUBLE_DOT)||(LA68_3>=RULE_HEX_NUMBER && LA68_3<=RULE_IGNORED)||(LA68_3>=RULE_OPERATORS && LA68_3<=RULE_AT)) ) {
                                alt68=1;
                            }


                        }


                        switch (alt68) {
                    	case 1 :
                    	    // InternalNaturalLang.g:3314:5: ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
                    	    {
                    	    // InternalNaturalLang.g:3314:5: ( (lv_separator_3_0= ruleFullStop ) )
                    	    // InternalNaturalLang.g:3315:6: (lv_separator_3_0= ruleFullStop )
                    	    {
                    	    // InternalNaturalLang.g:3315:6: (lv_separator_3_0= ruleFullStop )
                    	    // InternalNaturalLang.g:3316:7: lv_separator_3_0= ruleFullStop
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExtBracketSentenceCAccess().getSeparatorFullStopParserRuleCall_2_1_0_0());
                    	      						
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_17);
                    	    lv_separator_3_0=ruleFullStop();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExtBracketSentenceCRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"separator",
                    	      								lv_separator_3_0,
                    	      								"org.xixum.nlx.naturalLang.FullStop");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }

                    	    // InternalNaturalLang.g:3333:5: ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
                    	    // InternalNaturalLang.g:3334:6: (lv_brackedSentences_4_0= ruleFreeSentence )
                    	    {
                    	    // InternalNaturalLang.g:3334:6: (lv_brackedSentences_4_0= ruleFreeSentence )
                    	    // InternalNaturalLang.g:3335:7: lv_brackedSentences_4_0= ruleFreeSentence
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExtBracketSentenceCAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_34);
                    	    lv_brackedSentences_4_0=ruleFreeSentence();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExtBracketSentenceCRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"brackedSentences",
                    	      								lv_brackedSentences_4_0,
                    	      								"org.xixum.nlx.naturalLang.FreeSentence");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalNaturalLang.g:3354:3: ( ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) ) )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=RULE_FULL_STOP_IM && LA71_0<=RULE_FULL_STOP_NL)||LA71_0==RULE_DOT||LA71_0==RULE_FS) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // InternalNaturalLang.g:3355:4: ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) )
                    {
                    // InternalNaturalLang.g:3355:4: ( (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop ) )
                    // InternalNaturalLang.g:3356:5: (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop )
                    {
                    // InternalNaturalLang.g:3356:5: (lv_separator_5_1= RULE_DOT | lv_separator_5_2= RULE_FS | lv_separator_5_3= ruleFullStop )
                    int alt70=3;
                    switch ( input.LA(1) ) {
                    case RULE_DOT:
                        {
                        alt70=1;
                        }
                        break;
                    case RULE_FS:
                        {
                        alt70=2;
                        }
                        break;
                    case RULE_FULL_STOP_IM:
                    case RULE_FULL_STOP_NL:
                        {
                        alt70=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 70, 0, input);

                        throw nvae;
                    }

                    switch (alt70) {
                        case 1 :
                            // InternalNaturalLang.g:3357:6: lv_separator_5_1= RULE_DOT
                            {
                            lv_separator_5_1=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_35); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_separator_5_1, grammarAccess.getExtBracketSentenceCAccess().getSeparatorDOTTerminalRuleCall_3_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExtBracketSentenceCRule());
                              						}
                              						addWithLastConsumed(
                              							current,
                              							"separator",
                              							lv_separator_5_1,
                              							"org.xixum.nlx.naturalLang.DOT");
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:3372:6: lv_separator_5_2= RULE_FS
                            {
                            lv_separator_5_2=(Token)match(input,RULE_FS,FollowSets000.FOLLOW_35); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_separator_5_2, grammarAccess.getExtBracketSentenceCAccess().getSeparatorFSTerminalRuleCall_3_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExtBracketSentenceCRule());
                              						}
                              						addWithLastConsumed(
                              							current,
                              							"separator",
                              							lv_separator_5_2,
                              							"org.xixum.nlx.naturalLang.FS");
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalNaturalLang.g:3387:6: lv_separator_5_3= ruleFullStop
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExtBracketSentenceCAccess().getSeparatorFullStopParserRuleCall_3_0_2());
                              					
                            }
                            pushFollow(FollowSets000.FOLLOW_35);
                            lv_separator_5_3=ruleFullStop();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExtBracketSentenceCRule());
                              						}
                              						add(
                              							current,
                              							"separator",
                              							lv_separator_5_3,
                              							"org.xixum.nlx.naturalLang.FullStop");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:3405:3: (this_SPACE_6= RULE_SPACE )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==RULE_SPACE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalNaturalLang.g:3406:4: this_SPACE_6= RULE_SPACE
                    {
                    this_SPACE_6=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_6, grammarAccess.getExtBracketSentenceCAccess().getSPACETerminalRuleCall_4());
                      			
                    }

                    }
                    break;

            }

            // InternalNaturalLang.g:3411:3: ( ( ( RULE_EXBRC_CL ) )=> (lv_close_7_0= RULE_EXBRC_CL ) )
            // InternalNaturalLang.g:3412:4: ( ( RULE_EXBRC_CL ) )=> (lv_close_7_0= RULE_EXBRC_CL )
            {
            // InternalNaturalLang.g:3416:4: (lv_close_7_0= RULE_EXBRC_CL )
            // InternalNaturalLang.g:3417:5: lv_close_7_0= RULE_EXBRC_CL
            {
            lv_close_7_0=(Token)match(input,RULE_EXBRC_CL,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_close_7_0, grammarAccess.getExtBracketSentenceCAccess().getCloseEXBRC_CLTerminalRuleCall_5_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExtBracketSentenceCRule());
              					}
              					setWithLastConsumed(
              						current,
              						"close",
              						lv_close_7_0,
              						"org.xixum.nlx.naturalLang.EXBRC_CL");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExtBracketSentenceC"


    // $ANTLR start "entryRuleFullStop"
    // InternalNaturalLang.g:3437:1: entryRuleFullStop returns [String current=null] : iv_ruleFullStop= ruleFullStop EOF ;
    public final String entryRuleFullStop() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFullStop = null;


        try {
            // InternalNaturalLang.g:3437:48: (iv_ruleFullStop= ruleFullStop EOF )
            // InternalNaturalLang.g:3438:2: iv_ruleFullStop= ruleFullStop EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFullStopRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleFullStop=ruleFullStop();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFullStop.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFullStop"


    // $ANTLR start "ruleFullStop"
    // InternalNaturalLang.g:3444:1: ruleFullStop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_FULL_STOP_NL_0= RULE_FULL_STOP_NL | this_FULL_STOP_IM_1= RULE_FULL_STOP_IM ) ;
    public final AntlrDatatypeRuleToken ruleFullStop() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_FULL_STOP_NL_0=null;
        Token this_FULL_STOP_IM_1=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:3450:2: ( (this_FULL_STOP_NL_0= RULE_FULL_STOP_NL | this_FULL_STOP_IM_1= RULE_FULL_STOP_IM ) )
            // InternalNaturalLang.g:3451:2: (this_FULL_STOP_NL_0= RULE_FULL_STOP_NL | this_FULL_STOP_IM_1= RULE_FULL_STOP_IM )
            {
            // InternalNaturalLang.g:3451:2: (this_FULL_STOP_NL_0= RULE_FULL_STOP_NL | this_FULL_STOP_IM_1= RULE_FULL_STOP_IM )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==RULE_FULL_STOP_NL) ) {
                alt73=1;
            }
            else if ( (LA73_0==RULE_FULL_STOP_IM) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // InternalNaturalLang.g:3452:3: this_FULL_STOP_NL_0= RULE_FULL_STOP_NL
                    {
                    this_FULL_STOP_NL_0=(Token)match(input,RULE_FULL_STOP_NL,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_FULL_STOP_NL_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_FULL_STOP_NL_0, grammarAccess.getFullStopAccess().getFULL_STOP_NLTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:3460:3: this_FULL_STOP_IM_1= RULE_FULL_STOP_IM
                    {
                    this_FULL_STOP_IM_1=(Token)match(input,RULE_FULL_STOP_IM,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_FULL_STOP_IM_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_FULL_STOP_IM_1, grammarAccess.getFullStopAccess().getFULL_STOP_IMTerminalRuleCall_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFullStop"


    // $ANTLR start "entryRuleWord"
    // InternalNaturalLang.g:3471:1: entryRuleWord returns [EObject current=null] : iv_ruleWord= ruleWord EOF ;
    public final EObject entryRuleWord() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWord = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:3473:2: (iv_ruleWord= ruleWord EOF )
            // InternalNaturalLang.g:3474:2: iv_ruleWord= ruleWord EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWordRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleWord=ruleWord();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWord; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleWord"


    // $ANTLR start "ruleWord"
    // InternalNaturalLang.g:3483:1: ruleWord returns [EObject current=null] : ( ( ( (lv_word_0_0= ruleFragmentX ) ) | ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ ) ) ( (lv_word_4_0= ruleSeparatorsL ) )? ) ;
    public final EObject ruleWord() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_word_0_0 = null;

        AntlrDatatypeRuleToken lv_word_1_0 = null;

        AntlrDatatypeRuleToken lv_word_2_0 = null;

        AntlrDatatypeRuleToken lv_word_3_0 = null;

        AntlrDatatypeRuleToken lv_word_4_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:3490:2: ( ( ( ( (lv_word_0_0= ruleFragmentX ) ) | ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ ) ) ( (lv_word_4_0= ruleSeparatorsL ) )? ) )
            // InternalNaturalLang.g:3491:2: ( ( ( (lv_word_0_0= ruleFragmentX ) ) | ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ ) ) ( (lv_word_4_0= ruleSeparatorsL ) )? )
            {
            // InternalNaturalLang.g:3491:2: ( ( ( (lv_word_0_0= ruleFragmentX ) ) | ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ ) ) ( (lv_word_4_0= ruleSeparatorsL ) )? )
            // InternalNaturalLang.g:3492:3: ( ( (lv_word_0_0= ruleFragmentX ) ) | ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ ) ) ( (lv_word_4_0= ruleSeparatorsL ) )?
            {
            // InternalNaturalLang.g:3492:3: ( ( (lv_word_0_0= ruleFragmentX ) ) | ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ ) )
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // InternalNaturalLang.g:3493:4: ( (lv_word_0_0= ruleFragmentX ) )
                    {
                    // InternalNaturalLang.g:3493:4: ( (lv_word_0_0= ruleFragmentX ) )
                    // InternalNaturalLang.g:3494:5: (lv_word_0_0= ruleFragmentX )
                    {
                    // InternalNaturalLang.g:3494:5: (lv_word_0_0= ruleFragmentX )
                    // InternalNaturalLang.g:3495:6: lv_word_0_0= ruleFragmentX
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWordAccess().getWordFragmentXParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_37);
                    lv_word_0_0=ruleFragmentX();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWordRule());
                      						}
                      						add(
                      							current,
                      							"word",
                      							lv_word_0_0,
                      							"org.xixum.nlx.naturalLang.FragmentX");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:3513:4: ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ )
                    {
                    // InternalNaturalLang.g:3513:4: ( ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+ )
                    // InternalNaturalLang.g:3514:5: ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) ) ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+
                    {
                    // InternalNaturalLang.g:3514:5: ( ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) ) )
                    // InternalNaturalLang.g:3515:6: ( ( ( ruleFragment ) ) )=> ( (lv_word_1_0= ruleFragment ) )
                    {
                    // InternalNaturalLang.g:3521:6: ( (lv_word_1_0= ruleFragment ) )
                    // InternalNaturalLang.g:3522:7: (lv_word_1_0= ruleFragment )
                    {
                    // InternalNaturalLang.g:3522:7: (lv_word_1_0= ruleFragment )
                    // InternalNaturalLang.g:3523:8: lv_word_1_0= ruleFragment
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getWordAccess().getWordFragmentParserRuleCall_0_1_0_0_0());
                      							
                    }
                    pushFollow(FollowSets000.FOLLOW_38);
                    lv_word_1_0=ruleFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getWordRule());
                      								}
                      								add(
                      									current,
                      									"word",
                      									lv_word_1_0,
                      									"org.xixum.nlx.naturalLang.Fragment");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }

                    // InternalNaturalLang.g:3541:5: ( ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) ) )+
                    int cnt74=0;
                    loop74:
                    do {
                        int alt74=2;
                        switch ( input.LA(1) ) {
                        case RULE_SLASH:
                            {
                            int LA74_1 = input.LA(2);

                            if ( (LA74_1==RULE_ALPHA||(LA74_1>=RULE_ID && LA74_1<=RULE_ALL_ALPHA)) ) {
                                alt74=1;
                            }


                            }
                            break;
                        case RULE_SEPARATORS:
                            {
                            int LA74_2 = input.LA(2);

                            if ( (LA74_2==RULE_ALPHA||(LA74_2>=RULE_ID && LA74_2<=RULE_ALL_ALPHA)) ) {
                                alt74=1;
                            }


                            }
                            break;
                        case RULE_DASH:
                            {
                            int LA74_3 = input.LA(2);

                            if ( (LA74_3==RULE_ALPHA||(LA74_3>=RULE_ID && LA74_3<=RULE_ALL_ALPHA)) ) {
                                alt74=1;
                            }


                            }
                            break;
                        case RULE_MINUS:
                            {
                            int LA74_4 = input.LA(2);

                            if ( (LA74_4==RULE_ALPHA||(LA74_4>=RULE_ID && LA74_4<=RULE_ALL_ALPHA)) ) {
                                alt74=1;
                            }


                            }
                            break;

                        }

                        switch (alt74) {
                    	case 1 :
                    	    // InternalNaturalLang.g:3542:6: ( (lv_word_2_0= ruleSeparatorsL ) ) ( (lv_word_3_0= ruleFragment ) )
                    	    {
                    	    // InternalNaturalLang.g:3542:6: ( (lv_word_2_0= ruleSeparatorsL ) )
                    	    // InternalNaturalLang.g:3543:7: (lv_word_2_0= ruleSeparatorsL )
                    	    {
                    	    // InternalNaturalLang.g:3543:7: (lv_word_2_0= ruleSeparatorsL )
                    	    // InternalNaturalLang.g:3544:8: lv_word_2_0= ruleSeparatorsL
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getWordAccess().getWordSeparatorsLParserRuleCall_0_1_1_0_0());
                    	      							
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_39);
                    	    lv_word_2_0=ruleSeparatorsL();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getWordRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"word",
                    	      									lv_word_2_0,
                    	      									"org.xixum.nlx.naturalLang.SeparatorsL");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }

                    	    // InternalNaturalLang.g:3561:6: ( (lv_word_3_0= ruleFragment ) )
                    	    // InternalNaturalLang.g:3562:7: (lv_word_3_0= ruleFragment )
                    	    {
                    	    // InternalNaturalLang.g:3562:7: (lv_word_3_0= ruleFragment )
                    	    // InternalNaturalLang.g:3563:8: lv_word_3_0= ruleFragment
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getWordAccess().getWordFragmentParserRuleCall_0_1_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_37);
                    	    lv_word_3_0=ruleFragment();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getWordRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"word",
                    	      									lv_word_3_0,
                    	      									"org.xixum.nlx.naturalLang.Fragment");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt74 >= 1 ) break loop74;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(74, input);
                                throw eee;
                        }
                        cnt74++;
                    } while (true);


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:3583:3: ( (lv_word_4_0= ruleSeparatorsL ) )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=RULE_DASH && LA76_0<=RULE_MINUS)||(LA76_0>=RULE_SLASH && LA76_0<=RULE_SEPARATORS)) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalNaturalLang.g:3584:4: (lv_word_4_0= ruleSeparatorsL )
                    {
                    // InternalNaturalLang.g:3584:4: (lv_word_4_0= ruleSeparatorsL )
                    // InternalNaturalLang.g:3585:5: lv_word_4_0= ruleSeparatorsL
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getWordAccess().getWordSeparatorsLParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    lv_word_4_0=ruleSeparatorsL();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getWordRule());
                      					}
                      					add(
                      						current,
                      						"word",
                      						lv_word_4_0,
                      						"org.xixum.nlx.naturalLang.SeparatorsL");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleWord"


    // $ANTLR start "entryRuleWordShort"
    // InternalNaturalLang.g:3609:1: entryRuleWordShort returns [EObject current=null] : iv_ruleWordShort= ruleWordShort EOF ;
    public final EObject entryRuleWordShort() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWordShort = null;


        try {
            // InternalNaturalLang.g:3609:50: (iv_ruleWordShort= ruleWordShort EOF )
            // InternalNaturalLang.g:3610:2: iv_ruleWordShort= ruleWordShort EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWordShortRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleWordShort=ruleWordShort();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWordShort; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWordShort"


    // $ANTLR start "ruleWordShort"
    // InternalNaturalLang.g:3616:1: ruleWordShort returns [EObject current=null] : ( () ( (lv_word_1_0= RULE_ALPHA ) ) ) ;
    public final EObject ruleWordShort() throws RecognitionException {
        EObject current = null;

        Token lv_word_1_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:3622:2: ( ( () ( (lv_word_1_0= RULE_ALPHA ) ) ) )
            // InternalNaturalLang.g:3623:2: ( () ( (lv_word_1_0= RULE_ALPHA ) ) )
            {
            // InternalNaturalLang.g:3623:2: ( () ( (lv_word_1_0= RULE_ALPHA ) ) )
            // InternalNaturalLang.g:3624:3: () ( (lv_word_1_0= RULE_ALPHA ) )
            {
            // InternalNaturalLang.g:3624:3: ()
            // InternalNaturalLang.g:3625:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWordShortAccess().getWordAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:3634:3: ( (lv_word_1_0= RULE_ALPHA ) )
            // InternalNaturalLang.g:3635:4: (lv_word_1_0= RULE_ALPHA )
            {
            // InternalNaturalLang.g:3635:4: (lv_word_1_0= RULE_ALPHA )
            // InternalNaturalLang.g:3636:5: lv_word_1_0= RULE_ALPHA
            {
            lv_word_1_0=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_word_1_0, grammarAccess.getWordShortAccess().getWordALPHATerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getWordShortRule());
              					}
              					addWithLastConsumed(
              						current,
              						"word",
              						lv_word_1_0,
              						"org.xixum.nlx.naturalLang.ALPHA");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWordShort"


    // $ANTLR start "entryRuleFragmentX"
    // InternalNaturalLang.g:3656:1: entryRuleFragmentX returns [String current=null] : iv_ruleFragmentX= ruleFragmentX EOF ;
    public final String entryRuleFragmentX() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFragmentX = null;


        try {
            // InternalNaturalLang.g:3656:49: (iv_ruleFragmentX= ruleFragmentX EOF )
            // InternalNaturalLang.g:3657:2: iv_ruleFragmentX= ruleFragmentX EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFragmentXRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleFragmentX=ruleFragmentX();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFragmentX.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFragmentX"


    // $ANTLR start "ruleFragmentX"
    // InternalNaturalLang.g:3663:1: ruleFragmentX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | this_ID_C_1= RULE_ID_C | this_ALL_ALPHA_2= RULE_ALL_ALPHA ) ;
    public final AntlrDatatypeRuleToken ruleFragmentX() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token this_ID_C_1=null;
        Token this_ALL_ALPHA_2=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:3669:2: ( (this_ID_0= RULE_ID | this_ID_C_1= RULE_ID_C | this_ALL_ALPHA_2= RULE_ALL_ALPHA ) )
            // InternalNaturalLang.g:3670:2: (this_ID_0= RULE_ID | this_ID_C_1= RULE_ID_C | this_ALL_ALPHA_2= RULE_ALL_ALPHA )
            {
            // InternalNaturalLang.g:3670:2: (this_ID_0= RULE_ID | this_ID_C_1= RULE_ID_C | this_ALL_ALPHA_2= RULE_ALL_ALPHA )
            int alt77=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt77=1;
                }
                break;
            case RULE_ID_C:
                {
                alt77=2;
                }
                break;
            case RULE_ALL_ALPHA:
                {
                alt77=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // InternalNaturalLang.g:3671:3: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_0, grammarAccess.getFragmentXAccess().getIDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:3679:3: this_ID_C_1= RULE_ID_C
                    {
                    this_ID_C_1=(Token)match(input,RULE_ID_C,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_C_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_C_1, grammarAccess.getFragmentXAccess().getID_CTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:3687:3: this_ALL_ALPHA_2= RULE_ALL_ALPHA
                    {
                    this_ALL_ALPHA_2=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ALL_ALPHA_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ALL_ALPHA_2, grammarAccess.getFragmentXAccess().getALL_ALPHATerminalRuleCall_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFragmentX"


    // $ANTLR start "entryRuleFragment"
    // InternalNaturalLang.g:3698:1: entryRuleFragment returns [String current=null] : iv_ruleFragment= ruleFragment EOF ;
    public final String entryRuleFragment() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFragment = null;


        try {
            // InternalNaturalLang.g:3698:48: (iv_ruleFragment= ruleFragment EOF )
            // InternalNaturalLang.g:3699:2: iv_ruleFragment= ruleFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFragmentRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleFragment=ruleFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFragment.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFragment"


    // $ANTLR start "ruleFragment"
    // InternalNaturalLang.g:3705:1: ruleFragment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_FragmentX_0= ruleFragmentX | this_ALPHA_1= RULE_ALPHA ) ;
    public final AntlrDatatypeRuleToken ruleFragment() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ALPHA_1=null;
        AntlrDatatypeRuleToken this_FragmentX_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:3711:2: ( (this_FragmentX_0= ruleFragmentX | this_ALPHA_1= RULE_ALPHA ) )
            // InternalNaturalLang.g:3712:2: (this_FragmentX_0= ruleFragmentX | this_ALPHA_1= RULE_ALPHA )
            {
            // InternalNaturalLang.g:3712:2: (this_FragmentX_0= ruleFragmentX | this_ALPHA_1= RULE_ALPHA )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=RULE_ID && LA78_0<=RULE_ALL_ALPHA)) ) {
                alt78=1;
            }
            else if ( (LA78_0==RULE_ALPHA) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // InternalNaturalLang.g:3713:3: this_FragmentX_0= ruleFragmentX
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getFragmentAccess().getFragmentXParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_FragmentX_0=ruleFragmentX();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_FragmentX_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:3724:3: this_ALPHA_1= RULE_ALPHA
                    {
                    this_ALPHA_1=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ALPHA_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ALPHA_1, grammarAccess.getFragmentAccess().getALPHATerminalRuleCall_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFragment"


    // $ANTLR start "entryRuleAsterisk"
    // InternalNaturalLang.g:3735:1: entryRuleAsterisk returns [String current=null] : iv_ruleAsterisk= ruleAsterisk EOF ;
    public final String entryRuleAsterisk() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAsterisk = null;


        try {
            // InternalNaturalLang.g:3735:48: (iv_ruleAsterisk= ruleAsterisk EOF )
            // InternalNaturalLang.g:3736:2: iv_ruleAsterisk= ruleAsterisk EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAsteriskRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleAsterisk=ruleAsterisk();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAsterisk.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAsterisk"


    // $ANTLR start "ruleAsterisk"
    // InternalNaturalLang.g:3742:1: ruleAsterisk returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (this_MULTI_0= RULE_MULTI (this_MULTI_1= RULE_MULTI )? ) | (this_Fragment_2= ruleFragment this_MULTI_3= RULE_MULTI ) | (this_ItWordEl_4= ruleItWordEl this_MULTI_5= RULE_MULTI ) ) ;
    public final AntlrDatatypeRuleToken ruleAsterisk() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_MULTI_0=null;
        Token this_MULTI_1=null;
        Token this_MULTI_3=null;
        Token this_MULTI_5=null;
        AntlrDatatypeRuleToken this_Fragment_2 = null;

        AntlrDatatypeRuleToken this_ItWordEl_4 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:3748:2: ( ( (this_MULTI_0= RULE_MULTI (this_MULTI_1= RULE_MULTI )? ) | (this_Fragment_2= ruleFragment this_MULTI_3= RULE_MULTI ) | (this_ItWordEl_4= ruleItWordEl this_MULTI_5= RULE_MULTI ) ) )
            // InternalNaturalLang.g:3749:2: ( (this_MULTI_0= RULE_MULTI (this_MULTI_1= RULE_MULTI )? ) | (this_Fragment_2= ruleFragment this_MULTI_3= RULE_MULTI ) | (this_ItWordEl_4= ruleItWordEl this_MULTI_5= RULE_MULTI ) )
            {
            // InternalNaturalLang.g:3749:2: ( (this_MULTI_0= RULE_MULTI (this_MULTI_1= RULE_MULTI )? ) | (this_Fragment_2= ruleFragment this_MULTI_3= RULE_MULTI ) | (this_ItWordEl_4= ruleItWordEl this_MULTI_5= RULE_MULTI ) )
            int alt80=3;
            switch ( input.LA(1) ) {
            case RULE_MULTI:
                {
                alt80=1;
                }
                break;
            case RULE_ALPHA:
            case RULE_ID:
            case RULE_ID_C:
            case RULE_ALL_ALPHA:
                {
                alt80=2;
                }
                break;
            case RULE_IT_ID:
            case RULE_DOUBLE_DOT:
                {
                alt80=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // InternalNaturalLang.g:3750:3: (this_MULTI_0= RULE_MULTI (this_MULTI_1= RULE_MULTI )? )
                    {
                    // InternalNaturalLang.g:3750:3: (this_MULTI_0= RULE_MULTI (this_MULTI_1= RULE_MULTI )? )
                    // InternalNaturalLang.g:3751:4: this_MULTI_0= RULE_MULTI (this_MULTI_1= RULE_MULTI )?
                    {
                    this_MULTI_0=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_40); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_MULTI_0);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_MULTI_0, grammarAccess.getAsteriskAccess().getMULTITerminalRuleCall_0_0());
                      			
                    }
                    // InternalNaturalLang.g:3758:4: (this_MULTI_1= RULE_MULTI )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==RULE_MULTI) ) {
                        int LA79_1 = input.LA(2);

                        if ( (synpred122_InternalNaturalLang()) ) {
                            alt79=1;
                        }
                    }
                    switch (alt79) {
                        case 1 :
                            // InternalNaturalLang.g:3759:5: this_MULTI_1= RULE_MULTI
                            {
                            this_MULTI_1=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_MULTI_1);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_MULTI_1, grammarAccess.getAsteriskAccess().getMULTITerminalRuleCall_0_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:3769:3: (this_Fragment_2= ruleFragment this_MULTI_3= RULE_MULTI )
                    {
                    // InternalNaturalLang.g:3769:3: (this_Fragment_2= ruleFragment this_MULTI_3= RULE_MULTI )
                    // InternalNaturalLang.g:3770:4: this_Fragment_2= ruleFragment this_MULTI_3= RULE_MULTI
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAsteriskAccess().getFragmentParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_41);
                    this_Fragment_2=ruleFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_Fragment_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }
                    this_MULTI_3=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_MULTI_3);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_MULTI_3, grammarAccess.getAsteriskAccess().getMULTITerminalRuleCall_1_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:3789:3: (this_ItWordEl_4= ruleItWordEl this_MULTI_5= RULE_MULTI )
                    {
                    // InternalNaturalLang.g:3789:3: (this_ItWordEl_4= ruleItWordEl this_MULTI_5= RULE_MULTI )
                    // InternalNaturalLang.g:3790:4: this_ItWordEl_4= ruleItWordEl this_MULTI_5= RULE_MULTI
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAsteriskAccess().getItWordElParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FollowSets000.FOLLOW_41);
                    this_ItWordEl_4=ruleItWordEl();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_ItWordEl_4);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }
                    this_MULTI_5=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_MULTI_5);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_MULTI_5, grammarAccess.getAsteriskAccess().getMULTITerminalRuleCall_2_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAsterisk"


    // $ANTLR start "entryRuleHashP"
    // InternalNaturalLang.g:3812:1: entryRuleHashP returns [String current=null] : iv_ruleHashP= ruleHashP EOF ;
    public final String entryRuleHashP() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleHashP = null;


        try {
            // InternalNaturalLang.g:3812:45: (iv_ruleHashP= ruleHashP EOF )
            // InternalNaturalLang.g:3813:2: iv_ruleHashP= ruleHashP EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHashPRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleHashP=ruleHashP();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHashP.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleHashP"


    // $ANTLR start "ruleHashP"
    // InternalNaturalLang.g:3819:1: ruleHashP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_HASH_0= RULE_HASH ;
    public final AntlrDatatypeRuleToken ruleHashP() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_HASH_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:3825:2: (this_HASH_0= RULE_HASH )
            // InternalNaturalLang.g:3826:2: this_HASH_0= RULE_HASH
            {
            this_HASH_0=(Token)match(input,RULE_HASH,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_HASH_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_HASH_0, grammarAccess.getHashPAccess().getHASHTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleHashP"


    // $ANTLR start "entryRuleItWord"
    // InternalNaturalLang.g:3836:1: entryRuleItWord returns [EObject current=null] : iv_ruleItWord= ruleItWord EOF ;
    public final EObject entryRuleItWord() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleItWord = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:3838:2: (iv_ruleItWord= ruleItWord EOF )
            // InternalNaturalLang.g:3839:2: iv_ruleItWord= ruleItWord EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getItWordRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleItWord=ruleItWord();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleItWord; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleItWord"


    // $ANTLR start "ruleItWord"
    // InternalNaturalLang.g:3848:1: ruleItWord returns [EObject current=null] : ( ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) | ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* ) ) ( (lv_word_20_0= ruleAllSep ) )* ) ;
    public final EObject ruleItWord() throws RecognitionException {
        EObject current = null;

        Token lv_word_2_0=null;
        Token lv_word_3_0=null;
        Token lv_word_7_0=null;
        Token lv_word_8_0=null;
        Token lv_word_9_0=null;
        AntlrDatatypeRuleToken lv_word_0_0 = null;

        AntlrDatatypeRuleToken lv_word_1_0 = null;

        AntlrDatatypeRuleToken lv_word_4_0 = null;

        AntlrDatatypeRuleToken lv_word_5_0 = null;

        AntlrDatatypeRuleToken lv_word_6_0 = null;

        AntlrDatatypeRuleToken lv_word_10_0 = null;

        AntlrDatatypeRuleToken lv_word_11_0 = null;

        AntlrDatatypeRuleToken lv_word_12_0 = null;

        AntlrDatatypeRuleToken lv_word_13_0 = null;

        AntlrDatatypeRuleToken lv_word_14_0 = null;

        AntlrDatatypeRuleToken lv_word_15_0 = null;

        AntlrDatatypeRuleToken lv_word_16_0 = null;

        AntlrDatatypeRuleToken lv_word_17_0 = null;

        AntlrDatatypeRuleToken lv_word_18_0 = null;

        AntlrDatatypeRuleToken lv_word_19_0 = null;

        AntlrDatatypeRuleToken lv_word_20_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:3855:2: ( ( ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) | ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* ) ) ( (lv_word_20_0= ruleAllSep ) )* ) )
            // InternalNaturalLang.g:3856:2: ( ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) | ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* ) ) ( (lv_word_20_0= ruleAllSep ) )* )
            {
            // InternalNaturalLang.g:3856:2: ( ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) | ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* ) ) ( (lv_word_20_0= ruleAllSep ) )* )
            // InternalNaturalLang.g:3857:3: ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) | ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* ) ) ( (lv_word_20_0= ruleAllSep ) )*
            {
            // InternalNaturalLang.g:3857:3: ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) | ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* ) )
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    // InternalNaturalLang.g:3858:4: ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* )
                    {
                    // InternalNaturalLang.g:3858:4: ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* )
                    // InternalNaturalLang.g:3859:5: ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )*
                    {
                    // InternalNaturalLang.g:3859:5: ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==RULE_MULTI||LA85_0==RULE_DOT||(LA85_0>=RULE_HASH && LA85_0<=RULE_CURRENCY)||LA85_0==RULE_COLON||LA85_0==RULE_SEPARATORS_IT) ) {
                        alt85=1;
                    }
                    else if ( (LA85_0==RULE_ALL_ALPHA||LA85_0==RULE_CURL||(LA85_0>=RULE_IT_ID && LA85_0<=RULE_DOUBLE_DOT)) ) {
                        alt85=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1 :
                            // InternalNaturalLang.g:3860:6: ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) )
                            {
                            // InternalNaturalLang.g:3860:6: ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) )
                            // InternalNaturalLang.g:3861:7: ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) )
                            {
                            // InternalNaturalLang.g:3861:7: ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) )
                            int alt82=4;
                            switch ( input.LA(1) ) {
                            case RULE_DOT:
                            case RULE_COLON:
                            case RULE_SEPARATORS_IT:
                                {
                                alt82=1;
                                }
                                break;
                            case RULE_HASH:
                                {
                                alt82=2;
                                }
                                break;
                            case RULE_MULTI:
                                {
                                alt82=3;
                                }
                                break;
                            case RULE_CURRENCY:
                                {
                                alt82=4;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 82, 0, input);

                                throw nvae;
                            }

                            switch (alt82) {
                                case 1 :
                                    // InternalNaturalLang.g:3862:8: ( (lv_word_0_0= ruleSeparatorsIt ) )+
                                    {
                                    // InternalNaturalLang.g:3862:8: ( (lv_word_0_0= ruleSeparatorsIt ) )+
                                    int cnt81=0;
                                    loop81:
                                    do {
                                        int alt81=2;
                                        int LA81_0 = input.LA(1);

                                        if ( (LA81_0==RULE_DOT||LA81_0==RULE_COLON||LA81_0==RULE_SEPARATORS_IT) ) {
                                            alt81=1;
                                        }


                                        switch (alt81) {
                                    	case 1 :
                                    	    // InternalNaturalLang.g:3863:9: (lv_word_0_0= ruleSeparatorsIt )
                                    	    {
                                    	    // InternalNaturalLang.g:3863:9: (lv_word_0_0= ruleSeparatorsIt )
                                    	    // InternalNaturalLang.g:3864:10: lv_word_0_0= ruleSeparatorsIt
                                    	    {
                                    	    if ( state.backtracking==0 ) {

                                    	      										newCompositeNode(grammarAccess.getItWordAccess().getWordSeparatorsItParserRuleCall_0_0_0_0_0_0_0());
                                    	      									
                                    	    }
                                    	    pushFollow(FollowSets000.FOLLOW_42);
                                    	    lv_word_0_0=ruleSeparatorsIt();

                                    	    state._fsp--;
                                    	    if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      										if (current==null) {
                                    	      											current = createModelElementForParent(grammarAccess.getItWordRule());
                                    	      										}
                                    	      										add(
                                    	      											current,
                                    	      											"word",
                                    	      											lv_word_0_0,
                                    	      											"org.xixum.nlx.naturalLang.SeparatorsIt");
                                    	      										afterParserOrEnumRuleCall();
                                    	      									
                                    	    }

                                    	    }


                                    	    }
                                    	    break;

                                    	default :
                                    	    if ( cnt81 >= 1 ) break loop81;
                                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                                EarlyExitException eee =
                                                    new EarlyExitException(81, input);
                                                throw eee;
                                        }
                                        cnt81++;
                                    } while (true);


                                    }
                                    break;
                                case 2 :
                                    // InternalNaturalLang.g:3882:8: ( (lv_word_1_0= ruleHashP ) )
                                    {
                                    // InternalNaturalLang.g:3882:8: ( (lv_word_1_0= ruleHashP ) )
                                    // InternalNaturalLang.g:3883:9: (lv_word_1_0= ruleHashP )
                                    {
                                    // InternalNaturalLang.g:3883:9: (lv_word_1_0= ruleHashP )
                                    // InternalNaturalLang.g:3884:10: lv_word_1_0= ruleHashP
                                    {
                                    if ( state.backtracking==0 ) {

                                      										newCompositeNode(grammarAccess.getItWordAccess().getWordHashPParserRuleCall_0_0_0_0_0_1_0());
                                      									
                                    }
                                    pushFollow(FollowSets000.FOLLOW_42);
                                    lv_word_1_0=ruleHashP();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElementForParent(grammarAccess.getItWordRule());
                                      										}
                                      										add(
                                      											current,
                                      											"word",
                                      											lv_word_1_0,
                                      											"org.xixum.nlx.naturalLang.HashP");
                                      										afterParserOrEnumRuleCall();
                                      									
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    // InternalNaturalLang.g:3902:8: ( (lv_word_2_0= RULE_MULTI ) )
                                    {
                                    // InternalNaturalLang.g:3902:8: ( (lv_word_2_0= RULE_MULTI ) )
                                    // InternalNaturalLang.g:3903:9: (lv_word_2_0= RULE_MULTI )
                                    {
                                    // InternalNaturalLang.g:3903:9: (lv_word_2_0= RULE_MULTI )
                                    // InternalNaturalLang.g:3904:10: lv_word_2_0= RULE_MULTI
                                    {
                                    lv_word_2_0=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_42); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										newLeafNode(lv_word_2_0, grammarAccess.getItWordAccess().getWordMULTITerminalRuleCall_0_0_0_0_0_2_0());
                                      									
                                    }
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElement(grammarAccess.getItWordRule());
                                      										}
                                      										addWithLastConsumed(
                                      											current,
                                      											"word",
                                      											lv_word_2_0,
                                      											"org.xixum.nlx.naturalLang.MULTI");
                                      									
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 4 :
                                    // InternalNaturalLang.g:3921:8: ( (lv_word_3_0= RULE_CURRENCY ) )
                                    {
                                    // InternalNaturalLang.g:3921:8: ( (lv_word_3_0= RULE_CURRENCY ) )
                                    // InternalNaturalLang.g:3922:9: (lv_word_3_0= RULE_CURRENCY )
                                    {
                                    // InternalNaturalLang.g:3922:9: (lv_word_3_0= RULE_CURRENCY )
                                    // InternalNaturalLang.g:3923:10: lv_word_3_0= RULE_CURRENCY
                                    {
                                    lv_word_3_0=(Token)match(input,RULE_CURRENCY,FollowSets000.FOLLOW_42); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										newLeafNode(lv_word_3_0, grammarAccess.getItWordAccess().getWordCURRENCYTerminalRuleCall_0_0_0_0_0_3_0());
                                      									
                                    }
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElement(grammarAccess.getItWordRule());
                                      										}
                                      										addWithLastConsumed(
                                      											current,
                                      											"word",
                                      											lv_word_3_0,
                                      											"org.xixum.nlx.naturalLang.CURRENCY");
                                      									
                                    }

                                    }


                                    }


                                    }
                                    break;

                            }

                            // InternalNaturalLang.g:3940:7: ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) )
                            int alt83=2;
                            switch ( input.LA(1) ) {
                            case RULE_ALL_ALPHA:
                                {
                                int LA83_1 = input.LA(2);

                                if ( (synpred129_InternalNaturalLang()) ) {
                                    alt83=1;
                                }
                                else if ( (true) ) {
                                    alt83=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return current;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 83, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case RULE_ALPHA:
                                {
                                int LA83_2 = input.LA(2);

                                if ( (synpred129_InternalNaturalLang()) ) {
                                    alt83=1;
                                }
                                else if ( (true) ) {
                                    alt83=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return current;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 83, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case RULE_MULTI:
                            case RULE_INT:
                            case RULE_CURL:
                            case RULE_IT_ID:
                            case RULE_DOUBLE_DOT:
                            case RULE_ID_ALL:
                            case RULE_HEX_NUMBER:
                                {
                                alt83=1;
                                }
                                break;
                            case RULE_ID:
                                {
                                int LA83_4 = input.LA(2);

                                if ( (synpred129_InternalNaturalLang()) ) {
                                    alt83=1;
                                }
                                else if ( (true) ) {
                                    alt83=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return current;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 83, 4, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case RULE_ID_C:
                                {
                                int LA83_5 = input.LA(2);

                                if ( (synpred129_InternalNaturalLang()) ) {
                                    alt83=1;
                                }
                                else if ( (true) ) {
                                    alt83=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return current;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 83, 5, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 83, 0, input);

                                throw nvae;
                            }

                            switch (alt83) {
                                case 1 :
                                    // InternalNaturalLang.g:3941:8: ( (lv_word_4_0= ruleItWordElXx ) )
                                    {
                                    // InternalNaturalLang.g:3941:8: ( (lv_word_4_0= ruleItWordElXx ) )
                                    // InternalNaturalLang.g:3942:9: (lv_word_4_0= ruleItWordElXx )
                                    {
                                    // InternalNaturalLang.g:3942:9: (lv_word_4_0= ruleItWordElXx )
                                    // InternalNaturalLang.g:3943:10: lv_word_4_0= ruleItWordElXx
                                    {
                                    if ( state.backtracking==0 ) {

                                      										newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_0_0_0_1_0_0());
                                      									
                                    }
                                    pushFollow(FollowSets000.FOLLOW_43);
                                    lv_word_4_0=ruleItWordElXx();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElementForParent(grammarAccess.getItWordRule());
                                      										}
                                      										add(
                                      											current,
                                      											"word",
                                      											lv_word_4_0,
                                      											"org.xixum.nlx.naturalLang.ItWordElXx");
                                      										afterParserOrEnumRuleCall();
                                      									
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalNaturalLang.g:3961:8: ( (lv_word_5_0= ruleFragment ) )
                                    {
                                    // InternalNaturalLang.g:3961:8: ( (lv_word_5_0= ruleFragment ) )
                                    // InternalNaturalLang.g:3962:9: (lv_word_5_0= ruleFragment )
                                    {
                                    // InternalNaturalLang.g:3962:9: (lv_word_5_0= ruleFragment )
                                    // InternalNaturalLang.g:3963:10: lv_word_5_0= ruleFragment
                                    {
                                    if ( state.backtracking==0 ) {

                                      										newCompositeNode(grammarAccess.getItWordAccess().getWordFragmentParserRuleCall_0_0_0_0_1_1_0());
                                      									
                                    }
                                    pushFollow(FollowSets000.FOLLOW_43);
                                    lv_word_5_0=ruleFragment();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElementForParent(grammarAccess.getItWordRule());
                                      										}
                                      										add(
                                      											current,
                                      											"word",
                                      											lv_word_5_0,
                                      											"org.xixum.nlx.naturalLang.Fragment");
                                      										afterParserOrEnumRuleCall();
                                      									
                                    }

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:3983:6: ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) )
                            {
                            // InternalNaturalLang.g:3983:6: ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) )
                            int alt84=3;
                            switch ( input.LA(1) ) {
                            case RULE_IT_ID:
                            case RULE_DOUBLE_DOT:
                                {
                                alt84=1;
                                }
                                break;
                            case RULE_CURL:
                                {
                                alt84=2;
                                }
                                break;
                            case RULE_ALL_ALPHA:
                                {
                                alt84=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 84, 0, input);

                                throw nvae;
                            }

                            switch (alt84) {
                                case 1 :
                                    // InternalNaturalLang.g:3984:7: ( (lv_word_6_0= ruleItWordEl ) )
                                    {
                                    // InternalNaturalLang.g:3984:7: ( (lv_word_6_0= ruleItWordEl ) )
                                    // InternalNaturalLang.g:3985:8: (lv_word_6_0= ruleItWordEl )
                                    {
                                    // InternalNaturalLang.g:3985:8: (lv_word_6_0= ruleItWordEl )
                                    // InternalNaturalLang.g:3986:9: lv_word_6_0= ruleItWordEl
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElParserRuleCall_0_0_0_1_0_0());
                                      								
                                    }
                                    pushFollow(FollowSets000.FOLLOW_43);
                                    lv_word_6_0=ruleItWordEl();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getItWordRule());
                                      									}
                                      									add(
                                      										current,
                                      										"word",
                                      										lv_word_6_0,
                                      										"org.xixum.nlx.naturalLang.ItWordEl");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalNaturalLang.g:4004:7: ( (lv_word_7_0= RULE_CURL ) )
                                    {
                                    // InternalNaturalLang.g:4004:7: ( (lv_word_7_0= RULE_CURL ) )
                                    // InternalNaturalLang.g:4005:8: (lv_word_7_0= RULE_CURL )
                                    {
                                    // InternalNaturalLang.g:4005:8: (lv_word_7_0= RULE_CURL )
                                    // InternalNaturalLang.g:4006:9: lv_word_7_0= RULE_CURL
                                    {
                                    lv_word_7_0=(Token)match(input,RULE_CURL,FollowSets000.FOLLOW_43); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(lv_word_7_0, grammarAccess.getItWordAccess().getWordCURLTerminalRuleCall_0_0_0_1_1_0());
                                      								
                                    }
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElement(grammarAccess.getItWordRule());
                                      									}
                                      									addWithLastConsumed(
                                      										current,
                                      										"word",
                                      										lv_word_7_0,
                                      										"org.xixum.nlx.naturalLang.CURL");
                                      								
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    // InternalNaturalLang.g:4023:7: ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) )
                                    {
                                    // InternalNaturalLang.g:4023:7: ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) )
                                    // InternalNaturalLang.g:4024:8: ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) )
                                    {
                                    // InternalNaturalLang.g:4024:8: ( (lv_word_8_0= RULE_ALL_ALPHA ) )
                                    // InternalNaturalLang.g:4025:9: (lv_word_8_0= RULE_ALL_ALPHA )
                                    {
                                    // InternalNaturalLang.g:4025:9: (lv_word_8_0= RULE_ALL_ALPHA )
                                    // InternalNaturalLang.g:4026:10: lv_word_8_0= RULE_ALL_ALPHA
                                    {
                                    lv_word_8_0=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_44); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										newLeafNode(lv_word_8_0, grammarAccess.getItWordAccess().getWordALL_ALPHATerminalRuleCall_0_0_0_1_2_0_0());
                                      									
                                    }
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElement(grammarAccess.getItWordRule());
                                      										}
                                      										addWithLastConsumed(
                                      											current,
                                      											"word",
                                      											lv_word_8_0,
                                      											"org.xixum.nlx.naturalLang.ALL_ALPHA");
                                      									
                                    }

                                    }


                                    }

                                    // InternalNaturalLang.g:4042:8: ( (lv_word_9_0= RULE_COLON ) )
                                    // InternalNaturalLang.g:4043:9: (lv_word_9_0= RULE_COLON )
                                    {
                                    // InternalNaturalLang.g:4043:9: (lv_word_9_0= RULE_COLON )
                                    // InternalNaturalLang.g:4044:10: lv_word_9_0= RULE_COLON
                                    {
                                    lv_word_9_0=(Token)match(input,RULE_COLON,FollowSets000.FOLLOW_43); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										newLeafNode(lv_word_9_0, grammarAccess.getItWordAccess().getWordCOLONTerminalRuleCall_0_0_0_1_2_1_0());
                                      									
                                    }
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElement(grammarAccess.getItWordRule());
                                      										}
                                      										addWithLastConsumed(
                                      											current,
                                      											"word",
                                      											lv_word_9_0,
                                      											"org.xixum.nlx.naturalLang.COLON");
                                      									
                                    }

                                    }


                                    }


                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // InternalNaturalLang.g:4063:5: ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )*
                    loop87:
                    do {
                        int alt87=2;
                        alt87 = dfa87.predict(input);
                        switch (alt87) {
                    	case 1 :
                    	    // InternalNaturalLang.g:4064:6: ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) )
                    	    {
                    	    // InternalNaturalLang.g:4064:6: ( (lv_word_10_0= ruleAllSep ) )+
                    	    int cnt86=0;
                    	    loop86:
                    	    do {
                    	        int alt86=2;
                    	        int LA86_0 = input.LA(1);

                    	        if ( ((LA86_0>=RULE_DASH && LA86_0<=RULE_MINUS)||LA86_0==RULE_DOT||LA86_0==RULE_COLON||(LA86_0>=RULE_SLASH && LA86_0<=RULE_SEPARATORS_IT)) ) {
                    	            alt86=1;
                    	        }


                    	        switch (alt86) {
                    	    	case 1 :
                    	    	    // InternalNaturalLang.g:4065:7: (lv_word_10_0= ruleAllSep )
                    	    	    {
                    	    	    // InternalNaturalLang.g:4065:7: (lv_word_10_0= ruleAllSep )
                    	    	    // InternalNaturalLang.g:4066:8: lv_word_10_0= ruleAllSep
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      								newCompositeNode(grammarAccess.getItWordAccess().getWordAllSepParserRuleCall_0_0_1_0_0());
                    	    	      							
                    	    	    }
                    	    	    pushFollow(FollowSets000.FOLLOW_45);
                    	    	    lv_word_10_0=ruleAllSep();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      								if (current==null) {
                    	    	      									current = createModelElementForParent(grammarAccess.getItWordRule());
                    	    	      								}
                    	    	      								add(
                    	    	      									current,
                    	    	      									"word",
                    	    	      									lv_word_10_0,
                    	    	      									"org.xixum.nlx.naturalLang.AllSep");
                    	    	      								afterParserOrEnumRuleCall();
                    	    	      							
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt86 >= 1 ) break loop86;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(86, input);
                    	                throw eee;
                    	        }
                    	        cnt86++;
                    	    } while (true);

                    	    // InternalNaturalLang.g:4083:6: ( (lv_word_11_0= ruleItWordElXx ) )
                    	    // InternalNaturalLang.g:4084:7: (lv_word_11_0= ruleItWordElXx )
                    	    {
                    	    // InternalNaturalLang.g:4084:7: (lv_word_11_0= ruleItWordElXx )
                    	    // InternalNaturalLang.g:4085:8: lv_word_11_0= ruleItWordElXx
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_0_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_43);
                    	    lv_word_11_0=ruleItWordElXx();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getItWordRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"word",
                    	      									lv_word_11_0,
                    	      									"org.xixum.nlx.naturalLang.ItWordElXx");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop87;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4105:4: ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* )
                    {
                    // InternalNaturalLang.g:4105:4: ( ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )* )
                    // InternalNaturalLang.g:4106:5: ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) ) ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) ) ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )*
                    {
                    // InternalNaturalLang.g:4106:5: ( ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) ) | ( (lv_word_13_0= ruleAsterisk ) ) )
                    int alt88=2;
                    switch ( input.LA(1) ) {
                    case RULE_ID:
                        {
                        int LA88_1 = input.LA(2);

                        if ( ((LA88_1>=RULE_DASH && LA88_1<=RULE_MINUS)||LA88_1==RULE_DOT||LA88_1==RULE_COLON||(LA88_1>=RULE_SLASH && LA88_1<=RULE_SEPARATORS_IT)) ) {
                            alt88=1;
                        }
                        else if ( (LA88_1==RULE_MULTI) ) {
                            alt88=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 88, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RULE_ID_C:
                        {
                        int LA88_2 = input.LA(2);

                        if ( (LA88_2==RULE_MULTI) ) {
                            alt88=2;
                        }
                        else if ( ((LA88_2>=RULE_DASH && LA88_2<=RULE_MINUS)||LA88_2==RULE_DOT||LA88_2==RULE_COLON||(LA88_2>=RULE_SLASH && LA88_2<=RULE_SEPARATORS_IT)) ) {
                            alt88=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 88, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RULE_ALL_ALPHA:
                        {
                        int LA88_3 = input.LA(2);

                        if ( (LA88_3==RULE_MULTI) ) {
                            alt88=2;
                        }
                        else if ( ((LA88_3>=RULE_DASH && LA88_3<=RULE_MINUS)||LA88_3==RULE_DOT||LA88_3==RULE_COLON||(LA88_3>=RULE_SLASH && LA88_3<=RULE_SEPARATORS_IT)) ) {
                            alt88=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 88, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RULE_ALPHA:
                        {
                        int LA88_4 = input.LA(2);

                        if ( ((LA88_4>=RULE_DASH && LA88_4<=RULE_MINUS)||LA88_4==RULE_DOT||LA88_4==RULE_COLON||(LA88_4>=RULE_SLASH && LA88_4<=RULE_SEPARATORS_IT)) ) {
                            alt88=1;
                        }
                        else if ( (LA88_4==RULE_MULTI) ) {
                            alt88=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 88, 4, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RULE_MULTI:
                    case RULE_IT_ID:
                    case RULE_DOUBLE_DOT:
                        {
                        alt88=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;
                    }

                    switch (alt88) {
                        case 1 :
                            // InternalNaturalLang.g:4107:6: ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) )
                            {
                            // InternalNaturalLang.g:4107:6: ( ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment ) )
                            // InternalNaturalLang.g:4108:7: ( ( ruleFragment ) )=> (lv_word_12_0= ruleFragment )
                            {
                            // InternalNaturalLang.g:4112:7: (lv_word_12_0= ruleFragment )
                            // InternalNaturalLang.g:4113:8: lv_word_12_0= ruleFragment
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getItWordAccess().getWordFragmentParserRuleCall_0_1_0_0_0());
                              							
                            }
                            pushFollow(FollowSets000.FOLLOW_46);
                            lv_word_12_0=ruleFragment();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getItWordRule());
                              								}
                              								add(
                              									current,
                              									"word",
                              									lv_word_12_0,
                              									"org.xixum.nlx.naturalLang.Fragment");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:4131:6: ( (lv_word_13_0= ruleAsterisk ) )
                            {
                            // InternalNaturalLang.g:4131:6: ( (lv_word_13_0= ruleAsterisk ) )
                            // InternalNaturalLang.g:4132:7: (lv_word_13_0= ruleAsterisk )
                            {
                            // InternalNaturalLang.g:4132:7: (lv_word_13_0= ruleAsterisk )
                            // InternalNaturalLang.g:4133:8: lv_word_13_0= ruleAsterisk
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getItWordAccess().getWordAsteriskParserRuleCall_0_1_0_1_0());
                              							
                            }
                            pushFollow(FollowSets000.FOLLOW_46);
                            lv_word_13_0=ruleAsterisk();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getItWordRule());
                              								}
                              								add(
                              									current,
                              									"word",
                              									lv_word_13_0,
                              									"org.xixum.nlx.naturalLang.Asterisk");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;

                    }

                    // InternalNaturalLang.g:4151:5: ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) | ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) ) )
                    int alt91=2;
                    alt91 = dfa91.predict(input);
                    switch (alt91) {
                        case 1 :
                            // InternalNaturalLang.g:4152:6: ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) )
                            {
                            // InternalNaturalLang.g:4152:6: ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) )
                            // InternalNaturalLang.g:4153:7: ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) )
                            {
                            // InternalNaturalLang.g:4153:7: ( (lv_word_14_0= ruleSeparatorsIt ) )+
                            int cnt89=0;
                            loop89:
                            do {
                                int alt89=2;
                                int LA89_0 = input.LA(1);

                                if ( (LA89_0==RULE_DOT||LA89_0==RULE_COLON||LA89_0==RULE_SEPARATORS_IT) ) {
                                    alt89=1;
                                }


                                switch (alt89) {
                            	case 1 :
                            	    // InternalNaturalLang.g:4154:8: (lv_word_14_0= ruleSeparatorsIt )
                            	    {
                            	    // InternalNaturalLang.g:4154:8: (lv_word_14_0= ruleSeparatorsIt )
                            	    // InternalNaturalLang.g:4155:9: lv_word_14_0= ruleSeparatorsIt
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getItWordAccess().getWordSeparatorsItParserRuleCall_0_1_1_0_0_0());
                            	      								
                            	    }
                            	    pushFollow(FollowSets000.FOLLOW_42);
                            	    lv_word_14_0=ruleSeparatorsIt();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getItWordRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"word",
                            	      										lv_word_14_0,
                            	      										"org.xixum.nlx.naturalLang.SeparatorsIt");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt89 >= 1 ) break loop89;
                            	    if (state.backtracking>0) {state.failed=true; return current;}
                                        EarlyExitException eee =
                                            new EarlyExitException(89, input);
                                        throw eee;
                                }
                                cnt89++;
                            } while (true);

                            // InternalNaturalLang.g:4172:7: ( (lv_word_15_0= ruleItWordElXx ) )
                            // InternalNaturalLang.g:4173:8: (lv_word_15_0= ruleItWordElXx )
                            {
                            // InternalNaturalLang.g:4173:8: (lv_word_15_0= ruleItWordElXx )
                            // InternalNaturalLang.g:4174:9: lv_word_15_0= ruleItWordElXx
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_1_1_0_1_0());
                              								
                            }
                            pushFollow(FollowSets000.FOLLOW_43);
                            lv_word_15_0=ruleItWordElXx();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getItWordRule());
                              									}
                              									add(
                              										current,
                              										"word",
                              										lv_word_15_0,
                              										"org.xixum.nlx.naturalLang.ItWordElXx");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalNaturalLang.g:4193:6: ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) )
                            {
                            // InternalNaturalLang.g:4193:6: ( ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) ) )
                            // InternalNaturalLang.g:4194:7: ( (lv_word_16_0= ruleAllSep ) )+ ( (lv_word_17_0= ruleItWordElX ) )
                            {
                            // InternalNaturalLang.g:4194:7: ( (lv_word_16_0= ruleAllSep ) )+
                            int cnt90=0;
                            loop90:
                            do {
                                int alt90=2;
                                int LA90_0 = input.LA(1);

                                if ( ((LA90_0>=RULE_DASH && LA90_0<=RULE_MINUS)||LA90_0==RULE_DOT||LA90_0==RULE_COLON||(LA90_0>=RULE_SLASH && LA90_0<=RULE_SEPARATORS_IT)) ) {
                                    alt90=1;
                                }


                                switch (alt90) {
                            	case 1 :
                            	    // InternalNaturalLang.g:4195:8: (lv_word_16_0= ruleAllSep )
                            	    {
                            	    // InternalNaturalLang.g:4195:8: (lv_word_16_0= ruleAllSep )
                            	    // InternalNaturalLang.g:4196:9: lv_word_16_0= ruleAllSep
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getItWordAccess().getWordAllSepParserRuleCall_0_1_1_1_0_0());
                            	      								
                            	    }
                            	    pushFollow(FollowSets000.FOLLOW_47);
                            	    lv_word_16_0=ruleAllSep();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getItWordRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"word",
                            	      										lv_word_16_0,
                            	      										"org.xixum.nlx.naturalLang.AllSep");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt90 >= 1 ) break loop90;
                            	    if (state.backtracking>0) {state.failed=true; return current;}
                                        EarlyExitException eee =
                                            new EarlyExitException(90, input);
                                        throw eee;
                                }
                                cnt90++;
                            } while (true);

                            // InternalNaturalLang.g:4213:7: ( (lv_word_17_0= ruleItWordElX ) )
                            // InternalNaturalLang.g:4214:8: (lv_word_17_0= ruleItWordElX )
                            {
                            // InternalNaturalLang.g:4214:8: (lv_word_17_0= ruleItWordElX )
                            // InternalNaturalLang.g:4215:9: lv_word_17_0= ruleItWordElX
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXParserRuleCall_0_1_1_1_1_0());
                              								
                            }
                            pushFollow(FollowSets000.FOLLOW_43);
                            lv_word_17_0=ruleItWordElX();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getItWordRule());
                              									}
                              									add(
                              										current,
                              										"word",
                              										lv_word_17_0,
                              										"org.xixum.nlx.naturalLang.ItWordElX");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            break;

                    }

                    // InternalNaturalLang.g:4234:5: ( ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) ) )*
                    loop93:
                    do {
                        int alt93=2;
                        alt93 = dfa93.predict(input);
                        switch (alt93) {
                    	case 1 :
                    	    // InternalNaturalLang.g:4235:6: ( (lv_word_18_0= ruleAllSep ) )+ ( (lv_word_19_0= ruleItWordElXx ) )
                    	    {
                    	    // InternalNaturalLang.g:4235:6: ( (lv_word_18_0= ruleAllSep ) )+
                    	    int cnt92=0;
                    	    loop92:
                    	    do {
                    	        int alt92=2;
                    	        int LA92_0 = input.LA(1);

                    	        if ( ((LA92_0>=RULE_DASH && LA92_0<=RULE_MINUS)||LA92_0==RULE_DOT||LA92_0==RULE_COLON||(LA92_0>=RULE_SLASH && LA92_0<=RULE_SEPARATORS_IT)) ) {
                    	            alt92=1;
                    	        }


                    	        switch (alt92) {
                    	    	case 1 :
                    	    	    // InternalNaturalLang.g:4236:7: (lv_word_18_0= ruleAllSep )
                    	    	    {
                    	    	    // InternalNaturalLang.g:4236:7: (lv_word_18_0= ruleAllSep )
                    	    	    // InternalNaturalLang.g:4237:8: lv_word_18_0= ruleAllSep
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      								newCompositeNode(grammarAccess.getItWordAccess().getWordAllSepParserRuleCall_0_1_2_0_0());
                    	    	      							
                    	    	    }
                    	    	    pushFollow(FollowSets000.FOLLOW_45);
                    	    	    lv_word_18_0=ruleAllSep();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      								if (current==null) {
                    	    	      									current = createModelElementForParent(grammarAccess.getItWordRule());
                    	    	      								}
                    	    	      								add(
                    	    	      									current,
                    	    	      									"word",
                    	    	      									lv_word_18_0,
                    	    	      									"org.xixum.nlx.naturalLang.AllSep");
                    	    	      								afterParserOrEnumRuleCall();
                    	    	      							
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt92 >= 1 ) break loop92;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(92, input);
                    	                throw eee;
                    	        }
                    	        cnt92++;
                    	    } while (true);

                    	    // InternalNaturalLang.g:4254:6: ( (lv_word_19_0= ruleItWordElXx ) )
                    	    // InternalNaturalLang.g:4255:7: (lv_word_19_0= ruleItWordElXx )
                    	    {
                    	    // InternalNaturalLang.g:4255:7: (lv_word_19_0= ruleItWordElXx )
                    	    // InternalNaturalLang.g:4256:8: lv_word_19_0= ruleItWordElXx
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_1_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FollowSets000.FOLLOW_43);
                    	    lv_word_19_0=ruleItWordElXx();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getItWordRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"word",
                    	      									lv_word_19_0,
                    	      									"org.xixum.nlx.naturalLang.ItWordElXx");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop93;
                        }
                    } while (true);


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:4276:3: ( (lv_word_20_0= ruleAllSep ) )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==RULE_DOT) ) {
                    int LA95_2 = input.LA(2);

                    if ( (synpred143_InternalNaturalLang()) ) {
                        alt95=1;
                    }


                }
                else if ( ((LA95_0>=RULE_DASH && LA95_0<=RULE_MINUS)||LA95_0==RULE_COLON||(LA95_0>=RULE_SLASH && LA95_0<=RULE_SEPARATORS_IT)) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // InternalNaturalLang.g:4277:4: (lv_word_20_0= ruleAllSep )
            	    {
            	    // InternalNaturalLang.g:4277:4: (lv_word_20_0= ruleAllSep )
            	    // InternalNaturalLang.g:4278:5: lv_word_20_0= ruleAllSep
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getItWordAccess().getWordAllSepParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FollowSets000.FOLLOW_43);
            	    lv_word_20_0=ruleAllSep();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getItWordRule());
            	      					}
            	      					add(
            	      						current,
            	      						"word",
            	      						lv_word_20_0,
            	      						"org.xixum.nlx.naturalLang.AllSep");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleItWord"


    // $ANTLR start "entryRuleWhitespace"
    // InternalNaturalLang.g:4302:1: entryRuleWhitespace returns [String current=null] : iv_ruleWhitespace= ruleWhitespace EOF ;
    public final String entryRuleWhitespace() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleWhitespace = null;


        try {
            // InternalNaturalLang.g:4302:50: (iv_ruleWhitespace= ruleWhitespace EOF )
            // InternalNaturalLang.g:4303:2: iv_ruleWhitespace= ruleWhitespace EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhitespaceRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleWhitespace=ruleWhitespace();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhitespace.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWhitespace"


    // $ANTLR start "ruleWhitespace"
    // InternalNaturalLang.g:4309:1: ruleWhitespace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SPACE_0= RULE_SPACE | ( (this_SPACE_1= RULE_SPACE )? this_NEWLINE_2= RULE_NEWLINE (this_SPACE_3= RULE_SPACE )? ) ) ;
    public final AntlrDatatypeRuleToken ruleWhitespace() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_SPACE_0=null;
        Token this_SPACE_1=null;
        Token this_NEWLINE_2=null;
        Token this_SPACE_3=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:4315:2: ( (this_SPACE_0= RULE_SPACE | ( (this_SPACE_1= RULE_SPACE )? this_NEWLINE_2= RULE_NEWLINE (this_SPACE_3= RULE_SPACE )? ) ) )
            // InternalNaturalLang.g:4316:2: (this_SPACE_0= RULE_SPACE | ( (this_SPACE_1= RULE_SPACE )? this_NEWLINE_2= RULE_NEWLINE (this_SPACE_3= RULE_SPACE )? ) )
            {
            // InternalNaturalLang.g:4316:2: (this_SPACE_0= RULE_SPACE | ( (this_SPACE_1= RULE_SPACE )? this_NEWLINE_2= RULE_NEWLINE (this_SPACE_3= RULE_SPACE )? ) )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==RULE_SPACE) ) {
                int LA98_1 = input.LA(2);

                if ( (LA98_1==RULE_NEWLINE) ) {
                    alt98=2;
                }
                else if ( (LA98_1==EOF||LA98_1==RULE_TABLE_LINE||(LA98_1>=RULE_MULTI && LA98_1<=RULE_BR_O)||LA98_1==RULE_EXBR_O||LA98_1==RULE_EXBRC_O||(LA98_1>=RULE_ID && LA98_1<=RULE_DOUBLE_DOT)||LA98_1==RULE_SLASH||(LA98_1>=RULE_SEPARATORS_IT && LA98_1<=RULE_STRING)||(LA98_1>=RULE_PARAGR && LA98_1<=RULE_IGNORED)||(LA98_1>=RULE_OPERATORS && LA98_1<=RULE_AT)) ) {
                    alt98=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA98_0==RULE_NEWLINE) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // InternalNaturalLang.g:4317:3: this_SPACE_0= RULE_SPACE
                    {
                    this_SPACE_0=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SPACE_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SPACE_0, grammarAccess.getWhitespaceAccess().getSPACETerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4325:3: ( (this_SPACE_1= RULE_SPACE )? this_NEWLINE_2= RULE_NEWLINE (this_SPACE_3= RULE_SPACE )? )
                    {
                    // InternalNaturalLang.g:4325:3: ( (this_SPACE_1= RULE_SPACE )? this_NEWLINE_2= RULE_NEWLINE (this_SPACE_3= RULE_SPACE )? )
                    // InternalNaturalLang.g:4326:4: (this_SPACE_1= RULE_SPACE )? this_NEWLINE_2= RULE_NEWLINE (this_SPACE_3= RULE_SPACE )?
                    {
                    // InternalNaturalLang.g:4326:4: (this_SPACE_1= RULE_SPACE )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==RULE_SPACE) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // InternalNaturalLang.g:4327:5: this_SPACE_1= RULE_SPACE
                            {
                            this_SPACE_1=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_SPACE_1);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_SPACE_1, grammarAccess.getWhitespaceAccess().getSPACETerminalRuleCall_1_0());
                              				
                            }

                            }
                            break;

                    }

                    this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_NEWLINE_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_2, grammarAccess.getWhitespaceAccess().getNEWLINETerminalRuleCall_1_1());
                      			
                    }
                    // InternalNaturalLang.g:4342:4: (this_SPACE_3= RULE_SPACE )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==RULE_SPACE) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // InternalNaturalLang.g:4343:5: this_SPACE_3= RULE_SPACE
                            {
                            this_SPACE_3=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_SPACE_3);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_SPACE_3, grammarAccess.getWhitespaceAccess().getSPACETerminalRuleCall_1_2());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWhitespace"


    // $ANTLR start "entryRuleItWordEl"
    // InternalNaturalLang.g:4356:1: entryRuleItWordEl returns [String current=null] : iv_ruleItWordEl= ruleItWordEl EOF ;
    public final String entryRuleItWordEl() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleItWordEl = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4358:2: (iv_ruleItWordEl= ruleItWordEl EOF )
            // InternalNaturalLang.g:4359:2: iv_ruleItWordEl= ruleItWordEl EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getItWordElRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleItWordEl=ruleItWordEl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleItWordEl.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleItWordEl"


    // $ANTLR start "ruleItWordEl"
    // InternalNaturalLang.g:4368:1: ruleItWordEl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IT_ID_0= RULE_IT_ID | this_DOUBLE_DOT_1= RULE_DOUBLE_DOT ) ;
    public final AntlrDatatypeRuleToken ruleItWordEl() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IT_ID_0=null;
        Token this_DOUBLE_DOT_1=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4375:2: ( (this_IT_ID_0= RULE_IT_ID | this_DOUBLE_DOT_1= RULE_DOUBLE_DOT ) )
            // InternalNaturalLang.g:4376:2: (this_IT_ID_0= RULE_IT_ID | this_DOUBLE_DOT_1= RULE_DOUBLE_DOT )
            {
            // InternalNaturalLang.g:4376:2: (this_IT_ID_0= RULE_IT_ID | this_DOUBLE_DOT_1= RULE_DOUBLE_DOT )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==RULE_IT_ID) ) {
                alt99=1;
            }
            else if ( (LA99_0==RULE_DOUBLE_DOT) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // InternalNaturalLang.g:4377:3: this_IT_ID_0= RULE_IT_ID
                    {
                    this_IT_ID_0=(Token)match(input,RULE_IT_ID,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IT_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IT_ID_0, grammarAccess.getItWordElAccess().getIT_IDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4385:3: this_DOUBLE_DOT_1= RULE_DOUBLE_DOT
                    {
                    this_DOUBLE_DOT_1=(Token)match(input,RULE_DOUBLE_DOT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DOUBLE_DOT_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DOUBLE_DOT_1, grammarAccess.getItWordElAccess().getDOUBLE_DOTTerminalRuleCall_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleItWordEl"


    // $ANTLR start "entryRuleItWordElurl"
    // InternalNaturalLang.g:4399:1: entryRuleItWordElurl returns [String current=null] : iv_ruleItWordElurl= ruleItWordElurl EOF ;
    public final String entryRuleItWordElurl() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleItWordElurl = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4401:2: (iv_ruleItWordElurl= ruleItWordElurl EOF )
            // InternalNaturalLang.g:4402:2: iv_ruleItWordElurl= ruleItWordElurl EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getItWordElurlRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleItWordElurl=ruleItWordElurl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleItWordElurl.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleItWordElurl"


    // $ANTLR start "ruleItWordElurl"
    // InternalNaturalLang.g:4411:1: ruleItWordElurl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IT_ID_0= RULE_IT_ID | this_ID_ALL_1= RULE_ID_ALL | this_ID_2= RULE_ID ) ;
    public final AntlrDatatypeRuleToken ruleItWordElurl() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IT_ID_0=null;
        Token this_ID_ALL_1=null;
        Token this_ID_2=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4418:2: ( (this_IT_ID_0= RULE_IT_ID | this_ID_ALL_1= RULE_ID_ALL | this_ID_2= RULE_ID ) )
            // InternalNaturalLang.g:4419:2: (this_IT_ID_0= RULE_IT_ID | this_ID_ALL_1= RULE_ID_ALL | this_ID_2= RULE_ID )
            {
            // InternalNaturalLang.g:4419:2: (this_IT_ID_0= RULE_IT_ID | this_ID_ALL_1= RULE_ID_ALL | this_ID_2= RULE_ID )
            int alt100=3;
            switch ( input.LA(1) ) {
            case RULE_IT_ID:
                {
                alt100=1;
                }
                break;
            case RULE_ID_ALL:
                {
                alt100=2;
                }
                break;
            case RULE_ID:
                {
                alt100=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }

            switch (alt100) {
                case 1 :
                    // InternalNaturalLang.g:4420:3: this_IT_ID_0= RULE_IT_ID
                    {
                    this_IT_ID_0=(Token)match(input,RULE_IT_ID,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IT_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IT_ID_0, grammarAccess.getItWordElurlAccess().getIT_IDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4428:3: this_ID_ALL_1= RULE_ID_ALL
                    {
                    this_ID_ALL_1=(Token)match(input,RULE_ID_ALL,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_ALL_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_ALL_1, grammarAccess.getItWordElurlAccess().getID_ALLTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:4436:3: this_ID_2= RULE_ID
                    {
                    this_ID_2=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_2, grammarAccess.getItWordElurlAccess().getIDTerminalRuleCall_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleItWordElurl"


    // $ANTLR start "entryRuleItWordElX"
    // InternalNaturalLang.g:4450:1: entryRuleItWordElX returns [String current=null] : iv_ruleItWordElX= ruleItWordElX EOF ;
    public final String entryRuleItWordElX() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleItWordElX = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4452:2: (iv_ruleItWordElX= ruleItWordElX EOF )
            // InternalNaturalLang.g:4453:2: iv_ruleItWordElX= ruleItWordElX EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getItWordElXRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleItWordElX=ruleItWordElX();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleItWordElX.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleItWordElX"


    // $ANTLR start "ruleItWordElX"
    // InternalNaturalLang.g:4462:1: ruleItWordElX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ItWordEl_0= ruleItWordEl | this_INT_1= RULE_INT | this_HEX_NUMBER_2= RULE_HEX_NUMBER | this_ID_ALL_3= RULE_ID_ALL ) ;
    public final AntlrDatatypeRuleToken ruleItWordElX() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_1=null;
        Token this_HEX_NUMBER_2=null;
        Token this_ID_ALL_3=null;
        AntlrDatatypeRuleToken this_ItWordEl_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4469:2: ( (this_ItWordEl_0= ruleItWordEl | this_INT_1= RULE_INT | this_HEX_NUMBER_2= RULE_HEX_NUMBER | this_ID_ALL_3= RULE_ID_ALL ) )
            // InternalNaturalLang.g:4470:2: (this_ItWordEl_0= ruleItWordEl | this_INT_1= RULE_INT | this_HEX_NUMBER_2= RULE_HEX_NUMBER | this_ID_ALL_3= RULE_ID_ALL )
            {
            // InternalNaturalLang.g:4470:2: (this_ItWordEl_0= ruleItWordEl | this_INT_1= RULE_INT | this_HEX_NUMBER_2= RULE_HEX_NUMBER | this_ID_ALL_3= RULE_ID_ALL )
            int alt101=4;
            switch ( input.LA(1) ) {
            case RULE_IT_ID:
            case RULE_DOUBLE_DOT:
                {
                alt101=1;
                }
                break;
            case RULE_INT:
                {
                alt101=2;
                }
                break;
            case RULE_HEX_NUMBER:
                {
                alt101=3;
                }
                break;
            case RULE_ID_ALL:
                {
                alt101=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // InternalNaturalLang.g:4471:3: this_ItWordEl_0= ruleItWordEl
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getItWordElXAccess().getItWordElParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_ItWordEl_0=ruleItWordEl();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ItWordEl_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4482:3: this_INT_1= RULE_INT
                    {
                    this_INT_1=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_INT_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_INT_1, grammarAccess.getItWordElXAccess().getINTTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:4490:3: this_HEX_NUMBER_2= RULE_HEX_NUMBER
                    {
                    this_HEX_NUMBER_2=(Token)match(input,RULE_HEX_NUMBER,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_HEX_NUMBER_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_HEX_NUMBER_2, grammarAccess.getItWordElXAccess().getHEX_NUMBERTerminalRuleCall_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:4498:3: this_ID_ALL_3= RULE_ID_ALL
                    {
                    this_ID_ALL_3=(Token)match(input,RULE_ID_ALL,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_ALL_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_ALL_3, grammarAccess.getItWordElXAccess().getID_ALLTerminalRuleCall_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleItWordElX"


    // $ANTLR start "entryRuleItWordElXx"
    // InternalNaturalLang.g:4512:1: entryRuleItWordElXx returns [String current=null] : iv_ruleItWordElXx= ruleItWordElXx EOF ;
    public final String entryRuleItWordElXx() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleItWordElXx = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4514:2: (iv_ruleItWordElXx= ruleItWordElXx EOF )
            // InternalNaturalLang.g:4515:2: iv_ruleItWordElXx= ruleItWordElXx EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getItWordElXxRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleItWordElXx=ruleItWordElXx();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleItWordElXx.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleItWordElXx"


    // $ANTLR start "ruleItWordElXx"
    // InternalNaturalLang.g:4524:1: ruleItWordElXx returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ALL_ALPHA_0= RULE_ALL_ALPHA | this_ALPHA_1= RULE_ALPHA | ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX ) | this_Fragment_3= ruleFragment | this_Asterisk_4= ruleAsterisk | this_ID_C_5= RULE_ID_C | this_CURL_6= RULE_CURL )+ ;
    public final AntlrDatatypeRuleToken ruleItWordElXx() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ALL_ALPHA_0=null;
        Token this_ALPHA_1=null;
        Token this_ID_C_5=null;
        Token this_CURL_6=null;
        AntlrDatatypeRuleToken this_ItWordElX_2 = null;

        AntlrDatatypeRuleToken this_Fragment_3 = null;

        AntlrDatatypeRuleToken this_Asterisk_4 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4531:2: ( (this_ALL_ALPHA_0= RULE_ALL_ALPHA | this_ALPHA_1= RULE_ALPHA | ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX ) | this_Fragment_3= ruleFragment | this_Asterisk_4= ruleAsterisk | this_ID_C_5= RULE_ID_C | this_CURL_6= RULE_CURL )+ )
            // InternalNaturalLang.g:4532:2: (this_ALL_ALPHA_0= RULE_ALL_ALPHA | this_ALPHA_1= RULE_ALPHA | ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX ) | this_Fragment_3= ruleFragment | this_Asterisk_4= ruleAsterisk | this_ID_C_5= RULE_ID_C | this_CURL_6= RULE_CURL )+
            {
            // InternalNaturalLang.g:4532:2: (this_ALL_ALPHA_0= RULE_ALL_ALPHA | this_ALPHA_1= RULE_ALPHA | ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX ) | this_Fragment_3= ruleFragment | this_Asterisk_4= ruleAsterisk | this_ID_C_5= RULE_ID_C | this_CURL_6= RULE_CURL )+
            int cnt102=0;
            loop102:
            do {
                int alt102=8;
                alt102 = dfa102.predict(input);
                switch (alt102) {
            	case 1 :
            	    // InternalNaturalLang.g:4533:3: this_ALL_ALPHA_0= RULE_ALL_ALPHA
            	    {
            	    this_ALL_ALPHA_0=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_48); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_ALL_ALPHA_0);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			newLeafNode(this_ALL_ALPHA_0, grammarAccess.getItWordElXxAccess().getALL_ALPHATerminalRuleCall_0());
            	      		
            	    }

            	    }
            	    break;
            	case 2 :
            	    // InternalNaturalLang.g:4541:3: this_ALPHA_1= RULE_ALPHA
            	    {
            	    this_ALPHA_1=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_48); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_ALPHA_1);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			newLeafNode(this_ALPHA_1, grammarAccess.getItWordElXxAccess().getALPHATerminalRuleCall_1());
            	      		
            	    }

            	    }
            	    break;
            	case 3 :
            	    // InternalNaturalLang.g:4549:3: ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX )
            	    {
            	    // InternalNaturalLang.g:4549:3: ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX )
            	    // InternalNaturalLang.g:4550:4: ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getItWordElXxAccess().getItWordElXParserRuleCall_2());
            	      			
            	    }
            	    pushFollow(FollowSets000.FOLLOW_48);
            	    this_ItWordElX_2=ruleItWordElX();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_ItWordElX_2);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalNaturalLang.g:4563:3: this_Fragment_3= ruleFragment
            	    {
            	    if ( state.backtracking==0 ) {

            	      			newCompositeNode(grammarAccess.getItWordElXxAccess().getFragmentParserRuleCall_3());
            	      		
            	    }
            	    pushFollow(FollowSets000.FOLLOW_48);
            	    this_Fragment_3=ruleFragment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_Fragment_3);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			afterParserOrEnumRuleCall();
            	      		
            	    }

            	    }
            	    break;
            	case 5 :
            	    // InternalNaturalLang.g:4574:3: this_Asterisk_4= ruleAsterisk
            	    {
            	    if ( state.backtracking==0 ) {

            	      			newCompositeNode(grammarAccess.getItWordElXxAccess().getAsteriskParserRuleCall_4());
            	      		
            	    }
            	    pushFollow(FollowSets000.FOLLOW_48);
            	    this_Asterisk_4=ruleAsterisk();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_Asterisk_4);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			afterParserOrEnumRuleCall();
            	      		
            	    }

            	    }
            	    break;
            	case 6 :
            	    // InternalNaturalLang.g:4585:3: this_ID_C_5= RULE_ID_C
            	    {
            	    this_ID_C_5=(Token)match(input,RULE_ID_C,FollowSets000.FOLLOW_48); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_ID_C_5);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			newLeafNode(this_ID_C_5, grammarAccess.getItWordElXxAccess().getID_CTerminalRuleCall_5());
            	      		
            	    }

            	    }
            	    break;
            	case 7 :
            	    // InternalNaturalLang.g:4593:3: this_CURL_6= RULE_CURL
            	    {
            	    this_CURL_6=(Token)match(input,RULE_CURL,FollowSets000.FOLLOW_48); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_CURL_6);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			newLeafNode(this_CURL_6, grammarAccess.getItWordElXxAccess().getCURLTerminalRuleCall_6());
            	      		
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleItWordElXx"


    // $ANTLR start "entryRuleSeparatorsL"
    // InternalNaturalLang.g:4607:1: entryRuleSeparatorsL returns [String current=null] : iv_ruleSeparatorsL= ruleSeparatorsL EOF ;
    public final String entryRuleSeparatorsL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSeparatorsL = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4609:2: (iv_ruleSeparatorsL= ruleSeparatorsL EOF )
            // InternalNaturalLang.g:4610:2: iv_ruleSeparatorsL= ruleSeparatorsL EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSeparatorsLRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSeparatorsL=ruleSeparatorsL();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSeparatorsL.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleSeparatorsL"


    // $ANTLR start "ruleSeparatorsL"
    // InternalNaturalLang.g:4619:1: ruleSeparatorsL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SLASH_0= RULE_SLASH | this_SEPARATORS_1= RULE_SEPARATORS | this_DASH_2= RULE_DASH | this_MINUS_3= RULE_MINUS ) ;
    public final AntlrDatatypeRuleToken ruleSeparatorsL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_SLASH_0=null;
        Token this_SEPARATORS_1=null;
        Token this_DASH_2=null;
        Token this_MINUS_3=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4626:2: ( (this_SLASH_0= RULE_SLASH | this_SEPARATORS_1= RULE_SEPARATORS | this_DASH_2= RULE_DASH | this_MINUS_3= RULE_MINUS ) )
            // InternalNaturalLang.g:4627:2: (this_SLASH_0= RULE_SLASH | this_SEPARATORS_1= RULE_SEPARATORS | this_DASH_2= RULE_DASH | this_MINUS_3= RULE_MINUS )
            {
            // InternalNaturalLang.g:4627:2: (this_SLASH_0= RULE_SLASH | this_SEPARATORS_1= RULE_SEPARATORS | this_DASH_2= RULE_DASH | this_MINUS_3= RULE_MINUS )
            int alt103=4;
            switch ( input.LA(1) ) {
            case RULE_SLASH:
                {
                alt103=1;
                }
                break;
            case RULE_SEPARATORS:
                {
                alt103=2;
                }
                break;
            case RULE_DASH:
                {
                alt103=3;
                }
                break;
            case RULE_MINUS:
                {
                alt103=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // InternalNaturalLang.g:4628:3: this_SLASH_0= RULE_SLASH
                    {
                    this_SLASH_0=(Token)match(input,RULE_SLASH,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SLASH_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SLASH_0, grammarAccess.getSeparatorsLAccess().getSLASHTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4636:3: this_SEPARATORS_1= RULE_SEPARATORS
                    {
                    this_SEPARATORS_1=(Token)match(input,RULE_SEPARATORS,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SEPARATORS_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SEPARATORS_1, grammarAccess.getSeparatorsLAccess().getSEPARATORSTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:4644:3: this_DASH_2= RULE_DASH
                    {
                    this_DASH_2=(Token)match(input,RULE_DASH,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DASH_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DASH_2, grammarAccess.getSeparatorsLAccess().getDASHTerminalRuleCall_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:4652:3: this_MINUS_3= RULE_MINUS
                    {
                    this_MINUS_3=(Token)match(input,RULE_MINUS,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_MINUS_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_MINUS_3, grammarAccess.getSeparatorsLAccess().getMINUSTerminalRuleCall_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleSeparatorsL"


    // $ANTLR start "entryRuleSeparatorsIt"
    // InternalNaturalLang.g:4666:1: entryRuleSeparatorsIt returns [String current=null] : iv_ruleSeparatorsIt= ruleSeparatorsIt EOF ;
    public final String entryRuleSeparatorsIt() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSeparatorsIt = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4668:2: (iv_ruleSeparatorsIt= ruleSeparatorsIt EOF )
            // InternalNaturalLang.g:4669:2: iv_ruleSeparatorsIt= ruleSeparatorsIt EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSeparatorsItRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSeparatorsIt=ruleSeparatorsIt();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSeparatorsIt.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleSeparatorsIt"


    // $ANTLR start "ruleSeparatorsIt"
    // InternalNaturalLang.g:4678:1: ruleSeparatorsIt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_DOT_0= RULE_DOT | this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON ) ;
    public final AntlrDatatypeRuleToken ruleSeparatorsIt() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_DOT_0=null;
        Token this_SEPARATORS_IT_1=null;
        Token this_COLON_2=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4685:2: ( (this_DOT_0= RULE_DOT | this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON ) )
            // InternalNaturalLang.g:4686:2: (this_DOT_0= RULE_DOT | this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON )
            {
            // InternalNaturalLang.g:4686:2: (this_DOT_0= RULE_DOT | this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON )
            int alt104=3;
            switch ( input.LA(1) ) {
            case RULE_DOT:
                {
                alt104=1;
                }
                break;
            case RULE_SEPARATORS_IT:
                {
                alt104=2;
                }
                break;
            case RULE_COLON:
                {
                alt104=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // InternalNaturalLang.g:4687:3: this_DOT_0= RULE_DOT
                    {
                    this_DOT_0=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DOT_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DOT_0, grammarAccess.getSeparatorsItAccess().getDOTTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4695:3: this_SEPARATORS_IT_1= RULE_SEPARATORS_IT
                    {
                    this_SEPARATORS_IT_1=(Token)match(input,RULE_SEPARATORS_IT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SEPARATORS_IT_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SEPARATORS_IT_1, grammarAccess.getSeparatorsItAccess().getSEPARATORS_ITTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:4703:3: this_COLON_2= RULE_COLON
                    {
                    this_COLON_2=(Token)match(input,RULE_COLON,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_COLON_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_COLON_2, grammarAccess.getSeparatorsItAccess().getCOLONTerminalRuleCall_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleSeparatorsIt"

}

@SuppressWarnings("all")
abstract class InternalNaturalLangParser3 extends InternalNaturalLangParser2 {

        InternalNaturalLangParser3(TokenStream input) {
            this(input, new RecognizerSharedState());
        }

        InternalNaturalLangParser3(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }

    // $ANTLR start "entryRuleAllSep"
    // InternalNaturalLang.g:4717:1: entryRuleAllSep returns [String current=null] : iv_ruleAllSep= ruleAllSep EOF ;
    public final String entryRuleAllSep() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAllSep = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4719:2: (iv_ruleAllSep= ruleAllSep EOF )
            // InternalNaturalLang.g:4720:2: iv_ruleAllSep= ruleAllSep EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAllSepRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleAllSep=ruleAllSep();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAllSep.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleAllSep"


    // $ANTLR start "ruleAllSep"
    // InternalNaturalLang.g:4729:1: ruleAllSep returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SeparatorsIt_0= ruleSeparatorsIt | this_SeparatorsL_1= ruleSeparatorsL ) ;
    public final AntlrDatatypeRuleToken ruleAllSep() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SeparatorsIt_0 = null;

        AntlrDatatypeRuleToken this_SeparatorsL_1 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4736:2: ( (this_SeparatorsIt_0= ruleSeparatorsIt | this_SeparatorsL_1= ruleSeparatorsL ) )
            // InternalNaturalLang.g:4737:2: (this_SeparatorsIt_0= ruleSeparatorsIt | this_SeparatorsL_1= ruleSeparatorsL )
            {
            // InternalNaturalLang.g:4737:2: (this_SeparatorsIt_0= ruleSeparatorsIt | this_SeparatorsL_1= ruleSeparatorsL )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==RULE_DOT||LA105_0==RULE_COLON||LA105_0==RULE_SEPARATORS_IT) ) {
                alt105=1;
            }
            else if ( ((LA105_0>=RULE_DASH && LA105_0<=RULE_MINUS)||(LA105_0>=RULE_SLASH && LA105_0<=RULE_SEPARATORS)) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // InternalNaturalLang.g:4738:3: this_SeparatorsIt_0= ruleSeparatorsIt
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAllSepAccess().getSeparatorsItParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_SeparatorsIt_0=ruleSeparatorsIt();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SeparatorsIt_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4749:3: this_SeparatorsL_1= ruleSeparatorsL
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAllSepAccess().getSeparatorsLParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_SeparatorsL_1=ruleSeparatorsL();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SeparatorsL_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleAllSep"


    // $ANTLR start "entryRuleQuote"
    // InternalNaturalLang.g:4766:1: entryRuleQuote returns [EObject current=null] : iv_ruleQuote= ruleQuote EOF ;
    public final EObject entryRuleQuote() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQuote = null;


        try {
            // InternalNaturalLang.g:4766:46: (iv_ruleQuote= ruleQuote EOF )
            // InternalNaturalLang.g:4767:2: iv_ruleQuote= ruleQuote EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQuoteRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleQuote=ruleQuote();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQuote; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQuote"


    // $ANTLR start "ruleQuote"
    // InternalNaturalLang.g:4773:1: ruleQuote returns [EObject current=null] : ( (lv_quote_0_0= RULE_STRING ) ) ;
    public final EObject ruleQuote() throws RecognitionException {
        EObject current = null;

        Token lv_quote_0_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:4779:2: ( ( (lv_quote_0_0= RULE_STRING ) ) )
            // InternalNaturalLang.g:4780:2: ( (lv_quote_0_0= RULE_STRING ) )
            {
            // InternalNaturalLang.g:4780:2: ( (lv_quote_0_0= RULE_STRING ) )
            // InternalNaturalLang.g:4781:3: (lv_quote_0_0= RULE_STRING )
            {
            // InternalNaturalLang.g:4781:3: (lv_quote_0_0= RULE_STRING )
            // InternalNaturalLang.g:4782:4: lv_quote_0_0= RULE_STRING
            {
            lv_quote_0_0=(Token)match(input,RULE_STRING,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_quote_0_0, grammarAccess.getQuoteAccess().getQuoteSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getQuoteRule());
              				}
              				setWithLastConsumed(
              					current,
              					"quote",
              					lv_quote_0_0,
              					"org.xixum.nlx.naturalLang.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQuote"


    // $ANTLR start "entryRuleUnit"
    // InternalNaturalLang.g:4801:1: entryRuleUnit returns [EObject current=null] : iv_ruleUnit= ruleUnit EOF ;
    public final EObject entryRuleUnit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnit = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4803:2: (iv_ruleUnit= ruleUnit EOF )
            // InternalNaturalLang.g:4804:2: iv_ruleUnit= ruleUnit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnitRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleUnit=ruleUnit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnit; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleUnit"


    // $ANTLR start "ruleUnit"
    // InternalNaturalLang.g:4813:1: ruleUnit returns [EObject current=null] : ( ( (lv_signature_0_0= RULE_MINUS ) )? ( ( ( ruleNumber ) )=> (lv_value_1_0= ruleNumber ) ) ( ( (lv_unit_2_0= RULE_CURRENCY ) ) | ( (lv_unit_3_0= RULE_ID ) ) | ( (lv_unit_4_0= RULE_PERCENT ) ) )? ) ;
    public final EObject ruleUnit() throws RecognitionException {
        EObject current = null;

        Token lv_signature_0_0=null;
        Token lv_unit_2_0=null;
        Token lv_unit_3_0=null;
        Token lv_unit_4_0=null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:4820:2: ( ( ( (lv_signature_0_0= RULE_MINUS ) )? ( ( ( ruleNumber ) )=> (lv_value_1_0= ruleNumber ) ) ( ( (lv_unit_2_0= RULE_CURRENCY ) ) | ( (lv_unit_3_0= RULE_ID ) ) | ( (lv_unit_4_0= RULE_PERCENT ) ) )? ) )
            // InternalNaturalLang.g:4821:2: ( ( (lv_signature_0_0= RULE_MINUS ) )? ( ( ( ruleNumber ) )=> (lv_value_1_0= ruleNumber ) ) ( ( (lv_unit_2_0= RULE_CURRENCY ) ) | ( (lv_unit_3_0= RULE_ID ) ) | ( (lv_unit_4_0= RULE_PERCENT ) ) )? )
            {
            // InternalNaturalLang.g:4821:2: ( ( (lv_signature_0_0= RULE_MINUS ) )? ( ( ( ruleNumber ) )=> (lv_value_1_0= ruleNumber ) ) ( ( (lv_unit_2_0= RULE_CURRENCY ) ) | ( (lv_unit_3_0= RULE_ID ) ) | ( (lv_unit_4_0= RULE_PERCENT ) ) )? )
            // InternalNaturalLang.g:4822:3: ( (lv_signature_0_0= RULE_MINUS ) )? ( ( ( ruleNumber ) )=> (lv_value_1_0= ruleNumber ) ) ( ( (lv_unit_2_0= RULE_CURRENCY ) ) | ( (lv_unit_3_0= RULE_ID ) ) | ( (lv_unit_4_0= RULE_PERCENT ) ) )?
            {
            // InternalNaturalLang.g:4822:3: ( (lv_signature_0_0= RULE_MINUS ) )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==RULE_MINUS) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // InternalNaturalLang.g:4823:4: (lv_signature_0_0= RULE_MINUS )
                    {
                    // InternalNaturalLang.g:4823:4: (lv_signature_0_0= RULE_MINUS )
                    // InternalNaturalLang.g:4824:5: lv_signature_0_0= RULE_MINUS
                    {
                    lv_signature_0_0=(Token)match(input,RULE_MINUS,FollowSets000.FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_signature_0_0, grammarAccess.getUnitAccess().getSignatureMINUSTerminalRuleCall_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getUnitRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"signature",
                      						lv_signature_0_0,
                      						"org.xixum.nlx.naturalLang.MINUS");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:4840:3: ( ( ( ruleNumber ) )=> (lv_value_1_0= ruleNumber ) )
            // InternalNaturalLang.g:4841:4: ( ( ruleNumber ) )=> (lv_value_1_0= ruleNumber )
            {
            // InternalNaturalLang.g:4845:4: (lv_value_1_0= ruleNumber )
            // InternalNaturalLang.g:4846:5: lv_value_1_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnitAccess().getValueNumberParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_50);
            lv_value_1_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnitRule());
              					}
              					add(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xixum.nlx.naturalLang.Number");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:4863:3: ( ( (lv_unit_2_0= RULE_CURRENCY ) ) | ( (lv_unit_3_0= RULE_ID ) ) | ( (lv_unit_4_0= RULE_PERCENT ) ) )?
            int alt107=4;
            switch ( input.LA(1) ) {
                case RULE_CURRENCY:
                    {
                    alt107=1;
                    }
                    break;
                case RULE_ID:
                    {
                    alt107=2;
                    }
                    break;
                case RULE_PERCENT:
                    {
                    alt107=3;
                    }
                    break;
            }

            switch (alt107) {
                case 1 :
                    // InternalNaturalLang.g:4864:4: ( (lv_unit_2_0= RULE_CURRENCY ) )
                    {
                    // InternalNaturalLang.g:4864:4: ( (lv_unit_2_0= RULE_CURRENCY ) )
                    // InternalNaturalLang.g:4865:5: (lv_unit_2_0= RULE_CURRENCY )
                    {
                    // InternalNaturalLang.g:4865:5: (lv_unit_2_0= RULE_CURRENCY )
                    // InternalNaturalLang.g:4866:6: lv_unit_2_0= RULE_CURRENCY
                    {
                    lv_unit_2_0=(Token)match(input,RULE_CURRENCY,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_unit_2_0, grammarAccess.getUnitAccess().getUnitCURRENCYTerminalRuleCall_2_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getUnitRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"unit",
                      							lv_unit_2_0,
                      							"org.xixum.nlx.naturalLang.CURRENCY");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4883:4: ( (lv_unit_3_0= RULE_ID ) )
                    {
                    // InternalNaturalLang.g:4883:4: ( (lv_unit_3_0= RULE_ID ) )
                    // InternalNaturalLang.g:4884:5: (lv_unit_3_0= RULE_ID )
                    {
                    // InternalNaturalLang.g:4884:5: (lv_unit_3_0= RULE_ID )
                    // InternalNaturalLang.g:4885:6: lv_unit_3_0= RULE_ID
                    {
                    lv_unit_3_0=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_unit_3_0, grammarAccess.getUnitAccess().getUnitIDTerminalRuleCall_2_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getUnitRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"unit",
                      							lv_unit_3_0,
                      							"org.xixum.nlx.naturalLang.ID");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:4902:4: ( (lv_unit_4_0= RULE_PERCENT ) )
                    {
                    // InternalNaturalLang.g:4902:4: ( (lv_unit_4_0= RULE_PERCENT ) )
                    // InternalNaturalLang.g:4903:5: (lv_unit_4_0= RULE_PERCENT )
                    {
                    // InternalNaturalLang.g:4903:5: (lv_unit_4_0= RULE_PERCENT )
                    // InternalNaturalLang.g:4904:6: lv_unit_4_0= RULE_PERCENT
                    {
                    lv_unit_4_0=(Token)match(input,RULE_PERCENT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_unit_4_0, grammarAccess.getUnitAccess().getUnitPERCENTTerminalRuleCall_2_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getUnitRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"unit",
                      							lv_unit_4_0,
                      							"org.xixum.nlx.naturalLang.PERCENT");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleUnit"


    // $ANTLR start "entryRuleSimpleUnit"
    // InternalNaturalLang.g:4928:1: entryRuleSimpleUnit returns [EObject current=null] : iv_ruleSimpleUnit= ruleSimpleUnit EOF ;
    public final EObject entryRuleSimpleUnit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleUnit = null;


        try {
            // InternalNaturalLang.g:4928:51: (iv_ruleSimpleUnit= ruleSimpleUnit EOF )
            // InternalNaturalLang.g:4929:2: iv_ruleSimpleUnit= ruleSimpleUnit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleUnitRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSimpleUnit=ruleSimpleUnit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleUnit; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleUnit"


    // $ANTLR start "ruleSimpleUnit"
    // InternalNaturalLang.g:4935:1: ruleSimpleUnit returns [EObject current=null] : ( ( () ( (lv_value_1_0= rulechapterNum ) ) ) | ( (lv_value_2_0= ruleItNum ) ) | ( (lv_value_3_0= RULE_HEX_NUMBER ) ) ) ;
    public final EObject ruleSimpleUnit() throws RecognitionException {
        EObject current = null;

        Token lv_value_3_0=null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;

        AntlrDatatypeRuleToken lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:4941:2: ( ( ( () ( (lv_value_1_0= rulechapterNum ) ) ) | ( (lv_value_2_0= ruleItNum ) ) | ( (lv_value_3_0= RULE_HEX_NUMBER ) ) ) )
            // InternalNaturalLang.g:4942:2: ( ( () ( (lv_value_1_0= rulechapterNum ) ) ) | ( (lv_value_2_0= ruleItNum ) ) | ( (lv_value_3_0= RULE_HEX_NUMBER ) ) )
            {
            // InternalNaturalLang.g:4942:2: ( ( () ( (lv_value_1_0= rulechapterNum ) ) ) | ( (lv_value_2_0= ruleItNum ) ) | ( (lv_value_3_0= RULE_HEX_NUMBER ) ) )
            int alt108=3;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==RULE_INT) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==RULE_DOT) ) {
                    alt108=1;
                }
                else if ( ((LA108_1>=RULE_DASH && LA108_1<=RULE_MINUS)||LA108_1==RULE_COLON||LA108_1==RULE_SLASH||LA108_1==RULE_SEPARATORS_IT) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA108_0==RULE_HEX_NUMBER) ) {
                alt108=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // InternalNaturalLang.g:4943:3: ( () ( (lv_value_1_0= rulechapterNum ) ) )
                    {
                    // InternalNaturalLang.g:4943:3: ( () ( (lv_value_1_0= rulechapterNum ) ) )
                    // InternalNaturalLang.g:4944:4: () ( (lv_value_1_0= rulechapterNum ) )
                    {
                    // InternalNaturalLang.g:4944:4: ()
                    // InternalNaturalLang.g:4945:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getSimpleUnitAccess().getUnitAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalNaturalLang.g:4954:4: ( (lv_value_1_0= rulechapterNum ) )
                    // InternalNaturalLang.g:4955:5: (lv_value_1_0= rulechapterNum )
                    {
                    // InternalNaturalLang.g:4955:5: (lv_value_1_0= rulechapterNum )
                    // InternalNaturalLang.g:4956:6: lv_value_1_0= rulechapterNum
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSimpleUnitAccess().getValueChapterNumParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    lv_value_1_0=rulechapterNum();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSimpleUnitRule());
                      						}
                      						add(
                      							current,
                      							"value",
                      							lv_value_1_0,
                      							"org.xixum.nlx.naturalLang.chapterNum");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:4975:3: ( (lv_value_2_0= ruleItNum ) )
                    {
                    // InternalNaturalLang.g:4975:3: ( (lv_value_2_0= ruleItNum ) )
                    // InternalNaturalLang.g:4976:4: (lv_value_2_0= ruleItNum )
                    {
                    // InternalNaturalLang.g:4976:4: (lv_value_2_0= ruleItNum )
                    // InternalNaturalLang.g:4977:5: lv_value_2_0= ruleItNum
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSimpleUnitAccess().getValueItNumParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    lv_value_2_0=ruleItNum();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSimpleUnitRule());
                      					}
                      					add(
                      						current,
                      						"value",
                      						lv_value_2_0,
                      						"org.xixum.nlx.naturalLang.ItNum");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:4995:3: ( (lv_value_3_0= RULE_HEX_NUMBER ) )
                    {
                    // InternalNaturalLang.g:4995:3: ( (lv_value_3_0= RULE_HEX_NUMBER ) )
                    // InternalNaturalLang.g:4996:4: (lv_value_3_0= RULE_HEX_NUMBER )
                    {
                    // InternalNaturalLang.g:4996:4: (lv_value_3_0= RULE_HEX_NUMBER )
                    // InternalNaturalLang.g:4997:5: lv_value_3_0= RULE_HEX_NUMBER
                    {
                    lv_value_3_0=(Token)match(input,RULE_HEX_NUMBER,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_value_3_0, grammarAccess.getSimpleUnitAccess().getValueHEX_NUMBERTerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getSimpleUnitRule());
                      					}
                      					addWithLastConsumed(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.xixum.nlx.naturalLang.HEX_NUMBER");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleUnit"


    // $ANTLR start "entryRuleChapter_Unit_HI"
    // InternalNaturalLang.g:5017:1: entryRuleChapter_Unit_HI returns [EObject current=null] : iv_ruleChapter_Unit_HI= ruleChapter_Unit_HI EOF ;
    public final EObject entryRuleChapter_Unit_HI() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleChapter_Unit_HI = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5019:2: (iv_ruleChapter_Unit_HI= ruleChapter_Unit_HI EOF )
            // InternalNaturalLang.g:5020:2: iv_ruleChapter_Unit_HI= ruleChapter_Unit_HI EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getChapter_Unit_HIRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleChapter_Unit_HI=ruleChapter_Unit_HI();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleChapter_Unit_HI; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleChapter_Unit_HI"


    // $ANTLR start "ruleChapter_Unit_HI"
    // InternalNaturalLang.g:5029:1: ruleChapter_Unit_HI returns [EObject current=null] : ( () ( (lv_value_1_0= rulechapterNum ) ) (this_SPACE_2= RULE_SPACE )? ) ;
    public final EObject ruleChapter_Unit_HI() throws RecognitionException {
        EObject current = null;

        Token this_SPACE_2=null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5036:2: ( ( () ( (lv_value_1_0= rulechapterNum ) ) (this_SPACE_2= RULE_SPACE )? ) )
            // InternalNaturalLang.g:5037:2: ( () ( (lv_value_1_0= rulechapterNum ) ) (this_SPACE_2= RULE_SPACE )? )
            {
            // InternalNaturalLang.g:5037:2: ( () ( (lv_value_1_0= rulechapterNum ) ) (this_SPACE_2= RULE_SPACE )? )
            // InternalNaturalLang.g:5038:3: () ( (lv_value_1_0= rulechapterNum ) ) (this_SPACE_2= RULE_SPACE )?
            {
            // InternalNaturalLang.g:5038:3: ()
            // InternalNaturalLang.g:5039:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getChapter_Unit_HIAccess().getUnitAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5048:3: ( (lv_value_1_0= rulechapterNum ) )
            // InternalNaturalLang.g:5049:4: (lv_value_1_0= rulechapterNum )
            {
            // InternalNaturalLang.g:5049:4: (lv_value_1_0= rulechapterNum )
            // InternalNaturalLang.g:5050:5: lv_value_1_0= rulechapterNum
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getChapter_Unit_HIAccess().getValueChapterNumParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_24);
            lv_value_1_0=rulechapterNum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getChapter_Unit_HIRule());
              					}
              					add(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xixum.nlx.naturalLang.chapterNum");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:5067:3: (this_SPACE_2= RULE_SPACE )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==RULE_SPACE) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // InternalNaturalLang.g:5068:4: this_SPACE_2= RULE_SPACE
                    {
                    this_SPACE_2=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_2, grammarAccess.getChapter_Unit_HIAccess().getSPACETerminalRuleCall_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleChapter_Unit_HI"


    // $ANTLR start "entryRuleChapter_Unit_Low"
    // InternalNaturalLang.g:5080:1: entryRuleChapter_Unit_Low returns [EObject current=null] : iv_ruleChapter_Unit_Low= ruleChapter_Unit_Low EOF ;
    public final EObject entryRuleChapter_Unit_Low() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleChapter_Unit_Low = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5082:2: (iv_ruleChapter_Unit_Low= ruleChapter_Unit_Low EOF )
            // InternalNaturalLang.g:5083:2: iv_ruleChapter_Unit_Low= ruleChapter_Unit_Low EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getChapter_Unit_LowRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleChapter_Unit_Low=ruleChapter_Unit_Low();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleChapter_Unit_Low; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleChapter_Unit_Low"


    // $ANTLR start "ruleChapter_Unit_Low"
    // InternalNaturalLang.g:5092:1: ruleChapter_Unit_Low returns [EObject current=null] : ( () ( (lv_value_1_0= ruledecimalNumEN ) ) (this_SPACE_2= RULE_SPACE )? ) ;
    public final EObject ruleChapter_Unit_Low() throws RecognitionException {
        EObject current = null;

        Token this_SPACE_2=null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5099:2: ( ( () ( (lv_value_1_0= ruledecimalNumEN ) ) (this_SPACE_2= RULE_SPACE )? ) )
            // InternalNaturalLang.g:5100:2: ( () ( (lv_value_1_0= ruledecimalNumEN ) ) (this_SPACE_2= RULE_SPACE )? )
            {
            // InternalNaturalLang.g:5100:2: ( () ( (lv_value_1_0= ruledecimalNumEN ) ) (this_SPACE_2= RULE_SPACE )? )
            // InternalNaturalLang.g:5101:3: () ( (lv_value_1_0= ruledecimalNumEN ) ) (this_SPACE_2= RULE_SPACE )?
            {
            // InternalNaturalLang.g:5101:3: ()
            // InternalNaturalLang.g:5102:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getChapter_Unit_LowAccess().getUnitAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5111:3: ( (lv_value_1_0= ruledecimalNumEN ) )
            // InternalNaturalLang.g:5112:4: (lv_value_1_0= ruledecimalNumEN )
            {
            // InternalNaturalLang.g:5112:4: (lv_value_1_0= ruledecimalNumEN )
            // InternalNaturalLang.g:5113:5: lv_value_1_0= ruledecimalNumEN
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getChapter_Unit_LowAccess().getValueDecimalNumENParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_24);
            lv_value_1_0=ruledecimalNumEN();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getChapter_Unit_LowRule());
              					}
              					add(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xixum.nlx.naturalLang.decimalNumEN");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:5130:3: (this_SPACE_2= RULE_SPACE )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==RULE_SPACE) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // InternalNaturalLang.g:5131:4: this_SPACE_2= RULE_SPACE
                    {
                    this_SPACE_2=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_SPACE_2, grammarAccess.getChapter_Unit_LowAccess().getSPACETerminalRuleCall_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleChapter_Unit_Low"


    // $ANTLR start "entryRuleHashNumber"
    // InternalNaturalLang.g:5143:1: entryRuleHashNumber returns [EObject current=null] : iv_ruleHashNumber= ruleHashNumber EOF ;
    public final EObject entryRuleHashNumber() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHashNumber = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5145:2: (iv_ruleHashNumber= ruleHashNumber EOF )
            // InternalNaturalLang.g:5146:2: iv_ruleHashNumber= ruleHashNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHashNumberRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleHashNumber=ruleHashNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHashNumber; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleHashNumber"


    // $ANTLR start "ruleHashNumber"
    // InternalNaturalLang.g:5155:1: ruleHashNumber returns [EObject current=null] : ( () ( ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) ) ) ( (lv_value_2_0= ruleNumber ) ) ) ;
    public final EObject ruleHashNumber() throws RecognitionException {
        EObject current = null;

        Token lv_sign_1_1=null;
        Token lv_sign_1_2=null;
        AntlrDatatypeRuleToken lv_value_2_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5162:2: ( ( () ( ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) ) ) ( (lv_value_2_0= ruleNumber ) ) ) )
            // InternalNaturalLang.g:5163:2: ( () ( ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) ) ) ( (lv_value_2_0= ruleNumber ) ) )
            {
            // InternalNaturalLang.g:5163:2: ( () ( ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) ) ) ( (lv_value_2_0= ruleNumber ) ) )
            // InternalNaturalLang.g:5164:3: () ( ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) ) ) ( (lv_value_2_0= ruleNumber ) )
            {
            // InternalNaturalLang.g:5164:3: ()
            // InternalNaturalLang.g:5165:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getHashNumberAccess().getUnitAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5174:3: ( ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) ) )
            // InternalNaturalLang.g:5175:4: ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) )
            {
            // InternalNaturalLang.g:5175:4: ( (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR ) )
            // InternalNaturalLang.g:5176:5: (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR )
            {
            // InternalNaturalLang.g:5176:5: (lv_sign_1_1= RULE_HASH | lv_sign_1_2= RULE_PARAGR )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==RULE_HASH) ) {
                alt111=1;
            }
            else if ( (LA111_0==RULE_PARAGR) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // InternalNaturalLang.g:5177:6: lv_sign_1_1= RULE_HASH
                    {
                    lv_sign_1_1=(Token)match(input,RULE_HASH,FollowSets000.FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_sign_1_1, grammarAccess.getHashNumberAccess().getSignHASHTerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getHashNumberRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"sign",
                      							lv_sign_1_1,
                      							"org.xixum.nlx.naturalLang.HASH");
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:5192:6: lv_sign_1_2= RULE_PARAGR
                    {
                    lv_sign_1_2=(Token)match(input,RULE_PARAGR,FollowSets000.FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_sign_1_2, grammarAccess.getHashNumberAccess().getSignPARAGRTerminalRuleCall_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getHashNumberRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"sign",
                      							lv_sign_1_2,
                      							"org.xixum.nlx.naturalLang.PARAGR");
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalNaturalLang.g:5209:3: ( (lv_value_2_0= ruleNumber ) )
            // InternalNaturalLang.g:5210:4: (lv_value_2_0= ruleNumber )
            {
            // InternalNaturalLang.g:5210:4: (lv_value_2_0= ruleNumber )
            // InternalNaturalLang.g:5211:5: lv_value_2_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getHashNumberAccess().getValueNumberParserRuleCall_2_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_value_2_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getHashNumberRule());
              					}
              					add(
              						current,
              						"value",
              						lv_value_2_0,
              						"org.xixum.nlx.naturalLang.Number");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleHashNumber"


    // $ANTLR start "entryRuleChapterAlpha"
    // InternalNaturalLang.g:5235:1: entryRuleChapterAlpha returns [EObject current=null] : iv_ruleChapterAlpha= ruleChapterAlpha EOF ;
    public final EObject entryRuleChapterAlpha() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleChapterAlpha = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5237:2: (iv_ruleChapterAlpha= ruleChapterAlpha EOF )
            // InternalNaturalLang.g:5238:2: iv_ruleChapterAlpha= ruleChapterAlpha EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getChapterAlphaRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleChapterAlpha=ruleChapterAlpha();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleChapterAlpha; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleChapterAlpha"


    // $ANTLR start "ruleChapterAlpha"
    // InternalNaturalLang.g:5247:1: ruleChapterAlpha returns [EObject current=null] : ( () ( ( (lv_value_1_0= RULE_ID_C ) ) | ( (lv_value_2_0= RULE_ALL_ALPHA ) ) ) ( (lv_value_3_0= RULE_DOT ) ) ( (lv_value_4_0= ruleChapterIntermediate ) ) ( ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) ) ( (lv_value_7_0= ruleChapterIntermediate ) ) )* this_SPACE_8= RULE_SPACE ) ;
    public final EObject ruleChapterAlpha() throws RecognitionException {
        EObject current = null;

        Token lv_value_1_0=null;
        Token lv_value_2_0=null;
        Token lv_value_3_0=null;
        Token lv_value_5_0=null;
        Token lv_value_6_0=null;
        Token this_SPACE_8=null;
        AntlrDatatypeRuleToken lv_value_4_0 = null;

        AntlrDatatypeRuleToken lv_value_7_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5254:2: ( ( () ( ( (lv_value_1_0= RULE_ID_C ) ) | ( (lv_value_2_0= RULE_ALL_ALPHA ) ) ) ( (lv_value_3_0= RULE_DOT ) ) ( (lv_value_4_0= ruleChapterIntermediate ) ) ( ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) ) ( (lv_value_7_0= ruleChapterIntermediate ) ) )* this_SPACE_8= RULE_SPACE ) )
            // InternalNaturalLang.g:5255:2: ( () ( ( (lv_value_1_0= RULE_ID_C ) ) | ( (lv_value_2_0= RULE_ALL_ALPHA ) ) ) ( (lv_value_3_0= RULE_DOT ) ) ( (lv_value_4_0= ruleChapterIntermediate ) ) ( ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) ) ( (lv_value_7_0= ruleChapterIntermediate ) ) )* this_SPACE_8= RULE_SPACE )
            {
            // InternalNaturalLang.g:5255:2: ( () ( ( (lv_value_1_0= RULE_ID_C ) ) | ( (lv_value_2_0= RULE_ALL_ALPHA ) ) ) ( (lv_value_3_0= RULE_DOT ) ) ( (lv_value_4_0= ruleChapterIntermediate ) ) ( ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) ) ( (lv_value_7_0= ruleChapterIntermediate ) ) )* this_SPACE_8= RULE_SPACE )
            // InternalNaturalLang.g:5256:3: () ( ( (lv_value_1_0= RULE_ID_C ) ) | ( (lv_value_2_0= RULE_ALL_ALPHA ) ) ) ( (lv_value_3_0= RULE_DOT ) ) ( (lv_value_4_0= ruleChapterIntermediate ) ) ( ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) ) ( (lv_value_7_0= ruleChapterIntermediate ) ) )* this_SPACE_8= RULE_SPACE
            {
            // InternalNaturalLang.g:5256:3: ()
            // InternalNaturalLang.g:5257:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getChapterAlphaAccess().getUnitAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5266:3: ( ( (lv_value_1_0= RULE_ID_C ) ) | ( (lv_value_2_0= RULE_ALL_ALPHA ) ) )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==RULE_ID_C) ) {
                alt112=1;
            }
            else if ( (LA112_0==RULE_ALL_ALPHA) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // InternalNaturalLang.g:5267:4: ( (lv_value_1_0= RULE_ID_C ) )
                    {
                    // InternalNaturalLang.g:5267:4: ( (lv_value_1_0= RULE_ID_C ) )
                    // InternalNaturalLang.g:5268:5: (lv_value_1_0= RULE_ID_C )
                    {
                    // InternalNaturalLang.g:5268:5: (lv_value_1_0= RULE_ID_C )
                    // InternalNaturalLang.g:5269:6: lv_value_1_0= RULE_ID_C
                    {
                    lv_value_1_0=(Token)match(input,RULE_ID_C,FollowSets000.FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_1_0, grammarAccess.getChapterAlphaAccess().getValueID_CTerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getChapterAlphaRule());
                      						}
                      						addWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_1_0,
                      							"org.xixum.nlx.naturalLang.ID_C");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:5286:4: ( (lv_value_2_0= RULE_ALL_ALPHA ) )
                    {
                    // InternalNaturalLang.g:5286:4: ( (lv_value_2_0= RULE_ALL_ALPHA ) )
                    // InternalNaturalLang.g:5287:5: (lv_value_2_0= RULE_ALL_ALPHA )
                    {
                    // InternalNaturalLang.g:5287:5: (lv_value_2_0= RULE_ALL_ALPHA )
                    // InternalNaturalLang.g:5288:6: lv_value_2_0= RULE_ALL_ALPHA
                    {
                    lv_value_2_0=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_2_0, grammarAccess.getChapterAlphaAccess().getValueALL_ALPHATerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getChapterAlphaRule());
                      						}
                      						addWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.xixum.nlx.naturalLang.ALL_ALPHA");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:5305:3: ( (lv_value_3_0= RULE_DOT ) )
            // InternalNaturalLang.g:5306:4: (lv_value_3_0= RULE_DOT )
            {
            // InternalNaturalLang.g:5306:4: (lv_value_3_0= RULE_DOT )
            // InternalNaturalLang.g:5307:5: lv_value_3_0= RULE_DOT
            {
            lv_value_3_0=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_value_3_0, grammarAccess.getChapterAlphaAccess().getValueDOTTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getChapterAlphaRule());
              					}
              					addWithLastConsumed(
              						current,
              						"value",
              						lv_value_3_0,
              						"org.xixum.nlx.naturalLang.DOT");
              				
            }

            }


            }

            // InternalNaturalLang.g:5323:3: ( (lv_value_4_0= ruleChapterIntermediate ) )
            // InternalNaturalLang.g:5324:4: (lv_value_4_0= ruleChapterIntermediate )
            {
            // InternalNaturalLang.g:5324:4: (lv_value_4_0= ruleChapterIntermediate )
            // InternalNaturalLang.g:5325:5: lv_value_4_0= ruleChapterIntermediate
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getChapterAlphaAccess().getValueChapterIntermediateParserRuleCall_3_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_53);
            lv_value_4_0=ruleChapterIntermediate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getChapterAlphaRule());
              					}
              					add(
              						current,
              						"value",
              						lv_value_4_0,
              						"org.xixum.nlx.naturalLang.ChapterIntermediate");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:5342:3: ( ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) ) ( (lv_value_7_0= ruleChapterIntermediate ) ) )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==RULE_MINUS||LA114_0==RULE_DOT) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // InternalNaturalLang.g:5343:4: ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) ) ( (lv_value_7_0= ruleChapterIntermediate ) )
            	    {
            	    // InternalNaturalLang.g:5343:4: ( ( (lv_value_5_0= RULE_DOT ) ) | ( (lv_value_6_0= RULE_MINUS ) ) )
            	    int alt113=2;
            	    int LA113_0 = input.LA(1);

            	    if ( (LA113_0==RULE_DOT) ) {
            	        alt113=1;
            	    }
            	    else if ( (LA113_0==RULE_MINUS) ) {
            	        alt113=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 113, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt113) {
            	        case 1 :
            	            // InternalNaturalLang.g:5344:5: ( (lv_value_5_0= RULE_DOT ) )
            	            {
            	            // InternalNaturalLang.g:5344:5: ( (lv_value_5_0= RULE_DOT ) )
            	            // InternalNaturalLang.g:5345:6: (lv_value_5_0= RULE_DOT )
            	            {
            	            // InternalNaturalLang.g:5345:6: (lv_value_5_0= RULE_DOT )
            	            // InternalNaturalLang.g:5346:7: lv_value_5_0= RULE_DOT
            	            {
            	            lv_value_5_0=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_52); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_value_5_0, grammarAccess.getChapterAlphaAccess().getValueDOTTerminalRuleCall_4_0_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getChapterAlphaRule());
            	              							}
            	              							addWithLastConsumed(
            	              								current,
            	              								"value",
            	              								lv_value_5_0,
            	              								"org.xixum.nlx.naturalLang.DOT");
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalNaturalLang.g:5363:5: ( (lv_value_6_0= RULE_MINUS ) )
            	            {
            	            // InternalNaturalLang.g:5363:5: ( (lv_value_6_0= RULE_MINUS ) )
            	            // InternalNaturalLang.g:5364:6: (lv_value_6_0= RULE_MINUS )
            	            {
            	            // InternalNaturalLang.g:5364:6: (lv_value_6_0= RULE_MINUS )
            	            // InternalNaturalLang.g:5365:7: lv_value_6_0= RULE_MINUS
            	            {
            	            lv_value_6_0=(Token)match(input,RULE_MINUS,FollowSets000.FOLLOW_52); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_value_6_0, grammarAccess.getChapterAlphaAccess().getValueMINUSTerminalRuleCall_4_0_1_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getChapterAlphaRule());
            	              							}
            	              							addWithLastConsumed(
            	              								current,
            	              								"value",
            	              								lv_value_6_0,
            	              								"org.xixum.nlx.naturalLang.MINUS");
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // InternalNaturalLang.g:5382:4: ( (lv_value_7_0= ruleChapterIntermediate ) )
            	    // InternalNaturalLang.g:5383:5: (lv_value_7_0= ruleChapterIntermediate )
            	    {
            	    // InternalNaturalLang.g:5383:5: (lv_value_7_0= ruleChapterIntermediate )
            	    // InternalNaturalLang.g:5384:6: lv_value_7_0= ruleChapterIntermediate
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getChapterAlphaAccess().getValueChapterIntermediateParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_53);
            	    lv_value_7_0=ruleChapterIntermediate();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getChapterAlphaRule());
            	      						}
            	      						add(
            	      							current,
            	      							"value",
            	      							lv_value_7_0,
            	      							"org.xixum.nlx.naturalLang.ChapterIntermediate");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            this_SPACE_8=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_SPACE_8, grammarAccess.getChapterAlphaAccess().getSPACETerminalRuleCall_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleChapterAlpha"


    // $ANTLR start "entryRuleChapterIntermediate"
    // InternalNaturalLang.g:5413:1: entryRuleChapterIntermediate returns [String current=null] : iv_ruleChapterIntermediate= ruleChapterIntermediate EOF ;
    public final String entryRuleChapterIntermediate() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleChapterIntermediate = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5415:2: (iv_ruleChapterIntermediate= ruleChapterIntermediate EOF )
            // InternalNaturalLang.g:5416:2: iv_ruleChapterIntermediate= ruleChapterIntermediate EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getChapterIntermediateRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleChapterIntermediate=ruleChapterIntermediate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleChapterIntermediate.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleChapterIntermediate"


    // $ANTLR start "ruleChapterIntermediate"
    // InternalNaturalLang.g:5425:1: ruleChapterIntermediate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_C_0= RULE_ID_C | this_ID_ALL_1= RULE_ID_ALL | ( ( RULE_INT )=>this_INT_2= RULE_INT ) | this_IT_ID_3= RULE_IT_ID | this_ALL_ALPHA_4= RULE_ALL_ALPHA | this_ALPHA_5= RULE_ALPHA ) ;
    public final AntlrDatatypeRuleToken ruleChapterIntermediate() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_C_0=null;
        Token this_ID_ALL_1=null;
        Token this_INT_2=null;
        Token this_IT_ID_3=null;
        Token this_ALL_ALPHA_4=null;
        Token this_ALPHA_5=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5432:2: ( (this_ID_C_0= RULE_ID_C | this_ID_ALL_1= RULE_ID_ALL | ( ( RULE_INT )=>this_INT_2= RULE_INT ) | this_IT_ID_3= RULE_IT_ID | this_ALL_ALPHA_4= RULE_ALL_ALPHA | this_ALPHA_5= RULE_ALPHA ) )
            // InternalNaturalLang.g:5433:2: (this_ID_C_0= RULE_ID_C | this_ID_ALL_1= RULE_ID_ALL | ( ( RULE_INT )=>this_INT_2= RULE_INT ) | this_IT_ID_3= RULE_IT_ID | this_ALL_ALPHA_4= RULE_ALL_ALPHA | this_ALPHA_5= RULE_ALPHA )
            {
            // InternalNaturalLang.g:5433:2: (this_ID_C_0= RULE_ID_C | this_ID_ALL_1= RULE_ID_ALL | ( ( RULE_INT )=>this_INT_2= RULE_INT ) | this_IT_ID_3= RULE_IT_ID | this_ALL_ALPHA_4= RULE_ALL_ALPHA | this_ALPHA_5= RULE_ALPHA )
            int alt115=6;
            switch ( input.LA(1) ) {
            case RULE_ID_C:
                {
                alt115=1;
                }
                break;
            case RULE_ID_ALL:
                {
                alt115=2;
                }
                break;
            case RULE_INT:
                {
                alt115=3;
                }
                break;
            case RULE_IT_ID:
                {
                alt115=4;
                }
                break;
            case RULE_ALL_ALPHA:
                {
                alt115=5;
                }
                break;
            case RULE_ALPHA:
                {
                alt115=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // InternalNaturalLang.g:5434:3: this_ID_C_0= RULE_ID_C
                    {
                    this_ID_C_0=(Token)match(input,RULE_ID_C,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_C_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_C_0, grammarAccess.getChapterIntermediateAccess().getID_CTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:5442:3: this_ID_ALL_1= RULE_ID_ALL
                    {
                    this_ID_ALL_1=(Token)match(input,RULE_ID_ALL,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_ALL_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_ALL_1, grammarAccess.getChapterIntermediateAccess().getID_ALLTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:5450:3: ( ( RULE_INT )=>this_INT_2= RULE_INT )
                    {
                    // InternalNaturalLang.g:5450:3: ( ( RULE_INT )=>this_INT_2= RULE_INT )
                    // InternalNaturalLang.g:5451:4: ( RULE_INT )=>this_INT_2= RULE_INT
                    {
                    this_INT_2=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_INT_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_INT_2, grammarAccess.getChapterIntermediateAccess().getINTTerminalRuleCall_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:5461:3: this_IT_ID_3= RULE_IT_ID
                    {
                    this_IT_ID_3=(Token)match(input,RULE_IT_ID,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IT_ID_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IT_ID_3, grammarAccess.getChapterIntermediateAccess().getIT_IDTerminalRuleCall_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalNaturalLang.g:5469:3: this_ALL_ALPHA_4= RULE_ALL_ALPHA
                    {
                    this_ALL_ALPHA_4=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ALL_ALPHA_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ALL_ALPHA_4, grammarAccess.getChapterIntermediateAccess().getALL_ALPHATerminalRuleCall_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalNaturalLang.g:5477:3: this_ALPHA_5= RULE_ALPHA
                    {
                    this_ALPHA_5=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ALPHA_5);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ALPHA_5, grammarAccess.getChapterIntermediateAccess().getALPHATerminalRuleCall_5());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleChapterIntermediate"


    // $ANTLR start "entryRuleSymbolsX"
    // InternalNaturalLang.g:5491:1: entryRuleSymbolsX returns [EObject current=null] : iv_ruleSymbolsX= ruleSymbolsX EOF ;
    public final EObject entryRuleSymbolsX() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSymbolsX = null;


        try {
            // InternalNaturalLang.g:5491:49: (iv_ruleSymbolsX= ruleSymbolsX EOF )
            // InternalNaturalLang.g:5492:2: iv_ruleSymbolsX= ruleSymbolsX EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSymbolsXRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSymbolsX=ruleSymbolsX();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSymbolsX; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSymbolsX"


    // $ANTLR start "ruleSymbolsX"
    // InternalNaturalLang.g:5498:1: ruleSymbolsX returns [EObject current=null] : ( () ( (lv_symbol_1_0= ruleSpecialSymbols ) ) ) ;
    public final EObject ruleSymbolsX() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_symbol_1_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:5504:2: ( ( () ( (lv_symbol_1_0= ruleSpecialSymbols ) ) ) )
            // InternalNaturalLang.g:5505:2: ( () ( (lv_symbol_1_0= ruleSpecialSymbols ) ) )
            {
            // InternalNaturalLang.g:5505:2: ( () ( (lv_symbol_1_0= ruleSpecialSymbols ) ) )
            // InternalNaturalLang.g:5506:3: () ( (lv_symbol_1_0= ruleSpecialSymbols ) )
            {
            // InternalNaturalLang.g:5506:3: ()
            // InternalNaturalLang.g:5507:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSymbolsXAccess().getSymbolsAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5516:3: ( (lv_symbol_1_0= ruleSpecialSymbols ) )
            // InternalNaturalLang.g:5517:4: (lv_symbol_1_0= ruleSpecialSymbols )
            {
            // InternalNaturalLang.g:5517:4: (lv_symbol_1_0= ruleSpecialSymbols )
            // InternalNaturalLang.g:5518:5: lv_symbol_1_0= ruleSpecialSymbols
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSymbolsXAccess().getSymbolSpecialSymbolsParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_symbol_1_0=ruleSpecialSymbols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSymbolsXRule());
              					}
              					set(
              						current,
              						"symbol",
              						lv_symbol_1_0,
              						"org.xixum.nlx.naturalLang.SpecialSymbols");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSymbolsX"


    // $ANTLR start "entryRuleSpecialCh"
    // InternalNaturalLang.g:5539:1: entryRuleSpecialCh returns [String current=null] : iv_ruleSpecialCh= ruleSpecialCh EOF ;
    public final String entryRuleSpecialCh() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSpecialCh = null;


        try {
            // InternalNaturalLang.g:5539:49: (iv_ruleSpecialCh= ruleSpecialCh EOF )
            // InternalNaturalLang.g:5540:2: iv_ruleSpecialCh= ruleSpecialCh EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSpecialChRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSpecialCh=ruleSpecialCh();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSpecialCh.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSpecialCh"


    // $ANTLR start "ruleSpecialCh"
    // InternalNaturalLang.g:5546:1: ruleSpecialCh returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_PERCENT_0= RULE_PERCENT | this_DASH_1= RULE_DASH | this_MINUS_2= RULE_MINUS | this_SEPARATORS_3= RULE_SEPARATORS | this_MULTI_4= RULE_MULTI ) ;
    public final AntlrDatatypeRuleToken ruleSpecialCh() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_PERCENT_0=null;
        Token this_DASH_1=null;
        Token this_MINUS_2=null;
        Token this_SEPARATORS_3=null;
        Token this_MULTI_4=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:5552:2: ( (this_PERCENT_0= RULE_PERCENT | this_DASH_1= RULE_DASH | this_MINUS_2= RULE_MINUS | this_SEPARATORS_3= RULE_SEPARATORS | this_MULTI_4= RULE_MULTI ) )
            // InternalNaturalLang.g:5553:2: (this_PERCENT_0= RULE_PERCENT | this_DASH_1= RULE_DASH | this_MINUS_2= RULE_MINUS | this_SEPARATORS_3= RULE_SEPARATORS | this_MULTI_4= RULE_MULTI )
            {
            // InternalNaturalLang.g:5553:2: (this_PERCENT_0= RULE_PERCENT | this_DASH_1= RULE_DASH | this_MINUS_2= RULE_MINUS | this_SEPARATORS_3= RULE_SEPARATORS | this_MULTI_4= RULE_MULTI )
            int alt116=5;
            switch ( input.LA(1) ) {
            case RULE_PERCENT:
                {
                alt116=1;
                }
                break;
            case RULE_DASH:
                {
                alt116=2;
                }
                break;
            case RULE_MINUS:
                {
                alt116=3;
                }
                break;
            case RULE_SEPARATORS:
                {
                alt116=4;
                }
                break;
            case RULE_MULTI:
                {
                alt116=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // InternalNaturalLang.g:5554:3: this_PERCENT_0= RULE_PERCENT
                    {
                    this_PERCENT_0=(Token)match(input,RULE_PERCENT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_PERCENT_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_PERCENT_0, grammarAccess.getSpecialChAccess().getPERCENTTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:5562:3: this_DASH_1= RULE_DASH
                    {
                    this_DASH_1=(Token)match(input,RULE_DASH,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DASH_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DASH_1, grammarAccess.getSpecialChAccess().getDASHTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:5570:3: this_MINUS_2= RULE_MINUS
                    {
                    this_MINUS_2=(Token)match(input,RULE_MINUS,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_MINUS_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_MINUS_2, grammarAccess.getSpecialChAccess().getMINUSTerminalRuleCall_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:5578:3: this_SEPARATORS_3= RULE_SEPARATORS
                    {
                    this_SEPARATORS_3=(Token)match(input,RULE_SEPARATORS,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SEPARATORS_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SEPARATORS_3, grammarAccess.getSpecialChAccess().getSEPARATORSTerminalRuleCall_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalNaturalLang.g:5586:3: this_MULTI_4= RULE_MULTI
                    {
                    this_MULTI_4=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_MULTI_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_MULTI_4, grammarAccess.getSpecialChAccess().getMULTITerminalRuleCall_4());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSpecialCh"


    // $ANTLR start "entryRuleSymbols"
    // InternalNaturalLang.g:5597:1: entryRuleSymbols returns [EObject current=null] : iv_ruleSymbols= ruleSymbols EOF ;
    public final EObject entryRuleSymbols() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSymbols = null;


        try {
            // InternalNaturalLang.g:5597:48: (iv_ruleSymbols= ruleSymbols EOF )
            // InternalNaturalLang.g:5598:2: iv_ruleSymbols= ruleSymbols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSymbolsRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSymbols=ruleSymbols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSymbols; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSymbols"


    // $ANTLR start "ruleSymbols"
    // InternalNaturalLang.g:5604:1: ruleSymbols returns [EObject current=null] : ( () ( (lv_symbol_1_0= ruleSpecialCh ) ) ) ;
    public final EObject ruleSymbols() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_symbol_1_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:5610:2: ( ( () ( (lv_symbol_1_0= ruleSpecialCh ) ) ) )
            // InternalNaturalLang.g:5611:2: ( () ( (lv_symbol_1_0= ruleSpecialCh ) ) )
            {
            // InternalNaturalLang.g:5611:2: ( () ( (lv_symbol_1_0= ruleSpecialCh ) ) )
            // InternalNaturalLang.g:5612:3: () ( (lv_symbol_1_0= ruleSpecialCh ) )
            {
            // InternalNaturalLang.g:5612:3: ()
            // InternalNaturalLang.g:5613:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSymbolsAccess().getSymbolsAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5622:3: ( (lv_symbol_1_0= ruleSpecialCh ) )
            // InternalNaturalLang.g:5623:4: (lv_symbol_1_0= ruleSpecialCh )
            {
            // InternalNaturalLang.g:5623:4: (lv_symbol_1_0= ruleSpecialCh )
            // InternalNaturalLang.g:5624:5: lv_symbol_1_0= ruleSpecialCh
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSymbolsAccess().getSymbolSpecialChParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_symbol_1_0=ruleSpecialCh();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSymbolsRule());
              					}
              					set(
              						current,
              						"symbol",
              						lv_symbol_1_0,
              						"org.xixum.nlx.naturalLang.SpecialCh");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSymbols"


    // $ANTLR start "entryRuleShortcutGen"
    // InternalNaturalLang.g:5645:1: entryRuleShortcutGen returns [EObject current=null] : iv_ruleShortcutGen= ruleShortcutGen EOF ;
    public final EObject entryRuleShortcutGen() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShortcutGen = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5647:2: (iv_ruleShortcutGen= ruleShortcutGen EOF )
            // InternalNaturalLang.g:5648:2: iv_ruleShortcutGen= ruleShortcutGen EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShortcutGenRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleShortcutGen=ruleShortcutGen();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShortcutGen; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleShortcutGen"


    // $ANTLR start "ruleShortcutGen"
    // InternalNaturalLang.g:5657:1: ruleShortcutGen returns [EObject current=null] : ( () ( ( (lv_word_1_0= RULE_ALL_ALPHA ) ) | ( (lv_word_2_0= RULE_ALPHA ) ) ) ( ( (lv_word_3_0= RULE_DOT ) ) ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) ) )+ ( (lv_word_6_0= RULE_DOT ) ) ) ;
    public final EObject ruleShortcutGen() throws RecognitionException {
        EObject current = null;

        Token lv_word_1_0=null;
        Token lv_word_2_0=null;
        Token lv_word_3_0=null;
        Token lv_word_4_0=null;
        Token lv_word_5_0=null;
        Token lv_word_6_0=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5664:2: ( ( () ( ( (lv_word_1_0= RULE_ALL_ALPHA ) ) | ( (lv_word_2_0= RULE_ALPHA ) ) ) ( ( (lv_word_3_0= RULE_DOT ) ) ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) ) )+ ( (lv_word_6_0= RULE_DOT ) ) ) )
            // InternalNaturalLang.g:5665:2: ( () ( ( (lv_word_1_0= RULE_ALL_ALPHA ) ) | ( (lv_word_2_0= RULE_ALPHA ) ) ) ( ( (lv_word_3_0= RULE_DOT ) ) ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) ) )+ ( (lv_word_6_0= RULE_DOT ) ) )
            {
            // InternalNaturalLang.g:5665:2: ( () ( ( (lv_word_1_0= RULE_ALL_ALPHA ) ) | ( (lv_word_2_0= RULE_ALPHA ) ) ) ( ( (lv_word_3_0= RULE_DOT ) ) ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) ) )+ ( (lv_word_6_0= RULE_DOT ) ) )
            // InternalNaturalLang.g:5666:3: () ( ( (lv_word_1_0= RULE_ALL_ALPHA ) ) | ( (lv_word_2_0= RULE_ALPHA ) ) ) ( ( (lv_word_3_0= RULE_DOT ) ) ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) ) )+ ( (lv_word_6_0= RULE_DOT ) )
            {
            // InternalNaturalLang.g:5666:3: ()
            // InternalNaturalLang.g:5667:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getShortcutGenAccess().getEStringAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5676:3: ( ( (lv_word_1_0= RULE_ALL_ALPHA ) ) | ( (lv_word_2_0= RULE_ALPHA ) ) )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==RULE_ALL_ALPHA) ) {
                alt117=1;
            }
            else if ( (LA117_0==RULE_ALPHA) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // InternalNaturalLang.g:5677:4: ( (lv_word_1_0= RULE_ALL_ALPHA ) )
                    {
                    // InternalNaturalLang.g:5677:4: ( (lv_word_1_0= RULE_ALL_ALPHA ) )
                    // InternalNaturalLang.g:5678:5: (lv_word_1_0= RULE_ALL_ALPHA )
                    {
                    // InternalNaturalLang.g:5678:5: (lv_word_1_0= RULE_ALL_ALPHA )
                    // InternalNaturalLang.g:5679:6: lv_word_1_0= RULE_ALL_ALPHA
                    {
                    lv_word_1_0=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_word_1_0, grammarAccess.getShortcutGenAccess().getWordALL_ALPHATerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getShortcutGenRule());
                      						}
                      						addWithLastConsumed(
                      							current,
                      							"word",
                      							lv_word_1_0,
                      							"org.xixum.nlx.naturalLang.ALL_ALPHA");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:5696:4: ( (lv_word_2_0= RULE_ALPHA ) )
                    {
                    // InternalNaturalLang.g:5696:4: ( (lv_word_2_0= RULE_ALPHA ) )
                    // InternalNaturalLang.g:5697:5: (lv_word_2_0= RULE_ALPHA )
                    {
                    // InternalNaturalLang.g:5697:5: (lv_word_2_0= RULE_ALPHA )
                    // InternalNaturalLang.g:5698:6: lv_word_2_0= RULE_ALPHA
                    {
                    lv_word_2_0=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_word_2_0, grammarAccess.getShortcutGenAccess().getWordALPHATerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getShortcutGenRule());
                      						}
                      						addWithLastConsumed(
                      							current,
                      							"word",
                      							lv_word_2_0,
                      							"org.xixum.nlx.naturalLang.ALPHA");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:5715:3: ( ( (lv_word_3_0= RULE_DOT ) ) ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) ) )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==RULE_DOT) ) {
                    int LA119_1 = input.LA(2);

                    if ( (LA119_1==RULE_ALPHA||LA119_1==RULE_ALL_ALPHA) ) {
                        alt119=1;
                    }


                }


                switch (alt119) {
            	case 1 :
            	    // InternalNaturalLang.g:5716:4: ( (lv_word_3_0= RULE_DOT ) ) ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) )
            	    {
            	    // InternalNaturalLang.g:5716:4: ( (lv_word_3_0= RULE_DOT ) )
            	    // InternalNaturalLang.g:5717:5: (lv_word_3_0= RULE_DOT )
            	    {
            	    // InternalNaturalLang.g:5717:5: (lv_word_3_0= RULE_DOT )
            	    // InternalNaturalLang.g:5718:6: lv_word_3_0= RULE_DOT
            	    {
            	    lv_word_3_0=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_54); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_word_3_0, grammarAccess.getShortcutGenAccess().getWordDOTTerminalRuleCall_2_0_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getShortcutGenRule());
            	      						}
            	      						addWithLastConsumed(
            	      							current,
            	      							"word",
            	      							lv_word_3_0,
            	      							"org.xixum.nlx.naturalLang.DOT");
            	      					
            	    }

            	    }


            	    }

            	    // InternalNaturalLang.g:5734:4: ( ( (lv_word_4_0= RULE_ALL_ALPHA ) ) | ( (lv_word_5_0= RULE_ALPHA ) ) )
            	    int alt118=2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0==RULE_ALL_ALPHA) ) {
            	        alt118=1;
            	    }
            	    else if ( (LA118_0==RULE_ALPHA) ) {
            	        alt118=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 118, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt118) {
            	        case 1 :
            	            // InternalNaturalLang.g:5735:5: ( (lv_word_4_0= RULE_ALL_ALPHA ) )
            	            {
            	            // InternalNaturalLang.g:5735:5: ( (lv_word_4_0= RULE_ALL_ALPHA ) )
            	            // InternalNaturalLang.g:5736:6: (lv_word_4_0= RULE_ALL_ALPHA )
            	            {
            	            // InternalNaturalLang.g:5736:6: (lv_word_4_0= RULE_ALL_ALPHA )
            	            // InternalNaturalLang.g:5737:7: lv_word_4_0= RULE_ALL_ALPHA
            	            {
            	            lv_word_4_0=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_51); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_word_4_0, grammarAccess.getShortcutGenAccess().getWordALL_ALPHATerminalRuleCall_2_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getShortcutGenRule());
            	              							}
            	              							addWithLastConsumed(
            	              								current,
            	              								"word",
            	              								lv_word_4_0,
            	              								"org.xixum.nlx.naturalLang.ALL_ALPHA");
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalNaturalLang.g:5754:5: ( (lv_word_5_0= RULE_ALPHA ) )
            	            {
            	            // InternalNaturalLang.g:5754:5: ( (lv_word_5_0= RULE_ALPHA ) )
            	            // InternalNaturalLang.g:5755:6: (lv_word_5_0= RULE_ALPHA )
            	            {
            	            // InternalNaturalLang.g:5755:6: (lv_word_5_0= RULE_ALPHA )
            	            // InternalNaturalLang.g:5756:7: lv_word_5_0= RULE_ALPHA
            	            {
            	            lv_word_5_0=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_51); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_word_5_0, grammarAccess.getShortcutGenAccess().getWordALPHATerminalRuleCall_2_1_1_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getShortcutGenRule());
            	              							}
            	              							addWithLastConsumed(
            	              								current,
            	              								"word",
            	              								lv_word_5_0,
            	              								"org.xixum.nlx.naturalLang.ALPHA");
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);

            // InternalNaturalLang.g:5774:3: ( (lv_word_6_0= RULE_DOT ) )
            // InternalNaturalLang.g:5775:4: (lv_word_6_0= RULE_DOT )
            {
            // InternalNaturalLang.g:5775:4: (lv_word_6_0= RULE_DOT )
            // InternalNaturalLang.g:5776:5: lv_word_6_0= RULE_DOT
            {
            lv_word_6_0=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_word_6_0, grammarAccess.getShortcutGenAccess().getWordDOTTerminalRuleCall_3_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getShortcutGenRule());
              					}
              					addWithLastConsumed(
              						current,
              						"word",
              						lv_word_6_0,
              						"org.xixum.nlx.naturalLang.DOT");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleShortcutGen"


    // $ANTLR start "entryRuleShortcutLib"
    // InternalNaturalLang.g:5799:1: entryRuleShortcutLib returns [EObject current=null] : iv_ruleShortcutLib= ruleShortcutLib EOF ;
    public final EObject entryRuleShortcutLib() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShortcutLib = null;


        try {
            // InternalNaturalLang.g:5799:52: (iv_ruleShortcutLib= ruleShortcutLib EOF )
            // InternalNaturalLang.g:5800:2: iv_ruleShortcutLib= ruleShortcutLib EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShortcutLibRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleShortcutLib=ruleShortcutLib();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShortcutLib; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleShortcutLib"


    // $ANTLR start "ruleShortcutLib"
    // InternalNaturalLang.g:5806:1: ruleShortcutLib returns [EObject current=null] : ( () ( (lv_shortcut_1_0= RULE_SHORTCUTS ) ) ) ;
    public final EObject ruleShortcutLib() throws RecognitionException {
        EObject current = null;

        Token lv_shortcut_1_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:5812:2: ( ( () ( (lv_shortcut_1_0= RULE_SHORTCUTS ) ) ) )
            // InternalNaturalLang.g:5813:2: ( () ( (lv_shortcut_1_0= RULE_SHORTCUTS ) ) )
            {
            // InternalNaturalLang.g:5813:2: ( () ( (lv_shortcut_1_0= RULE_SHORTCUTS ) ) )
            // InternalNaturalLang.g:5814:3: () ( (lv_shortcut_1_0= RULE_SHORTCUTS ) )
            {
            // InternalNaturalLang.g:5814:3: ()
            // InternalNaturalLang.g:5815:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getShortcutLibAccess().getEStringAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:5824:3: ( (lv_shortcut_1_0= RULE_SHORTCUTS ) )
            // InternalNaturalLang.g:5825:4: (lv_shortcut_1_0= RULE_SHORTCUTS )
            {
            // InternalNaturalLang.g:5825:4: (lv_shortcut_1_0= RULE_SHORTCUTS )
            // InternalNaturalLang.g:5826:5: lv_shortcut_1_0= RULE_SHORTCUTS
            {
            lv_shortcut_1_0=(Token)match(input,RULE_SHORTCUTS,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_shortcut_1_0, grammarAccess.getShortcutLibAccess().getShortcutSHORTCUTSTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getShortcutLibRule());
              					}
              					setWithLastConsumed(
              						current,
              						"shortcut",
              						lv_shortcut_1_0,
              						"org.xixum.nlx.naturalLang.SHORTCUTS");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleShortcutLib"


    // $ANTLR start "entryRuleShortCut"
    // InternalNaturalLang.g:5846:1: entryRuleShortCut returns [EObject current=null] : iv_ruleShortCut= ruleShortCut EOF ;
    public final EObject entryRuleShortCut() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShortCut = null;


        try {
            // InternalNaturalLang.g:5846:49: (iv_ruleShortCut= ruleShortCut EOF )
            // InternalNaturalLang.g:5847:2: iv_ruleShortCut= ruleShortCut EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShortCutRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleShortCut=ruleShortCut();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShortCut; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleShortCut"


    // $ANTLR start "ruleShortCut"
    // InternalNaturalLang.g:5853:1: ruleShortCut returns [EObject current=null] : ( ( (lv_shortcut_0_0= ruleShortcutLib ) ) | ( (lv_shortcut_1_0= ruleShortcutGen ) ) ) ;
    public final EObject ruleShortCut() throws RecognitionException {
        EObject current = null;

        EObject lv_shortcut_0_0 = null;

        EObject lv_shortcut_1_0 = null;



        	enterRule();

        try {
            // InternalNaturalLang.g:5859:2: ( ( ( (lv_shortcut_0_0= ruleShortcutLib ) ) | ( (lv_shortcut_1_0= ruleShortcutGen ) ) ) )
            // InternalNaturalLang.g:5860:2: ( ( (lv_shortcut_0_0= ruleShortcutLib ) ) | ( (lv_shortcut_1_0= ruleShortcutGen ) ) )
            {
            // InternalNaturalLang.g:5860:2: ( ( (lv_shortcut_0_0= ruleShortcutLib ) ) | ( (lv_shortcut_1_0= ruleShortcutGen ) ) )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==RULE_SHORTCUTS) ) {
                alt120=1;
            }
            else if ( (LA120_0==RULE_ALPHA||LA120_0==RULE_ALL_ALPHA) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // InternalNaturalLang.g:5861:3: ( (lv_shortcut_0_0= ruleShortcutLib ) )
                    {
                    // InternalNaturalLang.g:5861:3: ( (lv_shortcut_0_0= ruleShortcutLib ) )
                    // InternalNaturalLang.g:5862:4: (lv_shortcut_0_0= ruleShortcutLib )
                    {
                    // InternalNaturalLang.g:5862:4: (lv_shortcut_0_0= ruleShortcutLib )
                    // InternalNaturalLang.g:5863:5: lv_shortcut_0_0= ruleShortcutLib
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getShortCutAccess().getShortcutShortcutLibParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    lv_shortcut_0_0=ruleShortcutLib();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getShortCutRule());
                      					}
                      					set(
                      						current,
                      						"shortcut",
                      						lv_shortcut_0_0,
                      						"org.xixum.nlx.naturalLang.ShortcutLib");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:5881:3: ( (lv_shortcut_1_0= ruleShortcutGen ) )
                    {
                    // InternalNaturalLang.g:5881:3: ( (lv_shortcut_1_0= ruleShortcutGen ) )
                    // InternalNaturalLang.g:5882:4: (lv_shortcut_1_0= ruleShortcutGen )
                    {
                    // InternalNaturalLang.g:5882:4: (lv_shortcut_1_0= ruleShortcutGen )
                    // InternalNaturalLang.g:5883:5: lv_shortcut_1_0= ruleShortcutGen
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getShortCutAccess().getShortcutShortcutGenParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    lv_shortcut_1_0=ruleShortcutGen();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getShortCutRule());
                      					}
                      					set(
                      						current,
                      						"shortcut",
                      						lv_shortcut_1_0,
                      						"org.xixum.nlx.naturalLang.ShortcutGen");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleShortCut"


    // $ANTLR start "entryRuleIgnoredText"
    // InternalNaturalLang.g:5904:1: entryRuleIgnoredText returns [EObject current=null] : iv_ruleIgnoredText= ruleIgnoredText EOF ;
    public final EObject entryRuleIgnoredText() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIgnoredText = null;


        try {
            // InternalNaturalLang.g:5904:52: (iv_ruleIgnoredText= ruleIgnoredText EOF )
            // InternalNaturalLang.g:5905:2: iv_ruleIgnoredText= ruleIgnoredText EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIgnoredTextRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleIgnoredText=ruleIgnoredText();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIgnoredText; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIgnoredText"


    // $ANTLR start "ruleIgnoredText"
    // InternalNaturalLang.g:5911:1: ruleIgnoredText returns [EObject current=null] : ( (lv_ignored_0_0= RULE_IGNORED ) ) ;
    public final EObject ruleIgnoredText() throws RecognitionException {
        EObject current = null;

        Token lv_ignored_0_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:5917:2: ( ( (lv_ignored_0_0= RULE_IGNORED ) ) )
            // InternalNaturalLang.g:5918:2: ( (lv_ignored_0_0= RULE_IGNORED ) )
            {
            // InternalNaturalLang.g:5918:2: ( (lv_ignored_0_0= RULE_IGNORED ) )
            // InternalNaturalLang.g:5919:3: (lv_ignored_0_0= RULE_IGNORED )
            {
            // InternalNaturalLang.g:5919:3: (lv_ignored_0_0= RULE_IGNORED )
            // InternalNaturalLang.g:5920:4: lv_ignored_0_0= RULE_IGNORED
            {
            lv_ignored_0_0=(Token)match(input,RULE_IGNORED,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_ignored_0_0, grammarAccess.getIgnoredTextAccess().getIgnoredIGNOREDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getIgnoredTextRule());
              				}
              				setWithLastConsumed(
              					current,
              					"ignored",
              					lv_ignored_0_0,
              					"org.xixum.nlx.naturalLang.IGNORED");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIgnoredText"


    // $ANTLR start "entryRulesimpleNum"
    // InternalNaturalLang.g:5939:1: entryRulesimpleNum returns [String current=null] : iv_rulesimpleNum= rulesimpleNum EOF ;
    public final String entryRulesimpleNum() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulesimpleNum = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5941:2: (iv_rulesimpleNum= rulesimpleNum EOF )
            // InternalNaturalLang.g:5942:2: iv_rulesimpleNum= rulesimpleNum EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleNumRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_rulesimpleNum=rulesimpleNum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulesimpleNum.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRulesimpleNum"


    // $ANTLR start "rulesimpleNum"
    // InternalNaturalLang.g:5951:1: rulesimpleNum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_INT_0= RULE_INT ;
    public final AntlrDatatypeRuleToken rulesimpleNum() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5958:2: (this_INT_0= RULE_INT )
            // InternalNaturalLang.g:5959:2: this_INT_0= RULE_INT
            {
            this_INT_0=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_INT_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_INT_0, grammarAccess.getSimpleNumAccess().getINTTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "rulesimpleNum"


    // $ANTLR start "entryRuleItNum"
    // InternalNaturalLang.g:5972:1: entryRuleItNum returns [String current=null] : iv_ruleItNum= ruleItNum EOF ;
    public final String entryRuleItNum() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleItNum = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5974:2: (iv_ruleItNum= ruleItNum EOF )
            // InternalNaturalLang.g:5975:2: iv_ruleItNum= ruleItNum EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getItNumRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleItNum=ruleItNum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleItNum.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleItNum"


    // $ANTLR start "ruleItNum"
    // InternalNaturalLang.g:5984:1: ruleItNum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT ( (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH ) this_INT_6= RULE_INT )+ (this_KM_7= RULE_KM this_INT_8= RULE_INT )? ) ;
    public final AntlrDatatypeRuleToken ruleItNum() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token this_SEPARATORS_IT_1=null;
        Token this_COLON_2=null;
        Token this_DASH_3=null;
        Token this_MINUS_4=null;
        Token this_SLASH_5=null;
        Token this_INT_6=null;
        Token this_KM_7=null;
        Token this_INT_8=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:5991:2: ( (this_INT_0= RULE_INT ( (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH ) this_INT_6= RULE_INT )+ (this_KM_7= RULE_KM this_INT_8= RULE_INT )? ) )
            // InternalNaturalLang.g:5992:2: (this_INT_0= RULE_INT ( (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH ) this_INT_6= RULE_INT )+ (this_KM_7= RULE_KM this_INT_8= RULE_INT )? )
            {
            // InternalNaturalLang.g:5992:2: (this_INT_0= RULE_INT ( (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH ) this_INT_6= RULE_INT )+ (this_KM_7= RULE_KM this_INT_8= RULE_INT )? )
            // InternalNaturalLang.g:5993:3: this_INT_0= RULE_INT ( (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH ) this_INT_6= RULE_INT )+ (this_KM_7= RULE_KM this_INT_8= RULE_INT )?
            {
            this_INT_0=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_INT_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_INT_0, grammarAccess.getItNumAccess().getINTTerminalRuleCall_0());
              		
            }
            // InternalNaturalLang.g:6000:3: ( (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH ) this_INT_6= RULE_INT )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0>=RULE_DASH && LA122_0<=RULE_MINUS)||LA122_0==RULE_COLON||LA122_0==RULE_SLASH||LA122_0==RULE_SEPARATORS_IT) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // InternalNaturalLang.g:6001:4: (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH ) this_INT_6= RULE_INT
            	    {
            	    // InternalNaturalLang.g:6001:4: (this_SEPARATORS_IT_1= RULE_SEPARATORS_IT | this_COLON_2= RULE_COLON | this_DASH_3= RULE_DASH | this_MINUS_4= RULE_MINUS | this_SLASH_5= RULE_SLASH )
            	    int alt121=5;
            	    switch ( input.LA(1) ) {
            	    case RULE_SEPARATORS_IT:
            	        {
            	        alt121=1;
            	        }
            	        break;
            	    case RULE_COLON:
            	        {
            	        alt121=2;
            	        }
            	        break;
            	    case RULE_DASH:
            	        {
            	        alt121=3;
            	        }
            	        break;
            	    case RULE_MINUS:
            	        {
            	        alt121=4;
            	        }
            	        break;
            	    case RULE_SLASH:
            	        {
            	        alt121=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 121, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt121) {
            	        case 1 :
            	            // InternalNaturalLang.g:6002:5: this_SEPARATORS_IT_1= RULE_SEPARATORS_IT
            	            {
            	            this_SEPARATORS_IT_1=(Token)match(input,RULE_SEPARATORS_IT,FollowSets000.FOLLOW_56); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(this_SEPARATORS_IT_1);
            	              				
            	            }
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(this_SEPARATORS_IT_1, grammarAccess.getItNumAccess().getSEPARATORS_ITTerminalRuleCall_1_0_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalNaturalLang.g:6010:5: this_COLON_2= RULE_COLON
            	            {
            	            this_COLON_2=(Token)match(input,RULE_COLON,FollowSets000.FOLLOW_56); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(this_COLON_2);
            	              				
            	            }
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(this_COLON_2, grammarAccess.getItNumAccess().getCOLONTerminalRuleCall_1_0_1());
            	              				
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalNaturalLang.g:6018:5: this_DASH_3= RULE_DASH
            	            {
            	            this_DASH_3=(Token)match(input,RULE_DASH,FollowSets000.FOLLOW_56); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(this_DASH_3);
            	              				
            	            }
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(this_DASH_3, grammarAccess.getItNumAccess().getDASHTerminalRuleCall_1_0_2());
            	              				
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // InternalNaturalLang.g:6026:5: this_MINUS_4= RULE_MINUS
            	            {
            	            this_MINUS_4=(Token)match(input,RULE_MINUS,FollowSets000.FOLLOW_56); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(this_MINUS_4);
            	              				
            	            }
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(this_MINUS_4, grammarAccess.getItNumAccess().getMINUSTerminalRuleCall_1_0_3());
            	              				
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // InternalNaturalLang.g:6034:5: this_SLASH_5= RULE_SLASH
            	            {
            	            this_SLASH_5=(Token)match(input,RULE_SLASH,FollowSets000.FOLLOW_56); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(this_SLASH_5);
            	              				
            	            }
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(this_SLASH_5, grammarAccess.getItNumAccess().getSLASHTerminalRuleCall_1_0_4());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    this_INT_6=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_57); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_INT_6);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_INT_6, grammarAccess.getItNumAccess().getINTTerminalRuleCall_1_1());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);

            // InternalNaturalLang.g:6050:3: (this_KM_7= RULE_KM this_INT_8= RULE_INT )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==RULE_KM) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // InternalNaturalLang.g:6051:4: this_KM_7= RULE_KM this_INT_8= RULE_INT
                    {
                    this_KM_7=(Token)match(input,RULE_KM,FollowSets000.FOLLOW_56); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_KM_7);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_KM_7, grammarAccess.getItNumAccess().getKMTerminalRuleCall_2_0());
                      			
                    }
                    this_INT_8=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_INT_8);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_INT_8, grammarAccess.getItNumAccess().getINTTerminalRuleCall_2_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleItNum"


    // $ANTLR start "entryRuleSpecialSymbols"
    // InternalNaturalLang.g:6073:1: entryRuleSpecialSymbols returns [String current=null] : iv_ruleSpecialSymbols= ruleSpecialSymbols EOF ;
    public final String entryRuleSpecialSymbols() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSpecialSymbols = null;


        try {
            // InternalNaturalLang.g:6073:54: (iv_ruleSpecialSymbols= ruleSpecialSymbols EOF )
            // InternalNaturalLang.g:6074:2: iv_ruleSpecialSymbols= ruleSpecialSymbols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSpecialSymbolsRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleSpecialSymbols=ruleSpecialSymbols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSpecialSymbols.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSpecialSymbols"


    // $ANTLR start "ruleSpecialSymbols"
    // InternalNaturalLang.g:6080:1: ruleSpecialSymbols returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SLASH_0= RULE_SLASH | this_OPERATORS_1= RULE_OPERATORS | this_ARROW_2= RULE_ARROW | this_SMILEY_3= RULE_SMILEY | this_TRIPLE_DOT_4= RULE_TRIPLE_DOT ) ;
    public final AntlrDatatypeRuleToken ruleSpecialSymbols() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_SLASH_0=null;
        Token this_OPERATORS_1=null;
        Token this_ARROW_2=null;
        Token this_SMILEY_3=null;
        Token this_TRIPLE_DOT_4=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:6086:2: ( (this_SLASH_0= RULE_SLASH | this_OPERATORS_1= RULE_OPERATORS | this_ARROW_2= RULE_ARROW | this_SMILEY_3= RULE_SMILEY | this_TRIPLE_DOT_4= RULE_TRIPLE_DOT ) )
            // InternalNaturalLang.g:6087:2: (this_SLASH_0= RULE_SLASH | this_OPERATORS_1= RULE_OPERATORS | this_ARROW_2= RULE_ARROW | this_SMILEY_3= RULE_SMILEY | this_TRIPLE_DOT_4= RULE_TRIPLE_DOT )
            {
            // InternalNaturalLang.g:6087:2: (this_SLASH_0= RULE_SLASH | this_OPERATORS_1= RULE_OPERATORS | this_ARROW_2= RULE_ARROW | this_SMILEY_3= RULE_SMILEY | this_TRIPLE_DOT_4= RULE_TRIPLE_DOT )
            int alt124=5;
            switch ( input.LA(1) ) {
            case RULE_SLASH:
                {
                alt124=1;
                }
                break;
            case RULE_OPERATORS:
                {
                alt124=2;
                }
                break;
            case RULE_ARROW:
                {
                alt124=3;
                }
                break;
            case RULE_SMILEY:
                {
                alt124=4;
                }
                break;
            case RULE_TRIPLE_DOT:
                {
                alt124=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }

            switch (alt124) {
                case 1 :
                    // InternalNaturalLang.g:6088:3: this_SLASH_0= RULE_SLASH
                    {
                    this_SLASH_0=(Token)match(input,RULE_SLASH,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SLASH_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SLASH_0, grammarAccess.getSpecialSymbolsAccess().getSLASHTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:6096:3: this_OPERATORS_1= RULE_OPERATORS
                    {
                    this_OPERATORS_1=(Token)match(input,RULE_OPERATORS,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_OPERATORS_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_OPERATORS_1, grammarAccess.getSpecialSymbolsAccess().getOPERATORSTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:6104:3: this_ARROW_2= RULE_ARROW
                    {
                    this_ARROW_2=(Token)match(input,RULE_ARROW,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ARROW_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ARROW_2, grammarAccess.getSpecialSymbolsAccess().getARROWTerminalRuleCall_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalNaturalLang.g:6112:3: this_SMILEY_3= RULE_SMILEY
                    {
                    this_SMILEY_3=(Token)match(input,RULE_SMILEY,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SMILEY_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SMILEY_3, grammarAccess.getSpecialSymbolsAccess().getSMILEYTerminalRuleCall_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalNaturalLang.g:6120:3: this_TRIPLE_DOT_4= RULE_TRIPLE_DOT
                    {
                    this_TRIPLE_DOT_4=(Token)match(input,RULE_TRIPLE_DOT,FollowSets000.FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TRIPLE_DOT_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_TRIPLE_DOT_4, grammarAccess.getSpecialSymbolsAccess().getTRIPLE_DOTTerminalRuleCall_4());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSpecialSymbols"


    // $ANTLR start "entryRuledecimalNumEN"
    // InternalNaturalLang.g:6131:1: entryRuledecimalNumEN returns [String current=null] : iv_ruledecimalNumEN= ruledecimalNumEN EOF ;
    public final String entryRuledecimalNumEN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruledecimalNumEN = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6133:2: (iv_ruledecimalNumEN= ruledecimalNumEN EOF )
            // InternalNaturalLang.g:6134:2: iv_ruledecimalNumEN= ruledecimalNumEN EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDecimalNumENRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruledecimalNumEN=ruledecimalNumEN();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruledecimalNumEN.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuledecimalNumEN"


    // $ANTLR start "ruledecimalNumEN"
    // InternalNaturalLang.g:6143:1: ruledecimalNumEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT this_DOT_1= RULE_DOT this_INT_2= RULE_INT ) ;
    public final AntlrDatatypeRuleToken ruledecimalNumEN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token this_DOT_1=null;
        Token this_INT_2=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6150:2: ( (this_INT_0= RULE_INT this_DOT_1= RULE_DOT this_INT_2= RULE_INT ) )
            // InternalNaturalLang.g:6151:2: (this_INT_0= RULE_INT this_DOT_1= RULE_DOT this_INT_2= RULE_INT )
            {
            // InternalNaturalLang.g:6151:2: (this_INT_0= RULE_INT this_DOT_1= RULE_DOT this_INT_2= RULE_INT )
            // InternalNaturalLang.g:6152:3: this_INT_0= RULE_INT this_DOT_1= RULE_DOT this_INT_2= RULE_INT
            {
            this_INT_0=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_51); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_INT_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_INT_0, grammarAccess.getDecimalNumENAccess().getINTTerminalRuleCall_0());
              		
            }
            this_DOT_1=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_DOT_1);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_DOT_1, grammarAccess.getDecimalNumENAccess().getDOTTerminalRuleCall_1());
              		
            }
            this_INT_2=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_INT_2);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_INT_2, grammarAccess.getDecimalNumENAccess().getINTTerminalRuleCall_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruledecimalNumEN"


    // $ANTLR start "entryRuledecimalNumDE"
    // InternalNaturalLang.g:6180:1: entryRuledecimalNumDE returns [String current=null] : iv_ruledecimalNumDE= ruledecimalNumDE EOF ;
    public final String entryRuledecimalNumDE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruledecimalNumDE = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6182:2: (iv_ruledecimalNumDE= ruledecimalNumDE EOF )
            // InternalNaturalLang.g:6183:2: iv_ruledecimalNumDE= ruledecimalNumDE EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDecimalNumDERule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruledecimalNumDE=ruledecimalNumDE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruledecimalNumDE.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuledecimalNumDE"


    // $ANTLR start "ruledecimalNumDE"
    // InternalNaturalLang.g:6192:1: ruledecimalNumDE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT this_KM_1= RULE_KM this_INT_2= RULE_INT ) ;
    public final AntlrDatatypeRuleToken ruledecimalNumDE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token this_KM_1=null;
        Token this_INT_2=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6199:2: ( (this_INT_0= RULE_INT this_KM_1= RULE_KM this_INT_2= RULE_INT ) )
            // InternalNaturalLang.g:6200:2: (this_INT_0= RULE_INT this_KM_1= RULE_KM this_INT_2= RULE_INT )
            {
            // InternalNaturalLang.g:6200:2: (this_INT_0= RULE_INT this_KM_1= RULE_KM this_INT_2= RULE_INT )
            // InternalNaturalLang.g:6201:3: this_INT_0= RULE_INT this_KM_1= RULE_KM this_INT_2= RULE_INT
            {
            this_INT_0=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_INT_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_INT_0, grammarAccess.getDecimalNumDEAccess().getINTTerminalRuleCall_0());
              		
            }
            this_KM_1=(Token)match(input,RULE_KM,FollowSets000.FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_KM_1);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_KM_1, grammarAccess.getDecimalNumDEAccess().getKMTerminalRuleCall_1());
              		
            }
            this_INT_2=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_INT_2);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_INT_2, grammarAccess.getDecimalNumDEAccess().getINTTerminalRuleCall_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruledecimalNumDE"


    // $ANTLR start "entryRulechapterNum"
    // InternalNaturalLang.g:6229:1: entryRulechapterNum returns [String current=null] : iv_rulechapterNum= rulechapterNum EOF ;
    public final String entryRulechapterNum() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulechapterNum = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6231:2: (iv_rulechapterNum= rulechapterNum EOF )
            // InternalNaturalLang.g:6232:2: iv_rulechapterNum= rulechapterNum EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getChapterNumRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_rulechapterNum=rulechapterNum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulechapterNum.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRulechapterNum"


    // $ANTLR start "rulechapterNum"
    // InternalNaturalLang.g:6241:1: rulechapterNum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )+ ) ;
    public final AntlrDatatypeRuleToken rulechapterNum() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token this_DOT_1=null;
        AntlrDatatypeRuleToken this_ChapterIntermediate_2 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6248:2: ( (this_INT_0= RULE_INT (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )+ ) )
            // InternalNaturalLang.g:6249:2: (this_INT_0= RULE_INT (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )+ )
            {
            // InternalNaturalLang.g:6249:2: (this_INT_0= RULE_INT (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )+ )
            // InternalNaturalLang.g:6250:3: this_INT_0= RULE_INT (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )+
            {
            this_INT_0=(Token)match(input,RULE_INT,FollowSets000.FOLLOW_51); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_INT_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_INT_0, grammarAccess.getChapterNumAccess().getINTTerminalRuleCall_0());
              		
            }
            // InternalNaturalLang.g:6257:3: (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                alt125 = dfa125.predict(input);
                switch (alt125) {
            	case 1 :
            	    // InternalNaturalLang.g:6258:4: this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate
            	    {
            	    this_DOT_1=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_52); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_DOT_1);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_DOT_1, grammarAccess.getChapterNumAccess().getDOTTerminalRuleCall_1_0());
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getChapterNumAccess().getChapterIntermediateParserRuleCall_1_1());
            	      			
            	    }
            	    pushFollow(FollowSets000.FOLLOW_59);
            	    this_ChapterIntermediate_2=ruleChapterIntermediate();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_ChapterIntermediate_2);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "rulechapterNum"


    // $ANTLR start "entryRuleNumber"
    // InternalNaturalLang.g:6283:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6285:2: (iv_ruleNumber= ruleNumber EOF )
            // InternalNaturalLang.g:6286:2: iv_ruleNumber= ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumberRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleNumber=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumber.getText(); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalNaturalLang.g:6295:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_simpleNum_0= rulesimpleNum | this_decimalNumEN_1= ruledecimalNumEN | this_decimalNumDE_2= ruledecimalNumDE ) ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_simpleNum_0 = null;

        AntlrDatatypeRuleToken this_decimalNumEN_1 = null;

        AntlrDatatypeRuleToken this_decimalNumDE_2 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6302:2: ( (this_simpleNum_0= rulesimpleNum | this_decimalNumEN_1= ruledecimalNumEN | this_decimalNumDE_2= ruledecimalNumDE ) )
            // InternalNaturalLang.g:6303:2: (this_simpleNum_0= rulesimpleNum | this_decimalNumEN_1= ruledecimalNumEN | this_decimalNumDE_2= ruledecimalNumDE )
            {
            // InternalNaturalLang.g:6303:2: (this_simpleNum_0= rulesimpleNum | this_decimalNumEN_1= ruledecimalNumEN | this_decimalNumDE_2= ruledecimalNumDE )
            int alt126=3;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==RULE_INT) ) {
                switch ( input.LA(2) ) {
                case RULE_KM:
                    {
                    alt126=3;
                    }
                    break;
                case RULE_DOT:
                    {
                    int LA126_3 = input.LA(3);

                    if ( (LA126_3==RULE_INT) ) {
                        alt126=2;
                    }
                    else if ( (LA126_3==RULE_NEWLINE||LA126_3==RULE_BR_CL||LA126_3==RULE_SPACE||LA126_3==RULE_EXBR_CL||LA126_3==RULE_EXBRC_CL) ) {
                        alt126=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_NEWLINE:
                case RULE_END:
                case RULE_BR_CL:
                case RULE_TABLE_LINE:
                case RULE_HORIZ_SEP:
                case RULE_FULL_STOP_IM:
                case RULE_FULL_STOP_NL:
                case RULE_KOMMA:
                case RULE_SPACE:
                case RULE_FS:
                case RULE_EXBR_CL:
                case RULE_EXBRC_CL:
                case RULE_ID:
                case RULE_CURRENCY:
                case RULE_PERCENT:
                    {
                    alt126=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    // InternalNaturalLang.g:6304:3: this_simpleNum_0= rulesimpleNum
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumberAccess().getSimpleNumParserRuleCall_0());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_simpleNum_0=rulesimpleNum();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_simpleNum_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:6315:3: this_decimalNumEN_1= ruledecimalNumEN
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumberAccess().getDecimalNumENParserRuleCall_1());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_decimalNumEN_1=ruledecimalNumEN();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_decimalNumEN_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalNaturalLang.g:6326:3: this_decimalNumDE_2= ruledecimalNumDE
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumberAccess().getDecimalNumDEParserRuleCall_2());
                      		
                    }
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_decimalNumDE_2=ruledecimalNumDE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_decimalNumDE_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleUrlAdress"
    // InternalNaturalLang.g:6343:1: entryRuleUrlAdress returns [EObject current=null] : iv_ruleUrlAdress= ruleUrlAdress EOF ;
    public final EObject entryRuleUrlAdress() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUrlAdress = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6345:2: (iv_ruleUrlAdress= ruleUrlAdress EOF )
            // InternalNaturalLang.g:6346:2: iv_ruleUrlAdress= ruleUrlAdress EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUrlAdressRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleUrlAdress=ruleUrlAdress();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUrlAdress; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleUrlAdress"


    // $ANTLR start "ruleUrlAdress"
    // InternalNaturalLang.g:6355:1: ruleUrlAdress returns [EObject current=null] : ( ( (lv_protocol_0_0= RULE_URL_PROTOCOL ) ) ( (lv_url_1_0= ruleItWordElurl ) ) ( ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) ) )* ( (lv_url_6_0= ruleAllSep ) )* ) ;
    public final EObject ruleUrlAdress() throws RecognitionException {
        EObject current = null;

        Token lv_protocol_0_0=null;
        AntlrDatatypeRuleToken lv_url_1_0 = null;

        AntlrDatatypeRuleToken lv_url_2_0 = null;

        AntlrDatatypeRuleToken lv_url_3_0 = null;

        AntlrDatatypeRuleToken lv_url_4_0 = null;

        AntlrDatatypeRuleToken lv_url_5_0 = null;

        AntlrDatatypeRuleToken lv_url_6_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6362:2: ( ( ( (lv_protocol_0_0= RULE_URL_PROTOCOL ) ) ( (lv_url_1_0= ruleItWordElurl ) ) ( ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) ) )* ( (lv_url_6_0= ruleAllSep ) )* ) )
            // InternalNaturalLang.g:6363:2: ( ( (lv_protocol_0_0= RULE_URL_PROTOCOL ) ) ( (lv_url_1_0= ruleItWordElurl ) ) ( ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) ) )* ( (lv_url_6_0= ruleAllSep ) )* )
            {
            // InternalNaturalLang.g:6363:2: ( ( (lv_protocol_0_0= RULE_URL_PROTOCOL ) ) ( (lv_url_1_0= ruleItWordElurl ) ) ( ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) ) )* ( (lv_url_6_0= ruleAllSep ) )* )
            // InternalNaturalLang.g:6364:3: ( (lv_protocol_0_0= RULE_URL_PROTOCOL ) ) ( (lv_url_1_0= ruleItWordElurl ) ) ( ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) ) )* ( (lv_url_6_0= ruleAllSep ) )*
            {
            // InternalNaturalLang.g:6364:3: ( (lv_protocol_0_0= RULE_URL_PROTOCOL ) )
            // InternalNaturalLang.g:6365:4: (lv_protocol_0_0= RULE_URL_PROTOCOL )
            {
            // InternalNaturalLang.g:6365:4: (lv_protocol_0_0= RULE_URL_PROTOCOL )
            // InternalNaturalLang.g:6366:5: lv_protocol_0_0= RULE_URL_PROTOCOL
            {
            lv_protocol_0_0=(Token)match(input,RULE_URL_PROTOCOL,FollowSets000.FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_protocol_0_0, grammarAccess.getUrlAdressAccess().getProtocolURL_PROTOCOLTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getUrlAdressRule());
              					}
              					setWithLastConsumed(
              						current,
              						"protocol",
              						lv_protocol_0_0,
              						"org.xixum.nlx.naturalLang.URL_PROTOCOL");
              				
            }

            }


            }

            // InternalNaturalLang.g:6382:3: ( (lv_url_1_0= ruleItWordElurl ) )
            // InternalNaturalLang.g:6383:4: (lv_url_1_0= ruleItWordElurl )
            {
            // InternalNaturalLang.g:6383:4: (lv_url_1_0= ruleItWordElurl )
            // InternalNaturalLang.g:6384:5: lv_url_1_0= ruleItWordElurl
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlItWordElurlParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_43);
            lv_url_1_0=ruleItWordElurl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUrlAdressRule());
              					}
              					add(
              						current,
              						"url",
              						lv_url_1_0,
              						"org.xixum.nlx.naturalLang.ItWordElurl");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:6401:3: ( ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) ) )*
            loop129:
            do {
                int alt129=2;
                alt129 = dfa129.predict(input);
                switch (alt129) {
            	case 1 :
            	    // InternalNaturalLang.g:6402:4: ( (lv_url_2_0= ruleAllSep ) )+ ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) )
            	    {
            	    // InternalNaturalLang.g:6402:4: ( (lv_url_2_0= ruleAllSep ) )+
            	    int cnt127=0;
            	    loop127:
            	    do {
            	        int alt127=2;
            	        int LA127_0 = input.LA(1);

            	        if ( ((LA127_0>=RULE_DASH && LA127_0<=RULE_MINUS)||LA127_0==RULE_DOT||LA127_0==RULE_COLON||(LA127_0>=RULE_SLASH && LA127_0<=RULE_SEPARATORS_IT)) ) {
            	            alt127=1;
            	        }


            	        switch (alt127) {
            	    	case 1 :
            	    	    // InternalNaturalLang.g:6403:5: (lv_url_2_0= ruleAllSep )
            	    	    {
            	    	    // InternalNaturalLang.g:6403:5: (lv_url_2_0= ruleAllSep )
            	    	    // InternalNaturalLang.g:6404:6: lv_url_2_0= ruleAllSep
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      						newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlAllSepParserRuleCall_2_0_0());
            	    	      					
            	    	    }
            	    	    pushFollow(FollowSets000.FOLLOW_45);
            	    	    lv_url_2_0=ruleAllSep();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      						if (current==null) {
            	    	      							current = createModelElementForParent(grammarAccess.getUrlAdressRule());
            	    	      						}
            	    	      						add(
            	    	      							current,
            	    	      							"url",
            	    	      							lv_url_2_0,
            	    	      							"org.xixum.nlx.naturalLang.AllSep");
            	    	      						afterParserOrEnumRuleCall();
            	    	      					
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt127 >= 1 ) break loop127;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(127, input);
            	                throw eee;
            	        }
            	        cnt127++;
            	    } while (true);

            	    // InternalNaturalLang.g:6421:4: ( ( (lv_url_3_0= ruleItWordElXx ) ) | ( (lv_url_4_0= rulesimpleNum ) ) | ( (lv_url_5_0= ruleFragment ) ) )
            	    int alt128=3;
            	    switch ( input.LA(1) ) {
            	    case RULE_ALL_ALPHA:
            	        {
            	        int LA128_1 = input.LA(2);

            	        if ( (synpred208_InternalNaturalLang()) ) {
            	            alt128=1;
            	        }
            	        else if ( (true) ) {
            	            alt128=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return current;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 128, 1, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case RULE_ALPHA:
            	        {
            	        int LA128_2 = input.LA(2);

            	        if ( (synpred208_InternalNaturalLang()) ) {
            	            alt128=1;
            	        }
            	        else if ( (true) ) {
            	            alt128=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return current;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 128, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case RULE_MULTI:
            	    case RULE_CURL:
            	    case RULE_IT_ID:
            	    case RULE_DOUBLE_DOT:
            	    case RULE_ID_ALL:
            	    case RULE_HEX_NUMBER:
            	        {
            	        alt128=1;
            	        }
            	        break;
            	    case RULE_INT:
            	        {
            	        int LA128_4 = input.LA(2);

            	        if ( (synpred208_InternalNaturalLang()) ) {
            	            alt128=1;
            	        }
            	        else if ( (synpred209_InternalNaturalLang()) ) {
            	            alt128=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return current;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 128, 4, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case RULE_ID:
            	        {
            	        int LA128_5 = input.LA(2);

            	        if ( (synpred208_InternalNaturalLang()) ) {
            	            alt128=1;
            	        }
            	        else if ( (true) ) {
            	            alt128=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return current;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 128, 5, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case RULE_ID_C:
            	        {
            	        int LA128_6 = input.LA(2);

            	        if ( (synpred208_InternalNaturalLang()) ) {
            	            alt128=1;
            	        }
            	        else if ( (true) ) {
            	            alt128=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return current;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 128, 6, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 128, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt128) {
            	        case 1 :
            	            // InternalNaturalLang.g:6422:5: ( (lv_url_3_0= ruleItWordElXx ) )
            	            {
            	            // InternalNaturalLang.g:6422:5: ( (lv_url_3_0= ruleItWordElXx ) )
            	            // InternalNaturalLang.g:6423:6: (lv_url_3_0= ruleItWordElXx )
            	            {
            	            // InternalNaturalLang.g:6423:6: (lv_url_3_0= ruleItWordElXx )
            	            // InternalNaturalLang.g:6424:7: lv_url_3_0= ruleItWordElXx
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlItWordElXxParserRuleCall_2_1_0_0());
            	              						
            	            }
            	            pushFollow(FollowSets000.FOLLOW_43);
            	            lv_url_3_0=ruleItWordElXx();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getUrlAdressRule());
            	              							}
            	              							add(
            	              								current,
            	              								"url",
            	              								lv_url_3_0,
            	              								"org.xixum.nlx.naturalLang.ItWordElXx");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalNaturalLang.g:6442:5: ( (lv_url_4_0= rulesimpleNum ) )
            	            {
            	            // InternalNaturalLang.g:6442:5: ( (lv_url_4_0= rulesimpleNum ) )
            	            // InternalNaturalLang.g:6443:6: (lv_url_4_0= rulesimpleNum )
            	            {
            	            // InternalNaturalLang.g:6443:6: (lv_url_4_0= rulesimpleNum )
            	            // InternalNaturalLang.g:6444:7: lv_url_4_0= rulesimpleNum
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlSimpleNumParserRuleCall_2_1_1_0());
            	              						
            	            }
            	            pushFollow(FollowSets000.FOLLOW_43);
            	            lv_url_4_0=rulesimpleNum();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getUrlAdressRule());
            	              							}
            	              							add(
            	              								current,
            	              								"url",
            	              								lv_url_4_0,
            	              								"org.xixum.nlx.naturalLang.simpleNum");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalNaturalLang.g:6462:5: ( (lv_url_5_0= ruleFragment ) )
            	            {
            	            // InternalNaturalLang.g:6462:5: ( (lv_url_5_0= ruleFragment ) )
            	            // InternalNaturalLang.g:6463:6: (lv_url_5_0= ruleFragment )
            	            {
            	            // InternalNaturalLang.g:6463:6: (lv_url_5_0= ruleFragment )
            	            // InternalNaturalLang.g:6464:7: lv_url_5_0= ruleFragment
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlFragmentParserRuleCall_2_1_2_0());
            	              						
            	            }
            	            pushFollow(FollowSets000.FOLLOW_43);
            	            lv_url_5_0=ruleFragment();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getUrlAdressRule());
            	              							}
            	              							add(
            	              								current,
            	              								"url",
            	              								lv_url_5_0,
            	              								"org.xixum.nlx.naturalLang.Fragment");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            // InternalNaturalLang.g:6483:3: ( (lv_url_6_0= ruleAllSep ) )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==RULE_DOT) ) {
                    int LA130_2 = input.LA(2);

                    if ( (synpred211_InternalNaturalLang()) ) {
                        alt130=1;
                    }


                }
                else if ( ((LA130_0>=RULE_DASH && LA130_0<=RULE_MINUS)||LA130_0==RULE_COLON||(LA130_0>=RULE_SLASH && LA130_0<=RULE_SEPARATORS_IT)) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // InternalNaturalLang.g:6484:4: (lv_url_6_0= ruleAllSep )
            	    {
            	    // InternalNaturalLang.g:6484:4: (lv_url_6_0= ruleAllSep )
            	    // InternalNaturalLang.g:6485:5: lv_url_6_0= ruleAllSep
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlAllSepParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FollowSets000.FOLLOW_43);
            	    lv_url_6_0=ruleAllSep();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getUrlAdressRule());
            	      					}
            	      					add(
            	      						current,
            	      						"url",
            	      						lv_url_6_0,
            	      						"org.xixum.nlx.naturalLang.AllSep");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleUrlAdress"


    // $ANTLR start "entryRuleEmailAT"
    // InternalNaturalLang.g:6509:1: entryRuleEmailAT returns [EObject current=null] : iv_ruleEmailAT= ruleEmailAT EOF ;
    public final EObject entryRuleEmailAT() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEmailAT = null;


        try {
            // InternalNaturalLang.g:6509:48: (iv_ruleEmailAT= ruleEmailAT EOF )
            // InternalNaturalLang.g:6510:2: iv_ruleEmailAT= ruleEmailAT EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmailATRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleEmailAT=ruleEmailAT();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmailAT; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEmailAT"


    // $ANTLR start "ruleEmailAT"
    // InternalNaturalLang.g:6516:1: ruleEmailAT returns [EObject current=null] : ( (lv_email_0_0= RULE_AT ) ) ;
    public final EObject ruleEmailAT() throws RecognitionException {
        EObject current = null;

        Token lv_email_0_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:6522:2: ( ( (lv_email_0_0= RULE_AT ) ) )
            // InternalNaturalLang.g:6523:2: ( (lv_email_0_0= RULE_AT ) )
            {
            // InternalNaturalLang.g:6523:2: ( (lv_email_0_0= RULE_AT ) )
            // InternalNaturalLang.g:6524:3: (lv_email_0_0= RULE_AT )
            {
            // InternalNaturalLang.g:6524:3: (lv_email_0_0= RULE_AT )
            // InternalNaturalLang.g:6525:4: lv_email_0_0= RULE_AT
            {
            lv_email_0_0=(Token)match(input,RULE_AT,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_email_0_0, grammarAccess.getEmailATAccess().getEmailATTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getEmailATRule());
              				}
              				addWithLastConsumed(
              					current,
              					"email",
              					lv_email_0_0,
              					"org.xixum.nlx.naturalLang.AT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEmailAT"


    // $ANTLR start "entryRuleMailAdress"
    // InternalNaturalLang.g:6544:1: entryRuleMailAdress returns [EObject current=null] : iv_ruleMailAdress= ruleMailAdress EOF ;
    public final EObject entryRuleMailAdress() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMailAdress = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6546:2: (iv_ruleMailAdress= ruleMailAdress EOF )
            // InternalNaturalLang.g:6547:2: iv_ruleMailAdress= ruleMailAdress EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMailAdressRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleMailAdress=ruleMailAdress();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMailAdress; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleMailAdress"


    // $ANTLR start "ruleMailAdress"
    // InternalNaturalLang.g:6556:1: ruleMailAdress returns [EObject current=null] : ( ( ( (lv_email_0_0= ruleItWord ) ) | ( (lv_email_1_0= ruleWord ) ) ) ( (lv_email_2_0= ruleEmailAT ) ) ( ( ( ruleItWord ) )=> (lv_email_3_0= ruleItWord ) ) ) ;
    public final EObject ruleMailAdress() throws RecognitionException {
        EObject current = null;

        EObject lv_email_0_0 = null;

        EObject lv_email_1_0 = null;

        EObject lv_email_2_0 = null;

        EObject lv_email_3_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6563:2: ( ( ( ( (lv_email_0_0= ruleItWord ) ) | ( (lv_email_1_0= ruleWord ) ) ) ( (lv_email_2_0= ruleEmailAT ) ) ( ( ( ruleItWord ) )=> (lv_email_3_0= ruleItWord ) ) ) )
            // InternalNaturalLang.g:6564:2: ( ( ( (lv_email_0_0= ruleItWord ) ) | ( (lv_email_1_0= ruleWord ) ) ) ( (lv_email_2_0= ruleEmailAT ) ) ( ( ( ruleItWord ) )=> (lv_email_3_0= ruleItWord ) ) )
            {
            // InternalNaturalLang.g:6564:2: ( ( ( (lv_email_0_0= ruleItWord ) ) | ( (lv_email_1_0= ruleWord ) ) ) ( (lv_email_2_0= ruleEmailAT ) ) ( ( ( ruleItWord ) )=> (lv_email_3_0= ruleItWord ) ) )
            // InternalNaturalLang.g:6565:3: ( ( (lv_email_0_0= ruleItWord ) ) | ( (lv_email_1_0= ruleWord ) ) ) ( (lv_email_2_0= ruleEmailAT ) ) ( ( ( ruleItWord ) )=> (lv_email_3_0= ruleItWord ) )
            {
            // InternalNaturalLang.g:6565:3: ( ( (lv_email_0_0= ruleItWord ) ) | ( (lv_email_1_0= ruleWord ) ) )
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // InternalNaturalLang.g:6566:4: ( (lv_email_0_0= ruleItWord ) )
                    {
                    // InternalNaturalLang.g:6566:4: ( (lv_email_0_0= ruleItWord ) )
                    // InternalNaturalLang.g:6567:5: (lv_email_0_0= ruleItWord )
                    {
                    // InternalNaturalLang.g:6567:5: (lv_email_0_0= ruleItWord )
                    // InternalNaturalLang.g:6568:6: lv_email_0_0= ruleItWord
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMailAdressAccess().getEmailItWordParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_61);
                    lv_email_0_0=ruleItWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMailAdressRule());
                      						}
                      						add(
                      							current,
                      							"email",
                      							lv_email_0_0,
                      							"org.xixum.nlx.naturalLang.ItWord");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:6586:4: ( (lv_email_1_0= ruleWord ) )
                    {
                    // InternalNaturalLang.g:6586:4: ( (lv_email_1_0= ruleWord ) )
                    // InternalNaturalLang.g:6587:5: (lv_email_1_0= ruleWord )
                    {
                    // InternalNaturalLang.g:6587:5: (lv_email_1_0= ruleWord )
                    // InternalNaturalLang.g:6588:6: lv_email_1_0= ruleWord
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMailAdressAccess().getEmailWordParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_61);
                    lv_email_1_0=ruleWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMailAdressRule());
                      						}
                      						add(
                      							current,
                      							"email",
                      							lv_email_1_0,
                      							"org.xixum.nlx.naturalLang.Word");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:6606:3: ( (lv_email_2_0= ruleEmailAT ) )
            // InternalNaturalLang.g:6607:4: (lv_email_2_0= ruleEmailAT )
            {
            // InternalNaturalLang.g:6607:4: (lv_email_2_0= ruleEmailAT )
            // InternalNaturalLang.g:6608:5: lv_email_2_0= ruleEmailAT
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMailAdressAccess().getEmailEmailATParserRuleCall_1_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_62);
            lv_email_2_0=ruleEmailAT();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMailAdressRule());
              					}
              					add(
              						current,
              						"email",
              						lv_email_2_0,
              						"org.xixum.nlx.naturalLang.EmailAT");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:6625:3: ( ( ( ruleItWord ) )=> (lv_email_3_0= ruleItWord ) )
            // InternalNaturalLang.g:6626:4: ( ( ruleItWord ) )=> (lv_email_3_0= ruleItWord )
            {
            // InternalNaturalLang.g:6630:4: (lv_email_3_0= ruleItWord )
            // InternalNaturalLang.g:6631:5: lv_email_3_0= ruleItWord
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMailAdressAccess().getEmailItWordParserRuleCall_2_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_2);
            lv_email_3_0=ruleItWord();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMailAdressRule());
              					}
              					add(
              						current,
              						"email",
              						lv_email_3_0,
              						"org.xixum.nlx.naturalLang.ItWord");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleMailAdress"


    // $ANTLR start "entryRuleFormula"
    // InternalNaturalLang.g:6655:1: entryRuleFormula returns [EObject current=null] : iv_ruleFormula= ruleFormula EOF ;
    public final EObject entryRuleFormula() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFormula = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6657:2: (iv_ruleFormula= ruleFormula EOF )
            // InternalNaturalLang.g:6658:2: iv_ruleFormula= ruleFormula EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormulaRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleFormula=ruleFormula();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormula; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleFormula"


    // $ANTLR start "ruleFormula"
    // InternalNaturalLang.g:6667:1: ruleFormula returns [EObject current=null] : ( ( (lv_name_0_0= ruleEmailAT ) )? ( ( (lv_name_1_0= ruleItWord ) ) | ( (lv_name_2_0= ruleWord ) ) ) ( (lv_parameters_3_0= ruleBracketSentence ) ) (this_DOT_4= RULE_DOT ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) ) ( (lv_parameters_7_0= ruleBracketSentence ) ) )* ) ;
    public final EObject ruleFormula() throws RecognitionException {
        EObject current = null;

        Token this_DOT_4=null;
        EObject lv_name_0_0 = null;

        EObject lv_name_1_0 = null;

        EObject lv_name_2_0 = null;

        EObject lv_parameters_3_0 = null;

        EObject lv_name_5_0 = null;

        EObject lv_name_6_0 = null;

        EObject lv_parameters_7_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6674:2: ( ( ( (lv_name_0_0= ruleEmailAT ) )? ( ( (lv_name_1_0= ruleItWord ) ) | ( (lv_name_2_0= ruleWord ) ) ) ( (lv_parameters_3_0= ruleBracketSentence ) ) (this_DOT_4= RULE_DOT ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) ) ( (lv_parameters_7_0= ruleBracketSentence ) ) )* ) )
            // InternalNaturalLang.g:6675:2: ( ( (lv_name_0_0= ruleEmailAT ) )? ( ( (lv_name_1_0= ruleItWord ) ) | ( (lv_name_2_0= ruleWord ) ) ) ( (lv_parameters_3_0= ruleBracketSentence ) ) (this_DOT_4= RULE_DOT ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) ) ( (lv_parameters_7_0= ruleBracketSentence ) ) )* )
            {
            // InternalNaturalLang.g:6675:2: ( ( (lv_name_0_0= ruleEmailAT ) )? ( ( (lv_name_1_0= ruleItWord ) ) | ( (lv_name_2_0= ruleWord ) ) ) ( (lv_parameters_3_0= ruleBracketSentence ) ) (this_DOT_4= RULE_DOT ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) ) ( (lv_parameters_7_0= ruleBracketSentence ) ) )* )
            // InternalNaturalLang.g:6676:3: ( (lv_name_0_0= ruleEmailAT ) )? ( ( (lv_name_1_0= ruleItWord ) ) | ( (lv_name_2_0= ruleWord ) ) ) ( (lv_parameters_3_0= ruleBracketSentence ) ) (this_DOT_4= RULE_DOT ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) ) ( (lv_parameters_7_0= ruleBracketSentence ) ) )*
            {
            // InternalNaturalLang.g:6676:3: ( (lv_name_0_0= ruleEmailAT ) )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==RULE_AT) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // InternalNaturalLang.g:6677:4: (lv_name_0_0= ruleEmailAT )
                    {
                    // InternalNaturalLang.g:6677:4: (lv_name_0_0= ruleEmailAT )
                    // InternalNaturalLang.g:6678:5: lv_name_0_0= ruleEmailAT
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFormulaAccess().getNameEmailATParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FollowSets000.FOLLOW_62);
                    lv_name_0_0=ruleEmailAT();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFormulaRule());
                      					}
                      					add(
                      						current,
                      						"name",
                      						lv_name_0_0,
                      						"org.xixum.nlx.naturalLang.EmailAT");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:6695:3: ( ( (lv_name_1_0= ruleItWord ) ) | ( (lv_name_2_0= ruleWord ) ) )
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // InternalNaturalLang.g:6696:4: ( (lv_name_1_0= ruleItWord ) )
                    {
                    // InternalNaturalLang.g:6696:4: ( (lv_name_1_0= ruleItWord ) )
                    // InternalNaturalLang.g:6697:5: (lv_name_1_0= ruleItWord )
                    {
                    // InternalNaturalLang.g:6697:5: (lv_name_1_0= ruleItWord )
                    // InternalNaturalLang.g:6698:6: lv_name_1_0= ruleItWord
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFormulaAccess().getNameItWordParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_63);
                    lv_name_1_0=ruleItWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFormulaRule());
                      						}
                      						add(
                      							current,
                      							"name",
                      							lv_name_1_0,
                      							"org.xixum.nlx.naturalLang.ItWord");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:6716:4: ( (lv_name_2_0= ruleWord ) )
                    {
                    // InternalNaturalLang.g:6716:4: ( (lv_name_2_0= ruleWord ) )
                    // InternalNaturalLang.g:6717:5: (lv_name_2_0= ruleWord )
                    {
                    // InternalNaturalLang.g:6717:5: (lv_name_2_0= ruleWord )
                    // InternalNaturalLang.g:6718:6: lv_name_2_0= ruleWord
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFormulaAccess().getNameWordParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_63);
                    lv_name_2_0=ruleWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFormulaRule());
                      						}
                      						add(
                      							current,
                      							"name",
                      							lv_name_2_0,
                      							"org.xixum.nlx.naturalLang.Word");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:6736:3: ( (lv_parameters_3_0= ruleBracketSentence ) )
            // InternalNaturalLang.g:6737:4: (lv_parameters_3_0= ruleBracketSentence )
            {
            // InternalNaturalLang.g:6737:4: (lv_parameters_3_0= ruleBracketSentence )
            // InternalNaturalLang.g:6738:5: lv_parameters_3_0= ruleBracketSentence
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFormulaAccess().getParametersBracketSentenceParserRuleCall_2_0());
              				
            }
            pushFollow(FollowSets000.FOLLOW_59);
            lv_parameters_3_0=ruleBracketSentence();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFormulaRule());
              					}
              					add(
              						current,
              						"parameters",
              						lv_parameters_3_0,
              						"org.xixum.nlx.naturalLang.BracketSentence");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalNaturalLang.g:6755:3: (this_DOT_4= RULE_DOT ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) ) ( (lv_parameters_7_0= ruleBracketSentence ) ) )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==RULE_DOT) ) {
                    int LA135_2 = input.LA(2);

                    if ( (LA135_2==RULE_MULTI||(LA135_2>=RULE_DOT && LA135_2<=RULE_ALPHA)||(LA135_2>=RULE_ID && LA135_2<=RULE_DOUBLE_DOT)||LA135_2==RULE_SEPARATORS_IT) ) {
                        alt135=1;
                    }


                }


                switch (alt135) {
            	case 1 :
            	    // InternalNaturalLang.g:6756:4: this_DOT_4= RULE_DOT ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) ) ( (lv_parameters_7_0= ruleBracketSentence ) )
            	    {
            	    this_DOT_4=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(this_DOT_4, grammarAccess.getFormulaAccess().getDOTTerminalRuleCall_3_0());
            	      			
            	    }
            	    // InternalNaturalLang.g:6760:4: ( ( (lv_name_5_0= ruleItWord ) ) | ( (lv_name_6_0= ruleWord ) ) )
            	    int alt134=2;
            	    alt134 = dfa134.predict(input);
            	    switch (alt134) {
            	        case 1 :
            	            // InternalNaturalLang.g:6761:5: ( (lv_name_5_0= ruleItWord ) )
            	            {
            	            // InternalNaturalLang.g:6761:5: ( (lv_name_5_0= ruleItWord ) )
            	            // InternalNaturalLang.g:6762:6: (lv_name_5_0= ruleItWord )
            	            {
            	            // InternalNaturalLang.g:6762:6: (lv_name_5_0= ruleItWord )
            	            // InternalNaturalLang.g:6763:7: lv_name_5_0= ruleItWord
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getFormulaAccess().getNameItWordParserRuleCall_3_1_0_0());
            	              						
            	            }
            	            pushFollow(FollowSets000.FOLLOW_63);
            	            lv_name_5_0=ruleItWord();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getFormulaRule());
            	              							}
            	              							add(
            	              								current,
            	              								"name",
            	              								lv_name_5_0,
            	              								"org.xixum.nlx.naturalLang.ItWord");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalNaturalLang.g:6781:5: ( (lv_name_6_0= ruleWord ) )
            	            {
            	            // InternalNaturalLang.g:6781:5: ( (lv_name_6_0= ruleWord ) )
            	            // InternalNaturalLang.g:6782:6: (lv_name_6_0= ruleWord )
            	            {
            	            // InternalNaturalLang.g:6782:6: (lv_name_6_0= ruleWord )
            	            // InternalNaturalLang.g:6783:7: lv_name_6_0= ruleWord
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getFormulaAccess().getNameWordParserRuleCall_3_1_1_0());
            	              						
            	            }
            	            pushFollow(FollowSets000.FOLLOW_63);
            	            lv_name_6_0=ruleWord();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getFormulaRule());
            	              							}
            	              							add(
            	              								current,
            	              								"name",
            	              								lv_name_6_0,
            	              								"org.xixum.nlx.naturalLang.Word");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // InternalNaturalLang.g:6801:4: ( (lv_parameters_7_0= ruleBracketSentence ) )
            	    // InternalNaturalLang.g:6802:5: (lv_parameters_7_0= ruleBracketSentence )
            	    {
            	    // InternalNaturalLang.g:6802:5: (lv_parameters_7_0= ruleBracketSentence )
            	    // InternalNaturalLang.g:6803:6: lv_parameters_7_0= ruleBracketSentence
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFormulaAccess().getParametersBracketSentenceParserRuleCall_3_2_0());
            	      					
            	    }
            	    pushFollow(FollowSets000.FOLLOW_59);
            	    lv_parameters_7_0=ruleBracketSentence();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFormulaRule());
            	      						}
            	      						add(
            	      							current,
            	      							"parameters",
            	      							lv_parameters_7_0,
            	      							"org.xixum.nlx.naturalLang.BracketSentence");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleFormula"


    // $ANTLR start "entryRuleArray"
    // InternalNaturalLang.g:6828:1: entryRuleArray returns [EObject current=null] : iv_ruleArray= ruleArray EOF ;
    public final EObject entryRuleArray() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArray = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6830:2: (iv_ruleArray= ruleArray EOF )
            // InternalNaturalLang.g:6831:2: iv_ruleArray= ruleArray EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleArray=ruleArray();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArray; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleArray"


    // $ANTLR start "ruleArray"
    // InternalNaturalLang.g:6840:1: ruleArray returns [EObject current=null] : ( ( ( (lv_name_0_0= ruleItWord ) ) | ( (lv_name_1_0= ruleWord ) ) ) ( (lv_parameters_2_0= ruleExtBracketSentence ) )+ ) ;
    public final EObject ruleArray() throws RecognitionException {
        EObject current = null;

        EObject lv_name_0_0 = null;

        EObject lv_name_1_0 = null;

        EObject lv_parameters_2_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalNaturalLang.g:6847:2: ( ( ( ( (lv_name_0_0= ruleItWord ) ) | ( (lv_name_1_0= ruleWord ) ) ) ( (lv_parameters_2_0= ruleExtBracketSentence ) )+ ) )
            // InternalNaturalLang.g:6848:2: ( ( ( (lv_name_0_0= ruleItWord ) ) | ( (lv_name_1_0= ruleWord ) ) ) ( (lv_parameters_2_0= ruleExtBracketSentence ) )+ )
            {
            // InternalNaturalLang.g:6848:2: ( ( ( (lv_name_0_0= ruleItWord ) ) | ( (lv_name_1_0= ruleWord ) ) ) ( (lv_parameters_2_0= ruleExtBracketSentence ) )+ )
            // InternalNaturalLang.g:6849:3: ( ( (lv_name_0_0= ruleItWord ) ) | ( (lv_name_1_0= ruleWord ) ) ) ( (lv_parameters_2_0= ruleExtBracketSentence ) )+
            {
            // InternalNaturalLang.g:6849:3: ( ( (lv_name_0_0= ruleItWord ) ) | ( (lv_name_1_0= ruleWord ) ) )
            int alt136=2;
            alt136 = dfa136.predict(input);
            switch (alt136) {
                case 1 :
                    // InternalNaturalLang.g:6850:4: ( (lv_name_0_0= ruleItWord ) )
                    {
                    // InternalNaturalLang.g:6850:4: ( (lv_name_0_0= ruleItWord ) )
                    // InternalNaturalLang.g:6851:5: (lv_name_0_0= ruleItWord )
                    {
                    // InternalNaturalLang.g:6851:5: (lv_name_0_0= ruleItWord )
                    // InternalNaturalLang.g:6852:6: lv_name_0_0= ruleItWord
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayAccess().getNameItWordParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_64);
                    lv_name_0_0=ruleItWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayRule());
                      						}
                      						add(
                      							current,
                      							"name",
                      							lv_name_0_0,
                      							"org.xixum.nlx.naturalLang.ItWord");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalNaturalLang.g:6870:4: ( (lv_name_1_0= ruleWord ) )
                    {
                    // InternalNaturalLang.g:6870:4: ( (lv_name_1_0= ruleWord ) )
                    // InternalNaturalLang.g:6871:5: (lv_name_1_0= ruleWord )
                    {
                    // InternalNaturalLang.g:6871:5: (lv_name_1_0= ruleWord )
                    // InternalNaturalLang.g:6872:6: lv_name_1_0= ruleWord
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayAccess().getNameWordParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FollowSets000.FOLLOW_64);
                    lv_name_1_0=ruleWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayRule());
                      						}
                      						add(
                      							current,
                      							"name",
                      							lv_name_1_0,
                      							"org.xixum.nlx.naturalLang.Word");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalNaturalLang.g:6890:3: ( (lv_parameters_2_0= ruleExtBracketSentence ) )+
            int cnt137=0;
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==RULE_EXBR_O) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // InternalNaturalLang.g:6891:4: (lv_parameters_2_0= ruleExtBracketSentence )
            	    {
            	    // InternalNaturalLang.g:6891:4: (lv_parameters_2_0= ruleExtBracketSentence )
            	    // InternalNaturalLang.g:6892:5: lv_parameters_2_0= ruleExtBracketSentence
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayAccess().getParametersExtBracketSentenceParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FollowSets000.FOLLOW_65);
            	    lv_parameters_2_0=ruleExtBracketSentence();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayRule());
            	      					}
            	      					add(
            	      						current,
            	      						"parameters",
            	      						lv_parameters_2_0,
            	      						"org.xixum.nlx.naturalLang.ExtBracketSentence");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt137 >= 1 ) break loop137;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(137, input);
                        throw eee;
                }
                cnt137++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleArray"


    // $ANTLR start "entryRuleNew_Line"
    // InternalNaturalLang.g:6916:1: entryRuleNew_Line returns [EObject current=null] : iv_ruleNew_Line= ruleNew_Line EOF ;
    public final EObject entryRuleNew_Line() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNew_Line = null;


        try {
            // InternalNaturalLang.g:6916:49: (iv_ruleNew_Line= ruleNew_Line EOF )
            // InternalNaturalLang.g:6917:2: iv_ruleNew_Line= ruleNew_Line EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNew_LineRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            iv_ruleNew_Line=ruleNew_Line();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNew_Line; 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNew_Line"


    // $ANTLR start "ruleNew_Line"
    // InternalNaturalLang.g:6923:1: ruleNew_Line returns [EObject current=null] : ( () ( (lv_nl_1_0= RULE_NEWLINE ) ) ) ;
    public final EObject ruleNew_Line() throws RecognitionException {
        EObject current = null;

        Token lv_nl_1_0=null;


        	enterRule();

        try {
            // InternalNaturalLang.g:6929:2: ( ( () ( (lv_nl_1_0= RULE_NEWLINE ) ) ) )
            // InternalNaturalLang.g:6930:2: ( () ( (lv_nl_1_0= RULE_NEWLINE ) ) )
            {
            // InternalNaturalLang.g:6930:2: ( () ( (lv_nl_1_0= RULE_NEWLINE ) ) )
            // InternalNaturalLang.g:6931:3: () ( (lv_nl_1_0= RULE_NEWLINE ) )
            {
            // InternalNaturalLang.g:6931:3: ()
            // InternalNaturalLang.g:6932:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNew_LineAccess().getElementsAction_0(),
              					current);
              			
            }

            }

            // InternalNaturalLang.g:6941:3: ( (lv_nl_1_0= RULE_NEWLINE ) )
            // InternalNaturalLang.g:6942:4: (lv_nl_1_0= RULE_NEWLINE )
            {
            // InternalNaturalLang.g:6942:4: (lv_nl_1_0= RULE_NEWLINE )
            // InternalNaturalLang.g:6943:5: lv_nl_1_0= RULE_NEWLINE
            {
            lv_nl_1_0=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_nl_1_0, grammarAccess.getNew_LineAccess().getNlNEWLINETerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getNew_LineRule());
              					}
              					setWithLastConsumed(
              						current,
              						"nl",
              						lv_nl_1_0,
              						"org.xixum.nlx.naturalLang.NEWLINE");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNew_Line"

    // $ANTLR start synpred4_InternalNaturalLang
    public final void synpred4_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_ChapterSentence_1 = null;


        // InternalNaturalLang.g:134:4: ( ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence ) )
        // InternalNaturalLang.g:134:4: ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence )
        {
        // InternalNaturalLang.g:134:4: ( ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence )
        // InternalNaturalLang.g:135:5: ( ruleChapterSentence )=>this_ChapterSentence_1= ruleChapterSentence
        {
        pushFollow(FollowSets000.FOLLOW_2);
        this_ChapterSentence_1=ruleChapterSentence();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred4_InternalNaturalLang

    // $ANTLR start synpred5_InternalNaturalLang
    public final void synpred5_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_ParagraphBlock_2 = null;


        // InternalNaturalLang.g:149:4: (this_ParagraphBlock_2= ruleParagraphBlock )
        // InternalNaturalLang.g:149:4: this_ParagraphBlock_2= ruleParagraphBlock
        {
        if ( state.backtracking==0 ) {

          				/* */
          			
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_ParagraphBlock_2=ruleParagraphBlock();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_InternalNaturalLang

    // $ANTLR start synpred6_InternalNaturalLang
    public final void synpred6_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_NEWLINE_0=null;

        // InternalNaturalLang.g:212:4: (this_NEWLINE_0= RULE_NEWLINE )
        // InternalNaturalLang.g:212:4: this_NEWLINE_0= RULE_NEWLINE
        {
        this_NEWLINE_0=(Token)match(input,RULE_NEWLINE,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_InternalNaturalLang

    // $ANTLR start synpred9_InternalNaturalLang
    public final void synpred9_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_SentenceChain_0 = null;


        // InternalNaturalLang.g:283:3: (this_SentenceChain_0= ruleSentenceChain )
        // InternalNaturalLang.g:283:3: this_SentenceChain_0= ruleSentenceChain
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_SentenceChain_0=ruleSentenceChain();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_InternalNaturalLang

    // $ANTLR start synpred10_InternalNaturalLang
    public final void synpred10_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_IgnoredText_1 = null;


        // InternalNaturalLang.g:295:3: (this_IgnoredText_1= ruleIgnoredText )
        // InternalNaturalLang.g:295:3: this_IgnoredText_1= ruleIgnoredText
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_IgnoredText_1=ruleIgnoredText();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_InternalNaturalLang

    // $ANTLR start synpred11_InternalNaturalLang
    public final void synpred11_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_FootNote_2 = null;


        // InternalNaturalLang.g:307:3: (this_FootNote_2= ruleFootNote )
        // InternalNaturalLang.g:307:3: this_FootNote_2= ruleFootNote
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_FootNote_2=ruleFootNote();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_InternalNaturalLang

    // $ANTLR start synpred12_InternalNaturalLang
    public final void synpred12_InternalNaturalLang_fragment() throws RecognitionException {   
        // InternalNaturalLang.g:320:4: ( ruleListSentence )
        // InternalNaturalLang.g:320:5: ruleListSentence
        {
        pushFollow(FollowSets000.FOLLOW_2);
        ruleListSentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_InternalNaturalLang

    // $ANTLR start synpred28_InternalNaturalLang
    public final void synpred28_InternalNaturalLang_fragment() throws RecognitionException {   
        // InternalNaturalLang.g:1100:4: ( ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) ) )
        // InternalNaturalLang.g:1100:5: ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) )
        {
        // InternalNaturalLang.g:1100:5: ( ( ( RULE_FULL_STOP_NL ) ) | ( ( RULE_NEWLINE ) ) | ( ( RULE_KOMMA ) ) )
        int alt141=3;
        switch ( input.LA(1) ) {
        case RULE_FULL_STOP_NL:
            {
            alt141=1;
            }
            break;
        case RULE_NEWLINE:
            {
            alt141=2;
            }
            break;
        case RULE_KOMMA:
            {
            alt141=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 141, 0, input);

            throw nvae;
        }

        switch (alt141) {
            case 1 :
                // InternalNaturalLang.g:1101:5: ( ( RULE_FULL_STOP_NL ) )
                {
                // InternalNaturalLang.g:1101:5: ( ( RULE_FULL_STOP_NL ) )
                // InternalNaturalLang.g:1102:6: ( RULE_FULL_STOP_NL )
                {
                // InternalNaturalLang.g:1102:6: ( RULE_FULL_STOP_NL )
                // InternalNaturalLang.g:1103:7: RULE_FULL_STOP_NL
                {
                match(input,RULE_FULL_STOP_NL,FollowSets000.FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalNaturalLang.g:1107:5: ( ( RULE_NEWLINE ) )
                {
                // InternalNaturalLang.g:1107:5: ( ( RULE_NEWLINE ) )
                // InternalNaturalLang.g:1108:6: ( RULE_NEWLINE )
                {
                // InternalNaturalLang.g:1108:6: ( RULE_NEWLINE )
                // InternalNaturalLang.g:1109:7: RULE_NEWLINE
                {
                match(input,RULE_NEWLINE,FollowSets000.FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 3 :
                // InternalNaturalLang.g:1113:5: ( ( RULE_KOMMA ) )
                {
                // InternalNaturalLang.g:1113:5: ( ( RULE_KOMMA ) )
                // InternalNaturalLang.g:1114:6: ( RULE_KOMMA )
                {
                // InternalNaturalLang.g:1114:6: ( RULE_KOMMA )
                // InternalNaturalLang.g:1115:7: RULE_KOMMA
                {
                match(input,RULE_KOMMA,FollowSets000.FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred28_InternalNaturalLang

    // $ANTLR start synpred31_InternalNaturalLang
    public final void synpred31_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_KOMMA_2=null;
        EObject lv_subsentence_3_0 = null;


        // InternalNaturalLang.g:1228:4: (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )
        // InternalNaturalLang.g:1228:4: this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
        {
        this_KOMMA_2=(Token)match(input,RULE_KOMMA,FollowSets000.FOLLOW_13); if (state.failed) return ;
        // InternalNaturalLang.g:1232:4: ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
        // InternalNaturalLang.g:1233:5: (lv_subsentence_3_0= ruleTrailSubSentence )
        {
        // InternalNaturalLang.g:1233:5: (lv_subsentence_3_0= ruleTrailSubSentence )
        // InternalNaturalLang.g:1234:6: lv_subsentence_3_0= ruleTrailSubSentence
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSentenceAccess().getSubsentenceTrailSubSentenceParserRuleCall_2_1_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_subsentence_3_0=ruleTrailSubSentence();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred31_InternalNaturalLang

    // $ANTLR start synpred34_InternalNaturalLang
    public final void synpred34_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_KOMMA_2=null;
        EObject lv_subsentence_3_0 = null;


        // InternalNaturalLang.g:1447:4: (this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) ) )
        // InternalNaturalLang.g:1447:4: this_KOMMA_2= RULE_KOMMA ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
        {
        this_KOMMA_2=(Token)match(input,RULE_KOMMA,FollowSets000.FOLLOW_13); if (state.failed) return ;
        // InternalNaturalLang.g:1451:4: ( (lv_subsentence_3_0= ruleTrailSubSentence ) )
        // InternalNaturalLang.g:1452:5: (lv_subsentence_3_0= ruleTrailSubSentence )
        {
        // InternalNaturalLang.g:1452:5: (lv_subsentence_3_0= ruleTrailSubSentence )
        // InternalNaturalLang.g:1453:6: lv_subsentence_3_0= ruleTrailSubSentence
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSentenceXAccess().getSubsentenceTrailSubSentenceParserRuleCall_2_1_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_subsentence_3_0=ruleTrailSubSentence();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred34_InternalNaturalLang

    // $ANTLR start synpred37_InternalNaturalLang
    public final void synpred37_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject lv_chapterNumber_0_0 = null;


        // InternalNaturalLang.g:1555:4: ( ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) ) )
        // InternalNaturalLang.g:1555:4: ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) )
        {
        // InternalNaturalLang.g:1555:4: ( ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low ) )
        // InternalNaturalLang.g:1556:5: ( ( ruleChapter_Unit_Low ) )=> (lv_chapterNumber_0_0= ruleChapter_Unit_Low )
        {
        // InternalNaturalLang.g:1560:5: (lv_chapterNumber_0_0= ruleChapter_Unit_Low )
        // InternalNaturalLang.g:1561:6: lv_chapterNumber_0_0= ruleChapter_Unit_Low
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getChapterSentenceAccess().getChapterNumberChapter_Unit_LowParserRuleCall_0_0_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_chapterNumber_0_0=ruleChapter_Unit_Low();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred37_InternalNaturalLang

    // $ANTLR start synpred40_InternalNaturalLang
    public final void synpred40_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_SPACE_2=null;
        EObject lv_elements_1_0 = null;

        EObject lv_elements_3_0 = null;


        // InternalNaturalLang.g:1674:4: ( ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* ) )
        // InternalNaturalLang.g:1674:4: ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* )
        {
        // InternalNaturalLang.g:1674:4: ( ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )* )
        // InternalNaturalLang.g:1675:5: ( (lv_elements_1_0= ruleNoNElement ) ) (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )*
        {
        // InternalNaturalLang.g:1675:5: ( (lv_elements_1_0= ruleNoNElement ) )
        // InternalNaturalLang.g:1676:6: (lv_elements_1_0= ruleNoNElement )
        {
        // InternalNaturalLang.g:1676:6: (lv_elements_1_0= ruleNoNElement )
        // InternalNaturalLang.g:1677:7: lv_elements_1_0= ruleNoNElement
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsNoNElementParserRuleCall_1_0_0_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_24);
        lv_elements_1_0=ruleNoNElement();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalNaturalLang.g:1694:5: (this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) ) )*
        loop142:
        do {
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==RULE_SPACE) ) {
                alt142=1;
            }


            switch (alt142) {
        	case 1 :
        	    // InternalNaturalLang.g:1695:6: this_SPACE_2= RULE_SPACE ( (lv_elements_3_0= ruleElements ) )
        	    {
        	    this_SPACE_2=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return ;
        	    // InternalNaturalLang.g:1699:6: ( (lv_elements_3_0= ruleElements ) )
        	    // InternalNaturalLang.g:1700:7: (lv_elements_3_0= ruleElements )
        	    {
        	    // InternalNaturalLang.g:1700:7: (lv_elements_3_0= ruleElements )
        	    // InternalNaturalLang.g:1701:8: lv_elements_3_0= ruleElements
        	    {
        	    if ( state.backtracking==0 ) {

        	      								newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsElementsParserRuleCall_1_0_1_1_0());
        	      							
        	    }
        	    pushFollow(FollowSets000.FOLLOW_24);
        	    lv_elements_3_0=ruleElements();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop142;
            }
        } while (true);


        }


        }
    }
    // $ANTLR end synpred40_InternalNaturalLang

    // $ANTLR start synpred45_InternalNaturalLang
    public final void synpred45_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_SPACE_7=null;
        Token this_SPACE_9=null;
        Token this_SPACE_11=null;
        EObject lv_elements_8_0 = null;

        EObject lv_elements_10_0 = null;

        EObject lv_elements_12_0 = null;


        // InternalNaturalLang.g:1769:4: ( (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )* )
        // InternalNaturalLang.g:1769:4: (this_SPACE_7= RULE_SPACE )? ( (lv_elements_8_0= ruleNew_Line ) ) (this_SPACE_9= RULE_SPACE )? ( (lv_elements_10_0= ruleNoNElementX2 ) ) (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )*
        {
        // InternalNaturalLang.g:1769:4: (this_SPACE_7= RULE_SPACE )?
        int alt143=2;
        int LA143_0 = input.LA(1);

        if ( (LA143_0==RULE_SPACE) ) {
            alt143=1;
        }
        switch (alt143) {
            case 1 :
                // InternalNaturalLang.g:1770:5: this_SPACE_7= RULE_SPACE
                {
                this_SPACE_7=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_21); if (state.failed) return ;

                }
                break;

        }

        // InternalNaturalLang.g:1775:4: ( (lv_elements_8_0= ruleNew_Line ) )
        // InternalNaturalLang.g:1776:5: (lv_elements_8_0= ruleNew_Line )
        {
        // InternalNaturalLang.g:1776:5: (lv_elements_8_0= ruleNew_Line )
        // InternalNaturalLang.g:1777:6: lv_elements_8_0= ruleNew_Line
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsNew_LineParserRuleCall_2_1_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_22);
        lv_elements_8_0=ruleNew_Line();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalNaturalLang.g:1794:4: (this_SPACE_9= RULE_SPACE )?
        int alt144=2;
        int LA144_0 = input.LA(1);

        if ( (LA144_0==RULE_SPACE) ) {
            alt144=1;
        }
        switch (alt144) {
            case 1 :
                // InternalNaturalLang.g:1795:5: this_SPACE_9= RULE_SPACE
                {
                this_SPACE_9=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_23); if (state.failed) return ;

                }
                break;

        }

        // InternalNaturalLang.g:1800:4: ( (lv_elements_10_0= ruleNoNElementX2 ) )
        // InternalNaturalLang.g:1801:5: (lv_elements_10_0= ruleNoNElementX2 )
        {
        // InternalNaturalLang.g:1801:5: (lv_elements_10_0= ruleNoNElementX2 )
        // InternalNaturalLang.g:1802:6: lv_elements_10_0= ruleNoNElementX2
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsNoNElementX2ParserRuleCall_2_3_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_24);
        lv_elements_10_0=ruleNoNElementX2();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalNaturalLang.g:1819:4: (this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) ) )*
        loop145:
        do {
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==RULE_SPACE) ) {
                alt145=1;
            }


            switch (alt145) {
        	case 1 :
        	    // InternalNaturalLang.g:1820:5: this_SPACE_11= RULE_SPACE ( (lv_elements_12_0= ruleElements ) )
        	    {
        	    this_SPACE_11=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return ;
        	    // InternalNaturalLang.g:1824:5: ( (lv_elements_12_0= ruleElements ) )
        	    // InternalNaturalLang.g:1825:6: (lv_elements_12_0= ruleElements )
        	    {
        	    // InternalNaturalLang.g:1825:6: (lv_elements_12_0= ruleElements )
        	    // InternalNaturalLang.g:1826:7: lv_elements_12_0= ruleElements
        	    {
        	    if ( state.backtracking==0 ) {

        	      							newCompositeNode(grammarAccess.getSubSentenceAccess().getElementsElementsParserRuleCall_2_4_1_0());
        	      						
        	    }
        	    pushFollow(FollowSets000.FOLLOW_24);
        	    lv_elements_12_0=ruleElements();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop145;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred45_InternalNaturalLang

    // $ANTLR start synpred52_InternalNaturalLang
    public final void synpred52_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_SPACE_4=null;
        Token this_SPACE_6=null;
        Token this_SPACE_8=null;
        EObject lv_elements_5_0 = null;

        EObject lv_elements_7_0 = null;

        EObject lv_elements_9_0 = null;


        // InternalNaturalLang.g:1935:5: ( (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )* )
        // InternalNaturalLang.g:1935:5: (this_SPACE_4= RULE_SPACE )? ( (lv_elements_5_0= ruleNew_Line ) ) (this_SPACE_6= RULE_SPACE )? ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) ) (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )*
        {
        // InternalNaturalLang.g:1935:5: (this_SPACE_4= RULE_SPACE )?
        int alt146=2;
        int LA146_0 = input.LA(1);

        if ( (LA146_0==RULE_SPACE) ) {
            alt146=1;
        }
        switch (alt146) {
            case 1 :
                // InternalNaturalLang.g:1936:6: this_SPACE_4= RULE_SPACE
                {
                this_SPACE_4=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_21); if (state.failed) return ;

                }
                break;

        }

        // InternalNaturalLang.g:1941:5: ( (lv_elements_5_0= ruleNew_Line ) )
        // InternalNaturalLang.g:1942:6: (lv_elements_5_0= ruleNew_Line )
        {
        // InternalNaturalLang.g:1942:6: (lv_elements_5_0= ruleNew_Line )
        // InternalNaturalLang.g:1943:7: lv_elements_5_0= ruleNew_Line
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsNew_LineParserRuleCall_1_2_1_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_22);
        lv_elements_5_0=ruleNew_Line();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalNaturalLang.g:1960:5: (this_SPACE_6= RULE_SPACE )?
        int alt147=2;
        int LA147_0 = input.LA(1);

        if ( (LA147_0==RULE_SPACE) ) {
            alt147=1;
        }
        switch (alt147) {
            case 1 :
                // InternalNaturalLang.g:1961:6: this_SPACE_6= RULE_SPACE
                {
                this_SPACE_6=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_23); if (state.failed) return ;

                }
                break;

        }

        // InternalNaturalLang.g:1966:5: ( ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 ) )
        // InternalNaturalLang.g:1967:6: ( ( ruleNoNElementX2 ) )=> (lv_elements_7_0= ruleNoNElementX2 )
        {
        // InternalNaturalLang.g:1971:6: (lv_elements_7_0= ruleNoNElementX2 )
        // InternalNaturalLang.g:1972:7: lv_elements_7_0= ruleNoNElementX2
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsNoNElementX2ParserRuleCall_1_2_3_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_24);
        lv_elements_7_0=ruleNoNElementX2();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalNaturalLang.g:1989:5: (this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) ) )*
        loop148:
        do {
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==RULE_SPACE) ) {
                alt148=1;
            }


            switch (alt148) {
        	case 1 :
        	    // InternalNaturalLang.g:1990:6: this_SPACE_8= RULE_SPACE ( (lv_elements_9_0= ruleElements ) )
        	    {
        	    this_SPACE_8=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_13); if (state.failed) return ;
        	    // InternalNaturalLang.g:1994:6: ( (lv_elements_9_0= ruleElements ) )
        	    // InternalNaturalLang.g:1995:7: (lv_elements_9_0= ruleElements )
        	    {
        	    // InternalNaturalLang.g:1995:7: (lv_elements_9_0= ruleElements )
        	    // InternalNaturalLang.g:1996:8: lv_elements_9_0= ruleElements
        	    {
        	    if ( state.backtracking==0 ) {

        	      								newCompositeNode(grammarAccess.getTrailSubSentenceAccess().getElementsElementsParserRuleCall_1_2_4_1_0());
        	      							
        	    }
        	    pushFollow(FollowSets000.FOLLOW_24);
        	    lv_elements_9_0=ruleElements();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop148;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred52_InternalNaturalLang

    // $ANTLR start synpred55_InternalNaturalLang
    public final void synpred55_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject lv_elements_2_0 = null;


        // InternalNaturalLang.g:2066:4: ( ( (lv_elements_2_0= ruleNew_Line ) ) )
        // InternalNaturalLang.g:2066:4: ( (lv_elements_2_0= ruleNew_Line ) )
        {
        // InternalNaturalLang.g:2066:4: ( (lv_elements_2_0= ruleNew_Line ) )
        // InternalNaturalLang.g:2067:5: (lv_elements_2_0= ruleNew_Line )
        {
        // InternalNaturalLang.g:2067:5: (lv_elements_2_0= ruleNew_Line )
        // InternalNaturalLang.g:2068:6: lv_elements_2_0= ruleNew_Line
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsNew_LineParserRuleCall_1_1_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_elements_2_0=ruleNew_Line();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred55_InternalNaturalLang

    // $ANTLR start synpred57_InternalNaturalLang
    public final void synpred57_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject lv_elements_5_0 = null;


        // InternalNaturalLang.g:2112:5: ( ( (lv_elements_5_0= ruleNew_Line ) ) )
        // InternalNaturalLang.g:2112:5: ( (lv_elements_5_0= ruleNew_Line ) )
        {
        // InternalNaturalLang.g:2112:5: ( (lv_elements_5_0= ruleNew_Line ) )
        // InternalNaturalLang.g:2113:6: (lv_elements_5_0= ruleNew_Line )
        {
        // InternalNaturalLang.g:2113:6: (lv_elements_5_0= ruleNew_Line )
        // InternalNaturalLang.g:2114:7: lv_elements_5_0= ruleNew_Line
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsNew_LineParserRuleCall_3_0_1_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_elements_5_0=ruleNew_Line();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred57_InternalNaturalLang

    // $ANTLR start synpred58_InternalNaturalLang
    public final void synpred58_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_SPACE_4=null;
        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;


        // InternalNaturalLang.g:2106:4: ( (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) ) )
        // InternalNaturalLang.g:2106:4: (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+ ( (lv_elements_6_0= ruleAllElements ) )
        {
        // InternalNaturalLang.g:2106:4: (this_SPACE_4= RULE_SPACE | ( (lv_elements_5_0= ruleNew_Line ) ) )+
        int cnt149=0;
        loop149:
        do {
            int alt149=3;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==RULE_NEWLINE) ) {
                int LA149_2 = input.LA(2);

                if ( (LA149_2==RULE_NEWLINE||(LA149_2>=RULE_SPACE && LA149_2<=RULE_BR_O)||LA149_2==RULE_EXBR_O||LA149_2==RULE_EXBRC_O||(LA149_2>=RULE_ID && LA149_2<=RULE_DOUBLE_DOT)||(LA149_2>=RULE_HEX_NUMBER && LA149_2<=RULE_IGNORED)||(LA149_2>=RULE_OPERATORS && LA149_2<=RULE_AT)) ) {
                    alt149=2;
                }


            }
            else if ( (LA149_0==RULE_SPACE) ) {
                alt149=1;
            }


            switch (alt149) {
        	case 1 :
        	    // InternalNaturalLang.g:2107:5: this_SPACE_4= RULE_SPACE
        	    {
        	    this_SPACE_4=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_17); if (state.failed) return ;

        	    }
        	    break;
        	case 2 :
        	    // InternalNaturalLang.g:2112:5: ( (lv_elements_5_0= ruleNew_Line ) )
        	    {
        	    // InternalNaturalLang.g:2112:5: ( (lv_elements_5_0= ruleNew_Line ) )
        	    // InternalNaturalLang.g:2113:6: (lv_elements_5_0= ruleNew_Line )
        	    {
        	    // InternalNaturalLang.g:2113:6: (lv_elements_5_0= ruleNew_Line )
        	    // InternalNaturalLang.g:2114:7: lv_elements_5_0= ruleNew_Line
        	    {
        	    if ( state.backtracking==0 ) {

        	      							newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsNew_LineParserRuleCall_3_0_1_0());
        	      						
        	    }
        	    pushFollow(FollowSets000.FOLLOW_17);
        	    lv_elements_5_0=ruleNew_Line();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt149 >= 1 ) break loop149;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(149, input);
                    throw eee;
            }
            cnt149++;
        } while (true);

        // InternalNaturalLang.g:2132:4: ( (lv_elements_6_0= ruleAllElements ) )
        // InternalNaturalLang.g:2133:5: (lv_elements_6_0= ruleAllElements )
        {
        // InternalNaturalLang.g:2133:5: (lv_elements_6_0= ruleAllElements )
        // InternalNaturalLang.g:2134:6: lv_elements_6_0= ruleAllElements
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsAllElementsParserRuleCall_3_1_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_elements_6_0=ruleAllElements();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred58_InternalNaturalLang

    // $ANTLR start synpred59_InternalNaturalLang
    public final void synpred59_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_SPACE_7=null;

        // InternalNaturalLang.g:2153:4: (this_SPACE_7= RULE_SPACE )
        // InternalNaturalLang.g:2153:4: this_SPACE_7= RULE_SPACE
        {
        this_SPACE_7=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_InternalNaturalLang

    // $ANTLR start synpred60_InternalNaturalLang
    public final void synpred60_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject lv_elements_8_0 = null;


        // InternalNaturalLang.g:2158:4: ( ( (lv_elements_8_0= ruleNew_Line ) ) )
        // InternalNaturalLang.g:2158:4: ( (lv_elements_8_0= ruleNew_Line ) )
        {
        // InternalNaturalLang.g:2158:4: ( (lv_elements_8_0= ruleNew_Line ) )
        // InternalNaturalLang.g:2159:5: (lv_elements_8_0= ruleNew_Line )
        {
        // InternalNaturalLang.g:2159:5: (lv_elements_8_0= ruleNew_Line )
        // InternalNaturalLang.g:2160:6: lv_elements_8_0= ruleNew_Line
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getFreeSubSentenceAccess().getElementsNew_LineParserRuleCall_4_1_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_elements_8_0=ruleNew_Line();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred60_InternalNaturalLang

    // $ANTLR start synpred74_InternalNaturalLang
    public final void synpred74_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_ShortCut_5 = null;


        // InternalNaturalLang.g:2514:3: (this_ShortCut_5= ruleShortCut )
        // InternalNaturalLang.g:2514:3: this_ShortCut_5= ruleShortCut
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_ShortCut_5=ruleShortCut();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_InternalNaturalLang

    // $ANTLR start synpred75_InternalNaturalLang
    public final void synpred75_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_HashNumber_6 = null;


        // InternalNaturalLang.g:2526:3: (this_HashNumber_6= ruleHashNumber )
        // InternalNaturalLang.g:2526:3: this_HashNumber_6= ruleHashNumber
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_HashNumber_6=ruleHashNumber();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_InternalNaturalLang

    // $ANTLR start synpred83_InternalNaturalLang
    public final void synpred83_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_SimpleUnit_0 = null;


        // InternalNaturalLang.g:2712:3: (this_SimpleUnit_0= ruleSimpleUnit )
        // InternalNaturalLang.g:2712:3: this_SimpleUnit_0= ruleSimpleUnit
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_SimpleUnit_0=ruleSimpleUnit();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_InternalNaturalLang

    // $ANTLR start synpred84_InternalNaturalLang
    public final void synpred84_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_Unit_1 = null;


        // InternalNaturalLang.g:2724:3: (this_Unit_1= ruleUnit )
        // InternalNaturalLang.g:2724:3: this_Unit_1= ruleUnit
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_Unit_1=ruleUnit();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_InternalNaturalLang

    // $ANTLR start synpred85_InternalNaturalLang
    public final void synpred85_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject this_NoNElement_2 = null;


        // InternalNaturalLang.g:2736:3: (this_NoNElement_2= ruleNoNElement )
        // InternalNaturalLang.g:2736:3: this_NoNElement_2= ruleNoNElement
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_NoNElement_2=ruleNoNElement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_InternalNaturalLang

    // $ANTLR start synpred91_InternalNaturalLang
    public final void synpred91_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken lv_separator_3_0 = null;

        EObject lv_brackedSentences_4_0 = null;


        // InternalNaturalLang.g:2929:5: ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )
        // InternalNaturalLang.g:2929:5: ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
        {
        // InternalNaturalLang.g:2929:5: ( (lv_separator_3_0= ruleFullStop ) )
        // InternalNaturalLang.g:2930:6: (lv_separator_3_0= ruleFullStop )
        {
        // InternalNaturalLang.g:2930:6: (lv_separator_3_0= ruleFullStop )
        // InternalNaturalLang.g:2931:7: lv_separator_3_0= ruleFullStop
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getBracketSentenceAccess().getSeparatorFullStopParserRuleCall_2_1_0_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_17);
        lv_separator_3_0=ruleFullStop();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalNaturalLang.g:2948:5: ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
        // InternalNaturalLang.g:2949:6: (lv_brackedSentences_4_0= ruleFreeSentence )
        {
        // InternalNaturalLang.g:2949:6: (lv_brackedSentences_4_0= ruleFreeSentence )
        // InternalNaturalLang.g:2950:7: lv_brackedSentences_4_0= ruleFreeSentence
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getBracketSentenceAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_brackedSentences_4_0=ruleFreeSentence();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred91_InternalNaturalLang

    // $ANTLR start synpred92_InternalNaturalLang
    public final void synpred92_InternalNaturalLang_fragment() throws RecognitionException {   
        EObject lv_brackedSentences_2_0 = null;

        AntlrDatatypeRuleToken lv_separator_3_0 = null;

        EObject lv_brackedSentences_4_0 = null;


        // InternalNaturalLang.g:2909:4: ( ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )* )
        // InternalNaturalLang.g:2909:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) ) ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
        {
        // InternalNaturalLang.g:2909:4: ( (lv_brackedSentences_2_0= ruleFreeSentence ) )
        // InternalNaturalLang.g:2910:5: (lv_brackedSentences_2_0= ruleFreeSentence )
        {
        // InternalNaturalLang.g:2910:5: (lv_brackedSentences_2_0= ruleFreeSentence )
        // InternalNaturalLang.g:2911:6: lv_brackedSentences_2_0= ruleFreeSentence
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getBracketSentenceAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_0_0());
          					
        }
        pushFollow(FollowSets000.FOLLOW_66);
        lv_brackedSentences_2_0=ruleFreeSentence();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalNaturalLang.g:2928:4: ( ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) ) )*
        loop151:
        do {
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=RULE_FULL_STOP_IM && LA151_0<=RULE_FULL_STOP_NL)) ) {
                alt151=1;
            }


            switch (alt151) {
        	case 1 :
        	    // InternalNaturalLang.g:2929:5: ( (lv_separator_3_0= ruleFullStop ) ) ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
        	    {
        	    // InternalNaturalLang.g:2929:5: ( (lv_separator_3_0= ruleFullStop ) )
        	    // InternalNaturalLang.g:2930:6: (lv_separator_3_0= ruleFullStop )
        	    {
        	    // InternalNaturalLang.g:2930:6: (lv_separator_3_0= ruleFullStop )
        	    // InternalNaturalLang.g:2931:7: lv_separator_3_0= ruleFullStop
        	    {
        	    if ( state.backtracking==0 ) {

        	      							newCompositeNode(grammarAccess.getBracketSentenceAccess().getSeparatorFullStopParserRuleCall_2_1_0_0());
        	      						
        	    }
        	    pushFollow(FollowSets000.FOLLOW_17);
        	    lv_separator_3_0=ruleFullStop();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    // InternalNaturalLang.g:2948:5: ( (lv_brackedSentences_4_0= ruleFreeSentence ) )
        	    // InternalNaturalLang.g:2949:6: (lv_brackedSentences_4_0= ruleFreeSentence )
        	    {
        	    // InternalNaturalLang.g:2949:6: (lv_brackedSentences_4_0= ruleFreeSentence )
        	    // InternalNaturalLang.g:2950:7: lv_brackedSentences_4_0= ruleFreeSentence
        	    {
        	    if ( state.backtracking==0 ) {

        	      							newCompositeNode(grammarAccess.getBracketSentenceAccess().getBrackedSentencesFreeSentenceParserRuleCall_2_1_1_0());
        	      						
        	    }
        	    pushFollow(FollowSets000.FOLLOW_66);
        	    lv_brackedSentences_4_0=ruleFreeSentence();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop151;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred92_InternalNaturalLang

    // $ANTLR start synpred96_InternalNaturalLang
    public final void synpred96_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_SPACE_6=null;

        // InternalNaturalLang.g:3021:4: (this_SPACE_6= RULE_SPACE )
        // InternalNaturalLang.g:3021:4: this_SPACE_6= RULE_SPACE
        {
        this_SPACE_6=(Token)match(input,RULE_SPACE,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_InternalNaturalLang

    // $ANTLR start synpred99_InternalNaturalLang
    public final void synpred99_InternalNaturalLang_fragment() throws RecognitionException {   
        // InternalNaturalLang.g:3038:4: ( ( RULE_BR_CL ) )
        // InternalNaturalLang.g:3038:5: ( RULE_BR_CL )
        {
        // InternalNaturalLang.g:3038:5: ( RULE_BR_CL )
        // InternalNaturalLang.g:3039:5: RULE_BR_CL
        {
        match(input,RULE_BR_CL,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred99_InternalNaturalLang

    // $ANTLR start synpred106_InternalNaturalLang
    public final void synpred106_InternalNaturalLang_fragment() throws RecognitionException {   
        // InternalNaturalLang.g:3225:4: ( ( RULE_EXBR_CL ) )
        // InternalNaturalLang.g:3225:5: ( RULE_EXBR_CL )
        {
        // InternalNaturalLang.g:3225:5: ( RULE_EXBR_CL )
        // InternalNaturalLang.g:3226:5: RULE_EXBR_CL
        {
        match(input,RULE_EXBR_CL,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred106_InternalNaturalLang

    // $ANTLR start synpred113_InternalNaturalLang
    public final void synpred113_InternalNaturalLang_fragment() throws RecognitionException {   
        // InternalNaturalLang.g:3412:4: ( ( RULE_EXBRC_CL ) )
        // InternalNaturalLang.g:3412:5: ( RULE_EXBRC_CL )
        {
        // InternalNaturalLang.g:3412:5: ( RULE_EXBRC_CL )
        // InternalNaturalLang.g:3413:5: RULE_EXBRC_CL
        {
        match(input,RULE_EXBRC_CL,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred113_InternalNaturalLang

    // $ANTLR start synpred116_InternalNaturalLang
    public final void synpred116_InternalNaturalLang_fragment() throws RecognitionException {   
        // InternalNaturalLang.g:3515:6: ( ( ( ruleFragment ) ) )
        // InternalNaturalLang.g:3515:7: ( ( ruleFragment ) )
        {
        // InternalNaturalLang.g:3515:7: ( ( ruleFragment ) )
        // InternalNaturalLang.g:3516:7: ( ruleFragment )
        {
        // InternalNaturalLang.g:3516:7: ( ruleFragment )
        // InternalNaturalLang.g:3517:8: ruleFragment
        {
        pushFollow(FollowSets000.FOLLOW_2);
        ruleFragment();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred116_InternalNaturalLang

    // $ANTLR start synpred122_InternalNaturalLang
    public final void synpred122_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_MULTI_1=null;

        // InternalNaturalLang.g:3759:5: (this_MULTI_1= RULE_MULTI )
        // InternalNaturalLang.g:3759:5: this_MULTI_1= RULE_MULTI
        {
        this_MULTI_1=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_InternalNaturalLang

    // $ANTLR start synpred129_InternalNaturalLang
    public final void synpred129_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken lv_word_4_0 = null;


        // InternalNaturalLang.g:3941:8: ( ( (lv_word_4_0= ruleItWordElXx ) ) )
        // InternalNaturalLang.g:3941:8: ( (lv_word_4_0= ruleItWordElXx ) )
        {
        // InternalNaturalLang.g:3941:8: ( (lv_word_4_0= ruleItWordElXx ) )
        // InternalNaturalLang.g:3942:9: (lv_word_4_0= ruleItWordElXx )
        {
        // InternalNaturalLang.g:3942:9: (lv_word_4_0= ruleItWordElXx )
        // InternalNaturalLang.g:3943:10: lv_word_4_0= ruleItWordElXx
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_0_0_0_1_0_0());
          									
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_word_4_0=ruleItWordElXx();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred129_InternalNaturalLang

    // $ANTLR start synpred135_InternalNaturalLang
    public final void synpred135_InternalNaturalLang_fragment() throws RecognitionException {   
        Token lv_word_2_0=null;
        Token lv_word_3_0=null;
        Token lv_word_7_0=null;
        Token lv_word_8_0=null;
        Token lv_word_9_0=null;
        AntlrDatatypeRuleToken lv_word_0_0 = null;

        AntlrDatatypeRuleToken lv_word_1_0 = null;

        AntlrDatatypeRuleToken lv_word_4_0 = null;

        AntlrDatatypeRuleToken lv_word_5_0 = null;

        AntlrDatatypeRuleToken lv_word_6_0 = null;

        AntlrDatatypeRuleToken lv_word_10_0 = null;

        AntlrDatatypeRuleToken lv_word_11_0 = null;


        // InternalNaturalLang.g:3858:4: ( ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* ) )
        // InternalNaturalLang.g:3858:4: ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* )
        {
        // InternalNaturalLang.g:3858:4: ( ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )* )
        // InternalNaturalLang.g:3859:5: ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) ) ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )*
        {
        // InternalNaturalLang.g:3859:5: ( ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) ) | ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) ) )
        int alt167=2;
        int LA167_0 = input.LA(1);

        if ( (LA167_0==RULE_MULTI||LA167_0==RULE_DOT||(LA167_0>=RULE_HASH && LA167_0<=RULE_CURRENCY)||LA167_0==RULE_COLON||LA167_0==RULE_SEPARATORS_IT) ) {
            alt167=1;
        }
        else if ( (LA167_0==RULE_ALL_ALPHA||LA167_0==RULE_CURL||(LA167_0>=RULE_IT_ID && LA167_0<=RULE_DOUBLE_DOT)) ) {
            alt167=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 167, 0, input);

            throw nvae;
        }
        switch (alt167) {
            case 1 :
                // InternalNaturalLang.g:3860:6: ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) )
                {
                // InternalNaturalLang.g:3860:6: ( ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) ) )
                // InternalNaturalLang.g:3861:7: ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) ) ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) )
                {
                // InternalNaturalLang.g:3861:7: ( ( (lv_word_0_0= ruleSeparatorsIt ) )+ | ( (lv_word_1_0= ruleHashP ) ) | ( (lv_word_2_0= RULE_MULTI ) ) | ( (lv_word_3_0= RULE_CURRENCY ) ) )
                int alt164=4;
                switch ( input.LA(1) ) {
                case RULE_DOT:
                case RULE_COLON:
                case RULE_SEPARATORS_IT:
                    {
                    alt164=1;
                    }
                    break;
                case RULE_HASH:
                    {
                    alt164=2;
                    }
                    break;
                case RULE_MULTI:
                    {
                    alt164=3;
                    }
                    break;
                case RULE_CURRENCY:
                    {
                    alt164=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 164, 0, input);

                    throw nvae;
                }

                switch (alt164) {
                    case 1 :
                        // InternalNaturalLang.g:3862:8: ( (lv_word_0_0= ruleSeparatorsIt ) )+
                        {
                        // InternalNaturalLang.g:3862:8: ( (lv_word_0_0= ruleSeparatorsIt ) )+
                        int cnt163=0;
                        loop163:
                        do {
                            int alt163=2;
                            int LA163_0 = input.LA(1);

                            if ( (LA163_0==RULE_DOT||LA163_0==RULE_COLON||LA163_0==RULE_SEPARATORS_IT) ) {
                                alt163=1;
                            }


                            switch (alt163) {
                        	case 1 :
                        	    // InternalNaturalLang.g:3863:9: (lv_word_0_0= ruleSeparatorsIt )
                        	    {
                        	    // InternalNaturalLang.g:3863:9: (lv_word_0_0= ruleSeparatorsIt )
                        	    // InternalNaturalLang.g:3864:10: lv_word_0_0= ruleSeparatorsIt
                        	    {
                        	    if ( state.backtracking==0 ) {

                        	      										newCompositeNode(grammarAccess.getItWordAccess().getWordSeparatorsItParserRuleCall_0_0_0_0_0_0_0());
                        	      									
                        	    }
                        	    pushFollow(FollowSets000.FOLLOW_42);
                        	    lv_word_0_0=ruleSeparatorsIt();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }
                        	    break;

                        	default :
                        	    if ( cnt163 >= 1 ) break loop163;
                        	    if (state.backtracking>0) {state.failed=true; return ;}
                                    EarlyExitException eee =
                                        new EarlyExitException(163, input);
                                    throw eee;
                            }
                            cnt163++;
                        } while (true);


                        }
                        break;
                    case 2 :
                        // InternalNaturalLang.g:3882:8: ( (lv_word_1_0= ruleHashP ) )
                        {
                        // InternalNaturalLang.g:3882:8: ( (lv_word_1_0= ruleHashP ) )
                        // InternalNaturalLang.g:3883:9: (lv_word_1_0= ruleHashP )
                        {
                        // InternalNaturalLang.g:3883:9: (lv_word_1_0= ruleHashP )
                        // InternalNaturalLang.g:3884:10: lv_word_1_0= ruleHashP
                        {
                        if ( state.backtracking==0 ) {

                          										newCompositeNode(grammarAccess.getItWordAccess().getWordHashPParserRuleCall_0_0_0_0_0_1_0());
                          									
                        }
                        pushFollow(FollowSets000.FOLLOW_42);
                        lv_word_1_0=ruleHashP();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;
                    case 3 :
                        // InternalNaturalLang.g:3902:8: ( (lv_word_2_0= RULE_MULTI ) )
                        {
                        // InternalNaturalLang.g:3902:8: ( (lv_word_2_0= RULE_MULTI ) )
                        // InternalNaturalLang.g:3903:9: (lv_word_2_0= RULE_MULTI )
                        {
                        // InternalNaturalLang.g:3903:9: (lv_word_2_0= RULE_MULTI )
                        // InternalNaturalLang.g:3904:10: lv_word_2_0= RULE_MULTI
                        {
                        lv_word_2_0=(Token)match(input,RULE_MULTI,FollowSets000.FOLLOW_42); if (state.failed) return ;

                        }


                        }


                        }
                        break;
                    case 4 :
                        // InternalNaturalLang.g:3921:8: ( (lv_word_3_0= RULE_CURRENCY ) )
                        {
                        // InternalNaturalLang.g:3921:8: ( (lv_word_3_0= RULE_CURRENCY ) )
                        // InternalNaturalLang.g:3922:9: (lv_word_3_0= RULE_CURRENCY )
                        {
                        // InternalNaturalLang.g:3922:9: (lv_word_3_0= RULE_CURRENCY )
                        // InternalNaturalLang.g:3923:10: lv_word_3_0= RULE_CURRENCY
                        {
                        lv_word_3_0=(Token)match(input,RULE_CURRENCY,FollowSets000.FOLLOW_42); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                // InternalNaturalLang.g:3940:7: ( ( (lv_word_4_0= ruleItWordElXx ) ) | ( (lv_word_5_0= ruleFragment ) ) )
                int alt165=2;
                switch ( input.LA(1) ) {
                case RULE_ALL_ALPHA:
                    {
                    int LA165_1 = input.LA(2);

                    if ( (synpred129_InternalNaturalLang()) ) {
                        alt165=1;
                    }
                    else if ( (true) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 1, input);

                        throw nvae;
                    }
                    }
                    break;
                case RULE_ALPHA:
                    {
                    int LA165_2 = input.LA(2);

                    if ( (synpred129_InternalNaturalLang()) ) {
                        alt165=1;
                    }
                    else if ( (true) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case RULE_MULTI:
                case RULE_INT:
                case RULE_CURL:
                case RULE_IT_ID:
                case RULE_DOUBLE_DOT:
                case RULE_ID_ALL:
                case RULE_HEX_NUMBER:
                    {
                    alt165=1;
                    }
                    break;
                case RULE_ID:
                    {
                    int LA165_4 = input.LA(2);

                    if ( (synpred129_InternalNaturalLang()) ) {
                        alt165=1;
                    }
                    else if ( (true) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case RULE_ID_C:
                    {
                    int LA165_5 = input.LA(2);

                    if ( (synpred129_InternalNaturalLang()) ) {
                        alt165=1;
                    }
                    else if ( (true) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 0, input);

                    throw nvae;
                }

                switch (alt165) {
                    case 1 :
                        // InternalNaturalLang.g:3941:8: ( (lv_word_4_0= ruleItWordElXx ) )
                        {
                        // InternalNaturalLang.g:3941:8: ( (lv_word_4_0= ruleItWordElXx ) )
                        // InternalNaturalLang.g:3942:9: (lv_word_4_0= ruleItWordElXx )
                        {
                        // InternalNaturalLang.g:3942:9: (lv_word_4_0= ruleItWordElXx )
                        // InternalNaturalLang.g:3943:10: lv_word_4_0= ruleItWordElXx
                        {
                        if ( state.backtracking==0 ) {

                          										newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_0_0_0_1_0_0());
                          									
                        }
                        pushFollow(FollowSets000.FOLLOW_43);
                        lv_word_4_0=ruleItWordElXx();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;
                    case 2 :
                        // InternalNaturalLang.g:3961:8: ( (lv_word_5_0= ruleFragment ) )
                        {
                        // InternalNaturalLang.g:3961:8: ( (lv_word_5_0= ruleFragment ) )
                        // InternalNaturalLang.g:3962:9: (lv_word_5_0= ruleFragment )
                        {
                        // InternalNaturalLang.g:3962:9: (lv_word_5_0= ruleFragment )
                        // InternalNaturalLang.g:3963:10: lv_word_5_0= ruleFragment
                        {
                        if ( state.backtracking==0 ) {

                          										newCompositeNode(grammarAccess.getItWordAccess().getWordFragmentParserRuleCall_0_0_0_0_1_1_0());
                          									
                        }
                        pushFollow(FollowSets000.FOLLOW_43);
                        lv_word_5_0=ruleFragment();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                // InternalNaturalLang.g:3983:6: ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) )
                {
                // InternalNaturalLang.g:3983:6: ( ( (lv_word_6_0= ruleItWordEl ) ) | ( (lv_word_7_0= RULE_CURL ) ) | ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) ) )
                int alt166=3;
                switch ( input.LA(1) ) {
                case RULE_IT_ID:
                case RULE_DOUBLE_DOT:
                    {
                    alt166=1;
                    }
                    break;
                case RULE_CURL:
                    {
                    alt166=2;
                    }
                    break;
                case RULE_ALL_ALPHA:
                    {
                    alt166=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 166, 0, input);

                    throw nvae;
                }

                switch (alt166) {
                    case 1 :
                        // InternalNaturalLang.g:3984:7: ( (lv_word_6_0= ruleItWordEl ) )
                        {
                        // InternalNaturalLang.g:3984:7: ( (lv_word_6_0= ruleItWordEl ) )
                        // InternalNaturalLang.g:3985:8: (lv_word_6_0= ruleItWordEl )
                        {
                        // InternalNaturalLang.g:3985:8: (lv_word_6_0= ruleItWordEl )
                        // InternalNaturalLang.g:3986:9: lv_word_6_0= ruleItWordEl
                        {
                        if ( state.backtracking==0 ) {

                          									newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElParserRuleCall_0_0_0_1_0_0());
                          								
                        }
                        pushFollow(FollowSets000.FOLLOW_43);
                        lv_word_6_0=ruleItWordEl();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;
                    case 2 :
                        // InternalNaturalLang.g:4004:7: ( (lv_word_7_0= RULE_CURL ) )
                        {
                        // InternalNaturalLang.g:4004:7: ( (lv_word_7_0= RULE_CURL ) )
                        // InternalNaturalLang.g:4005:8: (lv_word_7_0= RULE_CURL )
                        {
                        // InternalNaturalLang.g:4005:8: (lv_word_7_0= RULE_CURL )
                        // InternalNaturalLang.g:4006:9: lv_word_7_0= RULE_CURL
                        {
                        lv_word_7_0=(Token)match(input,RULE_CURL,FollowSets000.FOLLOW_43); if (state.failed) return ;

                        }


                        }


                        }
                        break;
                    case 3 :
                        // InternalNaturalLang.g:4023:7: ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) )
                        {
                        // InternalNaturalLang.g:4023:7: ( ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) ) )
                        // InternalNaturalLang.g:4024:8: ( (lv_word_8_0= RULE_ALL_ALPHA ) ) ( (lv_word_9_0= RULE_COLON ) )
                        {
                        // InternalNaturalLang.g:4024:8: ( (lv_word_8_0= RULE_ALL_ALPHA ) )
                        // InternalNaturalLang.g:4025:9: (lv_word_8_0= RULE_ALL_ALPHA )
                        {
                        // InternalNaturalLang.g:4025:9: (lv_word_8_0= RULE_ALL_ALPHA )
                        // InternalNaturalLang.g:4026:10: lv_word_8_0= RULE_ALL_ALPHA
                        {
                        lv_word_8_0=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_44); if (state.failed) return ;

                        }


                        }

                        // InternalNaturalLang.g:4042:8: ( (lv_word_9_0= RULE_COLON ) )
                        // InternalNaturalLang.g:4043:9: (lv_word_9_0= RULE_COLON )
                        {
                        // InternalNaturalLang.g:4043:9: (lv_word_9_0= RULE_COLON )
                        // InternalNaturalLang.g:4044:10: lv_word_9_0= RULE_COLON
                        {
                        lv_word_9_0=(Token)match(input,RULE_COLON,FollowSets000.FOLLOW_43); if (state.failed) return ;

                        }


                        }


                        }


                        }
                        break;

                }


                }
                break;

        }

        // InternalNaturalLang.g:4063:5: ( ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) ) )*
        loop169:
        do {
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( ((LA169_0>=RULE_DASH && LA169_0<=RULE_MINUS)||LA169_0==RULE_DOT||LA169_0==RULE_COLON||(LA169_0>=RULE_SLASH && LA169_0<=RULE_SEPARATORS_IT)) ) {
                alt169=1;
            }


            switch (alt169) {
        	case 1 :
        	    // InternalNaturalLang.g:4064:6: ( (lv_word_10_0= ruleAllSep ) )+ ( (lv_word_11_0= ruleItWordElXx ) )
        	    {
        	    // InternalNaturalLang.g:4064:6: ( (lv_word_10_0= ruleAllSep ) )+
        	    int cnt168=0;
        	    loop168:
        	    do {
        	        int alt168=2;
        	        int LA168_0 = input.LA(1);

        	        if ( ((LA168_0>=RULE_DASH && LA168_0<=RULE_MINUS)||LA168_0==RULE_DOT||LA168_0==RULE_COLON||(LA168_0>=RULE_SLASH && LA168_0<=RULE_SEPARATORS_IT)) ) {
        	            alt168=1;
        	        }


        	        switch (alt168) {
        	    	case 1 :
        	    	    // InternalNaturalLang.g:4065:7: (lv_word_10_0= ruleAllSep )
        	    	    {
        	    	    // InternalNaturalLang.g:4065:7: (lv_word_10_0= ruleAllSep )
        	    	    // InternalNaturalLang.g:4066:8: lv_word_10_0= ruleAllSep
        	    	    {
        	    	    if ( state.backtracking==0 ) {

        	    	      								newCompositeNode(grammarAccess.getItWordAccess().getWordAllSepParserRuleCall_0_0_1_0_0());
        	    	      							
        	    	    }
        	    	    pushFollow(FollowSets000.FOLLOW_45);
        	    	    lv_word_10_0=ruleAllSep();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }


        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt168 >= 1 ) break loop168;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(168, input);
        	                throw eee;
        	        }
        	        cnt168++;
        	    } while (true);

        	    // InternalNaturalLang.g:4083:6: ( (lv_word_11_0= ruleItWordElXx ) )
        	    // InternalNaturalLang.g:4084:7: (lv_word_11_0= ruleItWordElXx )
        	    {
        	    // InternalNaturalLang.g:4084:7: (lv_word_11_0= ruleItWordElXx )
        	    // InternalNaturalLang.g:4085:8: lv_word_11_0= ruleItWordElXx
        	    {
        	    if ( state.backtracking==0 ) {

        	      								newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_0_1_1_0());
        	      							
        	    }
        	    pushFollow(FollowSets000.FOLLOW_43);
        	    lv_word_11_0=ruleItWordElXx();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop169;
            }
        } while (true);


        }


        }
    }
    // $ANTLR end synpred135_InternalNaturalLang

    // $ANTLR start synpred139_InternalNaturalLang
    public final void synpred139_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken lv_word_14_0 = null;

        AntlrDatatypeRuleToken lv_word_15_0 = null;


        // InternalNaturalLang.g:4152:6: ( ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) ) )
        // InternalNaturalLang.g:4152:6: ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) )
        {
        // InternalNaturalLang.g:4152:6: ( ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) ) )
        // InternalNaturalLang.g:4153:7: ( (lv_word_14_0= ruleSeparatorsIt ) )+ ( (lv_word_15_0= ruleItWordElXx ) )
        {
        // InternalNaturalLang.g:4153:7: ( (lv_word_14_0= ruleSeparatorsIt ) )+
        int cnt170=0;
        loop170:
        do {
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==RULE_DOT||LA170_0==RULE_COLON||LA170_0==RULE_SEPARATORS_IT) ) {
                alt170=1;
            }


            switch (alt170) {
        	case 1 :
        	    // InternalNaturalLang.g:4154:8: (lv_word_14_0= ruleSeparatorsIt )
        	    {
        	    // InternalNaturalLang.g:4154:8: (lv_word_14_0= ruleSeparatorsIt )
        	    // InternalNaturalLang.g:4155:9: lv_word_14_0= ruleSeparatorsIt
        	    {
        	    if ( state.backtracking==0 ) {

        	      									newCompositeNode(grammarAccess.getItWordAccess().getWordSeparatorsItParserRuleCall_0_1_1_0_0_0());
        	      								
        	    }
        	    pushFollow(FollowSets000.FOLLOW_42);
        	    lv_word_14_0=ruleSeparatorsIt();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt170 >= 1 ) break loop170;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(170, input);
                    throw eee;
            }
            cnt170++;
        } while (true);

        // InternalNaturalLang.g:4172:7: ( (lv_word_15_0= ruleItWordElXx ) )
        // InternalNaturalLang.g:4173:8: (lv_word_15_0= ruleItWordElXx )
        {
        // InternalNaturalLang.g:4173:8: (lv_word_15_0= ruleItWordElXx )
        // InternalNaturalLang.g:4174:9: lv_word_15_0= ruleItWordElXx
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getItWordAccess().getWordItWordElXxParserRuleCall_0_1_1_0_1_0());
          								
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_word_15_0=ruleItWordElXx();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred139_InternalNaturalLang

    // $ANTLR start synpred143_InternalNaturalLang
    public final void synpred143_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken lv_word_20_0 = null;


        // InternalNaturalLang.g:4277:4: ( (lv_word_20_0= ruleAllSep ) )
        // InternalNaturalLang.g:4277:4: (lv_word_20_0= ruleAllSep )
        {
        // InternalNaturalLang.g:4277:4: (lv_word_20_0= ruleAllSep )
        // InternalNaturalLang.g:4278:5: lv_word_20_0= ruleAllSep
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getItWordAccess().getWordAllSepParserRuleCall_1_0());
          				
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_word_20_0=ruleAllSep();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred143_InternalNaturalLang

    // $ANTLR start synpred153_InternalNaturalLang
    public final void synpred153_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_ALL_ALPHA_0=null;

        // InternalNaturalLang.g:4533:3: (this_ALL_ALPHA_0= RULE_ALL_ALPHA )
        // InternalNaturalLang.g:4533:3: this_ALL_ALPHA_0= RULE_ALL_ALPHA
        {
        this_ALL_ALPHA_0=(Token)match(input,RULE_ALL_ALPHA,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_InternalNaturalLang

    // $ANTLR start synpred154_InternalNaturalLang
    public final void synpred154_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_ALPHA_1=null;

        // InternalNaturalLang.g:4541:3: (this_ALPHA_1= RULE_ALPHA )
        // InternalNaturalLang.g:4541:3: this_ALPHA_1= RULE_ALPHA
        {
        this_ALPHA_1=(Token)match(input,RULE_ALPHA,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_InternalNaturalLang

    // $ANTLR start synpred156_InternalNaturalLang
    public final void synpred156_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken this_ItWordElX_2 = null;


        // InternalNaturalLang.g:4549:3: ( ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX ) )
        // InternalNaturalLang.g:4549:3: ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX )
        {
        // InternalNaturalLang.g:4549:3: ( ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX )
        // InternalNaturalLang.g:4550:4: ( ruleItWordElX )=>this_ItWordElX_2= ruleItWordElX
        {
        pushFollow(FollowSets000.FOLLOW_2);
        this_ItWordElX_2=ruleItWordElX();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred156_InternalNaturalLang

    // $ANTLR start synpred157_InternalNaturalLang
    public final void synpred157_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken this_Fragment_3 = null;


        // InternalNaturalLang.g:4563:3: (this_Fragment_3= ruleFragment )
        // InternalNaturalLang.g:4563:3: this_Fragment_3= ruleFragment
        {
        if ( state.backtracking==0 ) {

          			newCompositeNode(grammarAccess.getItWordElXxAccess().getFragmentParserRuleCall_3());
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_Fragment_3=ruleFragment();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_InternalNaturalLang

    // $ANTLR start synpred158_InternalNaturalLang
    public final void synpred158_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken this_Asterisk_4 = null;


        // InternalNaturalLang.g:4574:3: (this_Asterisk_4= ruleAsterisk )
        // InternalNaturalLang.g:4574:3: this_Asterisk_4= ruleAsterisk
        {
        if ( state.backtracking==0 ) {

          			newCompositeNode(grammarAccess.getItWordElXxAccess().getAsteriskParserRuleCall_4());
          		
        }
        pushFollow(FollowSets000.FOLLOW_2);
        this_Asterisk_4=ruleAsterisk();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_InternalNaturalLang

    // $ANTLR start synpred159_InternalNaturalLang
    public final void synpred159_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_ID_C_5=null;

        // InternalNaturalLang.g:4585:3: (this_ID_C_5= RULE_ID_C )
        // InternalNaturalLang.g:4585:3: this_ID_C_5= RULE_ID_C
        {
        this_ID_C_5=(Token)match(input,RULE_ID_C,FollowSets000.FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_InternalNaturalLang

}

@SuppressWarnings("all")
abstract class InternalNaturalLangParser4 extends InternalNaturalLangParser3 {

        InternalNaturalLangParser4(TokenStream input) {
            this(input, new RecognizerSharedState());
        }

        InternalNaturalLangParser4(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }

    // $ANTLR start synpred168_InternalNaturalLang
    public final void synpred168_InternalNaturalLang_fragment() throws RecognitionException {   
        // InternalNaturalLang.g:4841:4: ( ( ruleNumber ) )
        // InternalNaturalLang.g:4841:5: ( ruleNumber )
        {
        // InternalNaturalLang.g:4841:5: ( ruleNumber )
        // InternalNaturalLang.g:4842:5: ruleNumber
        {
        pushFollow(FollowSets000.FOLLOW_2);
        ruleNumber();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred168_InternalNaturalLang

    // $ANTLR start synpred204_InternalNaturalLang
    public final void synpred204_InternalNaturalLang_fragment() throws RecognitionException {   
        Token this_DOT_1=null;
        AntlrDatatypeRuleToken this_ChapterIntermediate_2 = null;


        // InternalNaturalLang.g:6258:4: (this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate )
        // InternalNaturalLang.g:6258:4: this_DOT_1= RULE_DOT this_ChapterIntermediate_2= ruleChapterIntermediate
        {
        this_DOT_1=(Token)match(input,RULE_DOT,FollowSets000.FOLLOW_52); if (state.failed) return ;
        pushFollow(FollowSets000.FOLLOW_2);
        this_ChapterIntermediate_2=ruleChapterIntermediate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_InternalNaturalLang

    // $ANTLR start synpred208_InternalNaturalLang
    public final void synpred208_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken lv_url_3_0 = null;


        // InternalNaturalLang.g:6422:5: ( ( (lv_url_3_0= ruleItWordElXx ) ) )
        // InternalNaturalLang.g:6422:5: ( (lv_url_3_0= ruleItWordElXx ) )
        {
        // InternalNaturalLang.g:6422:5: ( (lv_url_3_0= ruleItWordElXx ) )
        // InternalNaturalLang.g:6423:6: (lv_url_3_0= ruleItWordElXx )
        {
        // InternalNaturalLang.g:6423:6: (lv_url_3_0= ruleItWordElXx )
        // InternalNaturalLang.g:6424:7: lv_url_3_0= ruleItWordElXx
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlItWordElXxParserRuleCall_2_1_0_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_url_3_0=ruleItWordElXx();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred208_InternalNaturalLang

    // $ANTLR start synpred209_InternalNaturalLang
    public final void synpred209_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken lv_url_4_0 = null;


        // InternalNaturalLang.g:6442:5: ( ( (lv_url_4_0= rulesimpleNum ) ) )
        // InternalNaturalLang.g:6442:5: ( (lv_url_4_0= rulesimpleNum ) )
        {
        // InternalNaturalLang.g:6442:5: ( (lv_url_4_0= rulesimpleNum ) )
        // InternalNaturalLang.g:6443:6: (lv_url_4_0= rulesimpleNum )
        {
        // InternalNaturalLang.g:6443:6: (lv_url_4_0= rulesimpleNum )
        // InternalNaturalLang.g:6444:7: lv_url_4_0= rulesimpleNum
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlSimpleNumParserRuleCall_2_1_1_0());
          						
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_url_4_0=rulesimpleNum();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred209_InternalNaturalLang

    // $ANTLR start synpred211_InternalNaturalLang
    public final void synpred211_InternalNaturalLang_fragment() throws RecognitionException {   
        AntlrDatatypeRuleToken lv_url_6_0 = null;


        // InternalNaturalLang.g:6484:4: ( (lv_url_6_0= ruleAllSep ) )
        // InternalNaturalLang.g:6484:4: (lv_url_6_0= ruleAllSep )
        {
        // InternalNaturalLang.g:6484:4: (lv_url_6_0= ruleAllSep )
        // InternalNaturalLang.g:6485:5: lv_url_6_0= ruleAllSep
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getUrlAdressAccess().getUrlAllSepParserRuleCall_3_0());
          				
        }
        pushFollow(FollowSets000.FOLLOW_2);
        lv_url_6_0=ruleAllSep();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred211_InternalNaturalLang

}

@SuppressWarnings("all")
public class InternalNaturalLangParser extends InternalNaturalLangParser4 {



        public InternalNaturalLangParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalNaturalLangParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        


        public InternalNaturalLangParser(TokenStream input, NaturalLangGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }
}
