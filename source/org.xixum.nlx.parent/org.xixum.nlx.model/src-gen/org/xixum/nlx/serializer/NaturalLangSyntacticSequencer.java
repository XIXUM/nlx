/*
 * generated by Xtext 2.16.0
 */
package org.xixum.nlx.serializer;

import com.google.inject.Inject;
import org.xixum.nlx.services.NaturalLangGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class NaturalLangSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NaturalLangGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BracketSentence_SPACETerminalRuleCall_5_q;
	protected AbstractElementAlias match_BracketSentence___NEWLINETerminalRuleCall_4_1_or_SPACETerminalRuleCall_4_0__a;
	protected AbstractElementAlias match_Chapter_Unit_HI_SPACETerminalRuleCall_2_q;
	protected AbstractElementAlias match_Chapter_Unit_Low_SPACETerminalRuleCall_2_q;
	protected AbstractElementAlias match_ExtBracketSentenceC_SPACETerminalRuleCall_4_q;
	protected AbstractElementAlias match_ExtBracketSentence_SPACETerminalRuleCall_4_q;
	protected AbstractElementAlias match_FreeSubSentence_SPACETerminalRuleCall_1_0_a;
	protected AbstractElementAlias match_FreeSubSentence_SPACETerminalRuleCall_3_0_0_a;
	protected AbstractElementAlias match_FreeSubSentence_SPACETerminalRuleCall_3_0_0_p;
	protected AbstractElementAlias match_FreeSubSentence_SPACETerminalRuleCall_4_0_a;
	protected AbstractElementAlias match_LineSubSentence_SPACETerminalRuleCall_3_q;
	protected AbstractElementAlias match_SentenceType_WhitespaceParserRuleCall_0_q;
	protected AbstractElementAlias match_SubSentence_SPACETerminalRuleCall_2_0_q;
	protected AbstractElementAlias match_SubSentence_SPACETerminalRuleCall_2_2_q;
	protected AbstractElementAlias match_SubSentence_SPACETerminalRuleCall_3_q;
	protected AbstractElementAlias match_TrailSubSentence_SPACETerminalRuleCall_1_2_0_q;
	protected AbstractElementAlias match_TrailSubSentence_SPACETerminalRuleCall_1_2_2_q;
	protected AbstractElementAlias match_TrailSubSentence_SPACETerminalRuleCall_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NaturalLangGrammarAccess) access;
		match_BracketSentence_SPACETerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getBracketSentenceAccess().getSPACETerminalRuleCall_5());
		match_BracketSentence___NEWLINETerminalRuleCall_4_1_or_SPACETerminalRuleCall_4_0__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getBracketSentenceAccess().getNEWLINETerminalRuleCall_4_1()), new TokenAlias(false, false, grammarAccess.getBracketSentenceAccess().getSPACETerminalRuleCall_4_0()));
		match_Chapter_Unit_HI_SPACETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getChapter_Unit_HIAccess().getSPACETerminalRuleCall_2());
		match_Chapter_Unit_Low_SPACETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getChapter_Unit_LowAccess().getSPACETerminalRuleCall_2());
		match_ExtBracketSentenceC_SPACETerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getExtBracketSentenceCAccess().getSPACETerminalRuleCall_4());
		match_ExtBracketSentence_SPACETerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getExtBracketSentenceAccess().getSPACETerminalRuleCall_4());
		match_FreeSubSentence_SPACETerminalRuleCall_1_0_a = new TokenAlias(true, true, grammarAccess.getFreeSubSentenceAccess().getSPACETerminalRuleCall_1_0());
		match_FreeSubSentence_SPACETerminalRuleCall_3_0_0_a = new TokenAlias(true, true, grammarAccess.getFreeSubSentenceAccess().getSPACETerminalRuleCall_3_0_0());
		match_FreeSubSentence_SPACETerminalRuleCall_3_0_0_p = new TokenAlias(true, false, grammarAccess.getFreeSubSentenceAccess().getSPACETerminalRuleCall_3_0_0());
		match_FreeSubSentence_SPACETerminalRuleCall_4_0_a = new TokenAlias(true, true, grammarAccess.getFreeSubSentenceAccess().getSPACETerminalRuleCall_4_0());
		match_LineSubSentence_SPACETerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getLineSubSentenceAccess().getSPACETerminalRuleCall_3());
		match_SentenceType_WhitespaceParserRuleCall_0_q = new TokenAlias(false, true, grammarAccess.getSentenceTypeAccess().getWhitespaceParserRuleCall_0());
		match_SubSentence_SPACETerminalRuleCall_2_0_q = new TokenAlias(false, true, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_2_0());
		match_SubSentence_SPACETerminalRuleCall_2_2_q = new TokenAlias(false, true, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_2_2());
		match_SubSentence_SPACETerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getSubSentenceAccess().getSPACETerminalRuleCall_3());
		match_TrailSubSentence_SPACETerminalRuleCall_1_2_0_q = new TokenAlias(false, true, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_1_2_0());
		match_TrailSubSentence_SPACETerminalRuleCall_1_2_2_q = new TokenAlias(false, true, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_1_2_2());
		match_TrailSubSentence_SPACETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getTrailSubSentenceAccess().getSPACETerminalRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBR_CLRule())
			return getBR_CLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOTRule())
			return getDOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getKOMMARule())
			return getKOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSPACERule())
			return getSPACEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWhitespaceRule())
			return getWhitespaceToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal BR_CL:
	 * 	')'
	 * ;
	 */
	protected String getBR_CLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal DOT:
	 * 	'.';
	 */
	protected String getDOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * terminal KOMMA:
	 * 	KM WS;
	 */
	protected String getKOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",\n";
	}
	
	/**
	 * terminal NEWLINE:
	 * 	'\r'? '\n';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * terminal SPACE:
	 * 	(' ' | '\t')+;
	 */
	protected String getSPACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	/**
	 * Whitespace:
	 * 	SPACE | (SPACE? NEWLINE SPACE?)
	 * ;
	 */
	protected String getWhitespaceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BracketSentence_SPACETerminalRuleCall_5_q.equals(syntax))
				emit_BracketSentence_SPACETerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BracketSentence___NEWLINETerminalRuleCall_4_1_or_SPACETerminalRuleCall_4_0__a.equals(syntax))
				emit_BracketSentence___NEWLINETerminalRuleCall_4_1_or_SPACETerminalRuleCall_4_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Chapter_Unit_HI_SPACETerminalRuleCall_2_q.equals(syntax))
				emit_Chapter_Unit_HI_SPACETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Chapter_Unit_Low_SPACETerminalRuleCall_2_q.equals(syntax))
				emit_Chapter_Unit_Low_SPACETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExtBracketSentenceC_SPACETerminalRuleCall_4_q.equals(syntax))
				emit_ExtBracketSentenceC_SPACETerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExtBracketSentence_SPACETerminalRuleCall_4_q.equals(syntax))
				emit_ExtBracketSentence_SPACETerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FreeSubSentence_SPACETerminalRuleCall_1_0_a.equals(syntax))
				emit_FreeSubSentence_SPACETerminalRuleCall_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FreeSubSentence_SPACETerminalRuleCall_3_0_0_a.equals(syntax))
				emit_FreeSubSentence_SPACETerminalRuleCall_3_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FreeSubSentence_SPACETerminalRuleCall_3_0_0_p.equals(syntax))
				emit_FreeSubSentence_SPACETerminalRuleCall_3_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FreeSubSentence_SPACETerminalRuleCall_4_0_a.equals(syntax))
				emit_FreeSubSentence_SPACETerminalRuleCall_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LineSubSentence_SPACETerminalRuleCall_3_q.equals(syntax))
				emit_LineSubSentence_SPACETerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SentenceType_WhitespaceParserRuleCall_0_q.equals(syntax))
				emit_SentenceType_WhitespaceParserRuleCall_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SubSentence_SPACETerminalRuleCall_2_0_q.equals(syntax))
				emit_SubSentence_SPACETerminalRuleCall_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SubSentence_SPACETerminalRuleCall_2_2_q.equals(syntax))
				emit_SubSentence_SPACETerminalRuleCall_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SubSentence_SPACETerminalRuleCall_3_q.equals(syntax))
				emit_SubSentence_SPACETerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TrailSubSentence_SPACETerminalRuleCall_1_2_0_q.equals(syntax))
				emit_TrailSubSentence_SPACETerminalRuleCall_1_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TrailSubSentence_SPACETerminalRuleCall_1_2_2_q.equals(syntax))
				emit_TrailSubSentence_SPACETerminalRuleCall_1_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TrailSubSentence_SPACETerminalRuleCall_2_q.equals(syntax))
				emit_TrailSubSentence_SPACETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     brackedSentences+=FreeSentence (SPACE | NEWLINE)* (ambiguity) close=BR_CL
	 *     open=BR_O (SPACE | NEWLINE)* (ambiguity) close=BR_CL
	 *     separator+=DOT (SPACE | NEWLINE)* (ambiguity) close=BR_CL
	 *     separator+=FS (SPACE | NEWLINE)* (ambiguity) close=BR_CL
	 *     separator+=FullStop (SPACE | NEWLINE)* (ambiguity) close=BR_CL
	 */
	protected void emit_BracketSentence_SPACETerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (SPACE | NEWLINE)*
	 *
	 * This ambiguous syntax occurs at:
	 *     brackedSentences+=FreeSentence (ambiguity) SPACE? close=BR_CL
	 *     open=BR_O (ambiguity) SPACE? close=BR_CL
	 *     separator+=DOT (ambiguity) SPACE? close=BR_CL
	 *     separator+=FS (ambiguity) SPACE? close=BR_CL
	 *     separator+=FullStop (ambiguity) SPACE? close=BR_CL
	 */
	protected void emit_BracketSentence___NEWLINETerminalRuleCall_4_1_or_SPACETerminalRuleCall_4_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     value+=chapterNum (ambiguity) (rule end)
	 */
	protected void emit_Chapter_Unit_HI_SPACETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     value+=decimalNumEN (ambiguity) (rule end)
	 */
	protected void emit_Chapter_Unit_Low_SPACETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     brackedSentences+=FreeSentence (ambiguity) close=EXBRC_CL
	 *     open=EXBRC_O (ambiguity) close=EXBRC_CL
	 *     separator+=DOT (ambiguity) close=EXBRC_CL
	 *     separator+=FS (ambiguity) close=EXBRC_CL
	 *     separator+=FullStop (ambiguity) close=EXBRC_CL
	 */
	protected void emit_ExtBracketSentenceC_SPACETerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     brackedSentences+=FreeSentence (ambiguity) close=EXBR_CL
	 *     open=EXBR_O (ambiguity) close=EXBR_CL
	 *     separator+=DOT (ambiguity) close=EXBR_CL
	 *     separator+=FS (ambiguity) close=EXBR_CL
	 *     separator+=FullStop (ambiguity) close=EXBR_CL
	 */
	protected void emit_ExtBracketSentence_SPACETerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) elements+=AllElements
	 *     (rule start) (ambiguity) elements+=New_Line
	 *     elements+=New_Line (ambiguity) elements+=AllElements
	 *     elements+=New_Line (ambiguity) elements+=New_Line
	 */
	protected void emit_FreeSubSentence_SPACETerminalRuleCall_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE*
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=AllElements (ambiguity) elements+=New_Line
	 *     elements+=New_Line (ambiguity) elements+=AllElements
	 *     elements+=New_Line (ambiguity) elements+=New_Line
	 */
	protected void emit_FreeSubSentence_SPACETerminalRuleCall_3_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE+
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=AllElements (ambiguity) elements+=AllElements
	 */
	protected void emit_FreeSubSentence_SPACETerminalRuleCall_3_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE*
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=AllElements (ambiguity) (rule end)
	 *     elements+=AllElements (ambiguity) elements+=New_Line
	 *     elements+=New_Line (ambiguity) (rule end)
	 *     elements+=New_Line (ambiguity) elements+=New_Line
	 */
	protected void emit_FreeSubSentence_SPACETerminalRuleCall_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=Elements (ambiguity) (rule end)
	 */
	protected void emit_LineSubSentence_SPACETerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Whitespace?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) block+=BlockElement
	 *     (rule start) (ambiguity) chapterNumber=ChapterAlpha
	 *     (rule start) (ambiguity) chapterNumber=Chapter_Unit_HI
	 *     (rule start) (ambiguity) chapterNumber=Chapter_Unit_Low
	 *     (rule start) (ambiguity) lines+=TableLine
	 */
	protected void emit_SentenceType_WhitespaceParserRuleCall_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=Elements (ambiguity) elements+=New_Line
	 *     elements+=NoNElement (ambiguity) elements+=New_Line
	 *     elements+=NoNElementX2 (ambiguity) elements+=New_Line
	 */
	protected void emit_SubSentence_SPACETerminalRuleCall_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=New_Line (ambiguity) elements+=NoNElementX2
	 */
	protected void emit_SubSentence_SPACETerminalRuleCall_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=Elements (ambiguity) (rule end)
	 *     elements+=NoNElement (ambiguity) (rule end)
	 *     elements+=NoNElementX2 (ambiguity) (rule end)
	 */
	protected void emit_SubSentence_SPACETerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=Elements (ambiguity) elements+=New_Line
	 *     elements+=NoNElementX2 (ambiguity) elements+=New_Line
	 */
	protected void emit_TrailSubSentence_SPACETerminalRuleCall_1_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=New_Line (ambiguity) elements+=NoNElementX2
	 */
	protected void emit_TrailSubSentence_SPACETerminalRuleCall_1_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SPACE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=Elements (ambiguity) (rule end)
	 *     elements+=NoNElementX2 (ambiguity) (rule end)
	 */
	protected void emit_TrailSubSentence_SPACETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
