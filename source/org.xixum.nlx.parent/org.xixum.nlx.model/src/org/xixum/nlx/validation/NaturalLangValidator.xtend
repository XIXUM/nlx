/*
 * generated by Xtext 2.16.0
 */
package org.xixum.nlx.validation

import com.google.inject.Inject
import org.xixum.nlx.dictionary.IDictionaryAccess
import org.xixum.nlx.dictionary.util.LogUtils
import org.xixum.nlx.naturalLang.Elements
import org.xixum.nlx.naturalLang.NaturalLangPackage
import org.xixum.nlx.naturalLang.Sentence
import org.xixum.nlx.naturalLang.SubSentence
import org.xixum.nlx.naturalLang.Word
import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.builder.debug.IBuildLogger
import org.eclipse.xtext.util.EmfFormatter
import org.eclipse.xtext.validation.Check

import static org.xixum.nlx.constants.NaturalLangConstants._CAPITALIZE_NAME
import static org.xixum.nlx.constants.NaturalLangConstants._MATCH_PATTERN
import static org.xixum.nlx.constants.NaturalLangConstants._TRAIN_DICT
import static org.xixum.nlx.constants.NaturalLangConstants._TRAIN_TYPE
import static org.xixum.nlx.constants.NaturalLangConstants._TYPO

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class NaturalLangValidator extends AbstractNaturalLangValidator {

	
	@Inject
	IDictionaryAccess dictAcc;
	
	@Inject
	protected IBuildLogger buildLogger;
	//protected ImplicitRulesOnDict semantics
	
	//TODO: consider @Inject 
	protected LogUtils logUtil = new LogUtils(buildLogger);
	
// TODO: to be replaced by preferences Entry
	boolean val_CAPITALIZE_PREF_ON = true;
	boolean val_DICT_PREF_ON = true

	@Check
	def checkWordIsInDict(Elements element) {
		if (val_DICT_PREF_ON) {
			//TODO: try to find Marker to Position before accessing the dictionary
			if (element instanceof Word) {
				if (!dictAcc.isConnected())
					return;
				for (fragment : element.word) {
					if (fragment !== null && fragment.matches(_MATCH_PATTERN)) {
						var result = dictAcc.findInDictionary(fragment)
						if (result === null)
							info(String.format(_TRAIN_TYPE, fragment), NaturalLangPackage.Literals.WORD__WORD, _TRAIN_DICT, fragment)
					}
				}
			}
		} else {
			logUtil.logAccess("Dict PREF", 1, "Dictionary Disabled");
		}
	}

	@Check
	def checkSentenceStartsWithUpperCase(SubSentence ssentence) {
		if (val_CAPITALIZE_PREF_ON) {
			var elList = (ssentence.elements as Object) as EList<EObject> ?: new BasicEList();
			if (elList.isEmpty) return;
			var sentence = ssentence.eContainer as Sentence;
			if (!sentence.subsentence.get(0).equals(ssentence)) return;
			var el0 = ssentence.elements.get(0) as EObject;
			if (el0 instanceof Word)
				if (!Character.isUpperCase(el0.word.get(0).charAt(0))) {
					warning(_CAPITALIZE_NAME, NaturalLangPackage.Literals.SUB_SENTENCE__ELEMENTS, _TYPO, el0.word)
				}
		} else {
			logUtil.logAccess("Validate", 1, "Typography Disabled");
		}
	}
}
